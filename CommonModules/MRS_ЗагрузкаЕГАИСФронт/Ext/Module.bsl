#Область ПрограммныйИнтерфейс

// Запускает фоновое задание загрузки акцизных марок из фискальной базы MRIYA.
//
// Возвращаемое значение:
//   Нет
//
Процедура ЗапускЗагрузкиАкцизныхМарокИзФронтаMRIYAВФоне() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыФЗ = Новый Массив();
	ПараметрыФЗ.Добавить("MRS_FISCAL_BASE_MRIYA");
	
	ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
	ПараметрыФЗ.Добавить(ТекущийПользователь);
	
	Попытка
		ФоновыеЗадания.Выполнить(
		"MRS_ЗагрузкаЕГАИСФронт.ВыполнитьЗагрузкуАкцизныхМарокИзФронта",
		ПараметрыФЗ,
		Метаданные.РегламентныеЗадания.MRS_ЗагрузкаАкцизныхМарокИзФронтаMRIYAВФоне.Ключ,
		НСтр("ru = 'Загрузка акциз из фискальной базы MRIYA уже выполняется';
		|en = 'FRONT-MRIYA'"));
	Исключение
		// Если задание уже запущено, записываем в журнал
		ТекстОшибки = "Повторный запуск загрузки MRIYA. " +
			"Загрузка акцизных марок из фискальной базы MRIYA уже выполняется";
		ЗаписатьВЖурналРегистрации(ТекстОшибки);
	КонецПопытки
		
КонецПроцедуры

Процедура ЗапускЗагрузкиАкцизныхМарокИзФронтаWINEPARKВФоне() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыФЗ = Новый Массив();
	ПараметрыФЗ.Добавить("MRS_FISCAL_BASE_WINEPARK");
	
	ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
	ПараметрыФЗ.Добавить(ТекущийПользователь);
	
	Попытка
		ФоновыеЗадания.Выполнить(
		"MRS_ЗагрузкаЕГАИСФронт.ВыполнитьЗагрузкуАкцизныхМарокИзФронта",
		ПараметрыФЗ,
		Метаданные.РегламентныеЗадания.MRS_ЗагрузкаАкцизныхМарокИзФронтаMRIYAВФоне.Ключ,
		НСтр("ru = 'Загрузка акциз из фискальной базы WINEPARK уже выполняется';
		|en = 'FRONT-WINEPARK'"));
	Исключение
		// Если задание уже запущено, записываем в журнал
		ТекстОшибки = "Повторный запуск загрузки WINEPARK. " +
			"Загрузка акцизных марок из фискальной базы WINEPARK уже выполняется";
		ЗаписатьВЖурналРегистрации(ТекстОшибки);
	КонецПопытки
		
КонецПроцедуры

Процедура ЗапускЗагрузкиАкцизныхМарокИзФронтаAIPETRIВФоне() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыФЗ = Новый Массив();
	ПараметрыФЗ.Добавить("MRS_FISCAL_BASE_AIPETRI");  
	
	ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
	ПараметрыФЗ.Добавить(ТекущийПользователь);
	
	Попытка
		ФоновыеЗадания.Выполнить(
		"MRS_ЗагрузкаЕГАИСФронт.ВыполнитьЗагрузкуАкцизныхМарокИзФронта",
		ПараметрыФЗ,
		Метаданные.РегламентныеЗадания.MRS_ЗагрузкаАкцизныхМарокИзФронтаAIPETRIВФоне.Ключ,
		НСтр("ru = 'Загрузка акциз из фискальной базы AIPETRI уже выполняется';
		|en = 'FRONT-AIPETRI'"));
	Исключение
		// Если задание уже запущено, записываем в журнал
		ТекстОшибки = "Повторный запуск загрузки AIPETRI. " +
			"Загрузка акцизных марок из фискальной базы AIPETRI уже выполняется";
		ЗаписатьВЖурналРегистрации(ТекстОшибки);
	КонецПопытки
	
КонецПроцедуры

Процедура ЗапускЗагрузкиАкцизныхМарокИзФронтаK32MOSCOWВФоне() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыФЗ = Новый Массив();
	ПараметрыФЗ.Добавить("MRS_FISCAL_BASE_K32MOSCOW");
		
	ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
	ПараметрыФЗ.Добавить(ТекущийПользователь);
	
	Попытка
		ФоновыеЗадания.Выполнить(
		"MRS_ЗагрузкаЕГАИСФронт.ВыполнитьЗагрузкуАкцизныхМарокИзФронта",
		ПараметрыФЗ,
		Метаданные.РегламентныеЗадания.MRS_ЗагрузкаАкцизныхМарокИзФронтаK32MOSCOWВФоне.Ключ,
		НСтр("ru = 'Загрузка акциз из фискальной базы K32MOSCOW уже выполняется';
		|en = 'FRONT-K32MOSCOW'"));
	Исключение
		// Если задание уже запущено.
	КонецПопытки

КонецПроцедуры

Процедура ЗапускЗагрузкиАкцизныхМарокИзФронтаCHAIKAMOSCOWВФоне() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);

	ПараметрыФЗ = Новый Массив();
	ПараметрыФЗ.Добавить("MRS_FISCAL_BASE_CHAIKAMOSCOW");
		
	ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
	ПараметрыФЗ.Добавить(ТекущийПользователь);
	
	Попытка
		ФоновыеЗадания.Выполнить(
		"MRS_ЗагрузкаЕГАИСФронт.ВыполнитьЗагрузкуАкцизныхМарокИзФронта",
		ПараметрыФЗ,
		Метаданные.РегламентныеЗадания.MRS_ЗагрузкаАкцизныхМарокИзФронтаCHAIKAMOSCOWВФоне.Ключ,
		НСтр("ru = 'Загрузка акциз из фискальной базы CHAIKAMOSCOW уже выполняется';
		|en = 'FRONT-CHAIKAMOSCOW'"));
	Исключение
		// Если задание уже запущено.
	КонецПопытки
	
КонецПроцедуры

Процедура ЗапускЗагрузкиАкцизныхМарокИзФронтаKHERSONESВФоне() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);

	ПараметрыФЗ = Новый Массив();
	ПараметрыФЗ.Добавить("MRS_FISCAL_BASE_KHERSONES");
	
	ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
	ПараметрыФЗ.Добавить(ТекущийПользователь);
	
	Попытка
		ФоновыеЗадания.Выполнить(
		"MRS_ЗагрузкаЕГАИСФронт.ВыполнитьЗагрузкуАкцизныхМарокИзФронта",
		ПараметрыФЗ,
		Метаданные.РегламентныеЗадания.MRS_ЗагрузкаАкцизныхМарокИзФронтаKHERSONESВФоне.Ключ,
		НСтр("ru = 'Загрузка акциз из фискальной базы KHERSONES уже выполняется';
		|en = 'FRONT-KHERSONES'"));
	Исключение
		// Если задание уже запущено.
	КонецПопытки
	
КонецПроцедуры

Процедура ЗапускЗагрузкиАкцизныхМарокИзФронтаMRIYA_2ВФоне() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);

	ПараметрыФЗ = Новый Массив();
	ПараметрыФЗ.Добавить("MRS_FISCAL_BASE_AZUR_2");
	
	ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
	ПараметрыФЗ.Добавить(ТекущийПользователь);
	
	Попытка
		ФоновыеЗадания.Выполнить(
		"MRS_ЗагрузкаЕГАИСФронт.ВыполнитьЗагрузкуАкцизныхМарокИзФронта",
		ПараметрыФЗ,
		Метаданные.РегламентныеЗадания.MRS_ЗагрузкаАкцизныхМарокИзФронтаMRIYA_2ВФоне.Ключ,
		НСтр("ru = 'Загрузка акциз из фискальной базы MRIYA_2 уже выполняется';
		|en = 'FRONT-MRIYA-2'"));
	Исключение
		// Если задание уже запущено.
	КонецПопытки
	
КонецПроцедуры

Процедура ЗапускЗагрузкиАкцизныхМарокИзФронтаALUPKAВФоне() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);

	ПараметрыФЗ = Новый Массив();
	ПараметрыФЗ.Добавить("MRS_FISCAL_BASE_ALUPKA");
	
	ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
	ПараметрыФЗ.Добавить(ТекущийПользователь);
	
	Попытка
		ФоновыеЗадания.Выполнить(
		"MRS_ЗагрузкаЕГАИСФронт.ВыполнитьЗагрузкуАкцизныхМарокИзФронта",
		ПараметрыФЗ,
		Метаданные.РегламентныеЗадания.MRS_ЗагрузкаАкцизныхМарокИзФронтаALUPKAВФоне.Ключ,
		НСтр("ru = 'Загрузка акциз из фискальной базы ALUPKA уже выполняется';
		|en = 'FRONT-ALUPKA'"));
	Исключение
		// Если задание уже запущено.
	КонецПопытки
	
КонецПроцедуры

Процедура ЗапускСозданияСборокВФоне() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	АкцизныеМарки = Неопределено;
	ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
	
	ПараметрыФЗ = Новый Массив();
	ПараметрыФЗ.Добавить(АкцизныеМарки);
	ПараметрыФЗ.Добавить(ТекущийПользователь);
	Попытка
		ФоновыеЗадания.Выполнить(
		"ПЛ_Сервер.СформироватьСборкаТоваровАлкогольнойПродукции", 
		ПараметрыФЗ,
		Метаданные.РегламентныеЗадания.MRS_СозданиеСборок.Ключ,
		НСтр("ru = 'Создание сборок уже выполняется';
		|en = 'Sborka'"));
	Исключение
		// Если задание уже запущено.
	КонецПопытки
		
КонецПроцедуры

// Выполняет загрузку акцизных марок из указанной фискальной базы.
//
// Параметры:
//   ИмяФискальнойБазы - Строка - имя фискальной базы для загрузки данных
//   Пользователь - СправочникСсылка.Пользователи - пользователь, под которым выполняется загрузка
//
Процедура ВыполнитьЗагрузкуАкцизныхМарокИзФронта(ИмяФискальнойБазы, Пользователь) Экспорт
		
	ТекстСообщения = СтрШаблон("Начато заполнение данных по акцизным маркам проданных бутылок. Фискальная база: %1",ИмяФискальнойБазы);
	ЗаписатьВЖурналРегистрации(ТекстСообщения);
	
	НастройкиФискальнойБазы = ПолучитьНастройкиФискальнойБазы(ИмяФискальнойБазы, Пользователь);
	
	ДанныеФискальнойБазы = Новый ТаблицаЗначений;
	
	ПолучитьРезультатыЗапросаКФискальнойБазе(ДанныеФискальнойБазы, НастройкиФискальнойБазы);
	
	ОбработатьПолученныеДанные(ДанныеФискальнойБазы);
	
	ЗаписатьВБазу(ДанныеФискальнойБазы);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Получает настройки подключения к фискальной базе и даты запрета загрузки.
//
// Параметры:
//   ИмяФискальнойБазы - Строка - имя фискальной базы
//   Пользователь - СправочникСсылка.Пользователи - пользователь
//   ИмяСобытия - Строка - имя события для журнала регистрации
//
// Возвращаемое значение:
//   Структура - настройки фискальной базы или Неопределено при ошибке
//
Функция ПолучитьНастройкиФискальнойБазы(ИмяФискальнойБазы, Пользователь, ИмяСобытия = "Загрузка акцизных марок ЕГАИС") Экспорт
	
	СтруктураНастроек = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	MRS_НастройкиПодключенияFiscalDBFront.ИмяВнешнейБД КАК ИмяВнешнейБД,
	               |	MRS_НастройкиПодключенияFiscalDBFront.Сервер КАК Сервер,
	               |	MRS_НастройкиПодключенияFiscalDBFront.СинонимВнешнейБД КАК СинонимВнешнейБД,
	               |	MRS_НастройкиПодключенияFiscalDBFront.ДатаЗапретаЗагрузки КАК ДатаЗапретаЗагрузки
	               |ИЗ
	               |	РегистрСведений.MRS_НастройкиПодключенияFiscalDBFront КАК MRS_НастройкиПодключенияFiscalDBFront
	               |ГДЕ
	               |	MRS_НастройкиПодключенияFiscalDBFront.ИмяВнешнейБД ПОДОБНО ""%"" + &ИмяВнешнейБД + ""%""";
	Запрос.УстановитьПараметр("ИмяВнешнейБД",ИмяФискальнойБазы); 
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Если РезультатЗапроса.Количество() = 0 Тогда
		
		ШаблонСообщения = "Не удалось получить настройку подключения, " +
			"проверьте РегистрСведений.MRS_НастройкиПодключенияFiscalDBFront. Фискальная база: %1";
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ИмяФискальнойБазы);
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
		Возврат Неопределено;
		
	КонецЕсли;
	
	Пока РезультатЗапроса.Следующий() Цикл
		
		СтруктураНастроек.Вставить("ИмяВнешнейБД", РезультатЗапроса.ИмяВнешнейБД);
		СтруктураНастроек.Вставить("Сервер", РезультатЗапроса.Сервер);
		СтруктураНастроек.Вставить("СинонимВнешнейБД", РезультатЗапроса.СинонимВнешнейБД);
				
		ДатаЗапретаЗагрузкиФискальная = РезультатЗапроса.ДатаЗапретаЗагрузки;
		
	КонецЦикла;
	
	ДатаЗапретаПериода = ПолучитьДатыЗапрета(Пользователь);

	Если ЗначениеЗаполнено(ДатаЗапретаПериода) Тогда 
		СтруктураНастроек.Вставить("ДатаЗапретаЗагрузки", ДатаЗапретаПериода);
    Иначе
	    СтруктураНастроек.Вставить("ДатаЗапретаЗагрузки", ДатаЗапретаЗагрузкиФискальная);
	КонецЕсли;
	
	Возврат СтруктураНастроек;
	
КонецФункции

Функция ПолучитьДатыЗапрета(Пользователь)
	
	СтруктураВозврат = Новый Структура;
	
	Текст = "ВЫБРАТЬ
	        |	НАЧАЛОПЕРИОДА(МАКСИМУМ(Даты.ДатаЗапрета), ДЕНЬ) КАК ДатаЗапрета
	        |ИЗ
	        |	(ВЫБРАТЬ
	        |		ДатыЗапретаИзменения.ДатаЗапрета КАК ДатаЗапрета
	        |	ИЗ
	        |		РегистрСведений.ДатыЗапретаИзменения КАК ДатыЗапретаИзменения
	        |	ГДЕ
	        |		ДатыЗапретаИзменения.Пользователь = &Пользователь
	        |	
	        |	ОБЪЕДИНИТЬ ВСЕ
	        |	
	        |	ВЫБРАТЬ
	        |		ДатыЗапретаИзменения.ДатаЗапрета
	        |	ИЗ
	        |		РегистрСведений.ДатыЗапретаИзменения КАК ДатыЗапретаИзменения
	        |	ГДЕ
	        |		ДатыЗапретаИзменения.Пользователь = ЗНАЧЕНИЕ(Перечисление.ВидыНазначенияДатЗапрета.ДляВсехПользователей)) КАК Даты";

	Запрос = Новый Запрос(Текст);

	// Установка параметров.
	Запрос.УстановитьПараметр("Пользователь", Пользователь);

	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл

		ДатаЗапрета = Выборка.ДатаЗапрета;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ДатаЗапрета) Тогда
    	Возврат ДатаЗапрета;
	Иначе
		Возврат Дата(1,1,1,0,0,0);
	КонецЕсли;
	
КонецФункции


Процедура ПолучитьРезультатыЗапросаКФискальнойБазе(ДанныеФискальнойБазы, НастройкиФискальнойБазы, ИмяСобытия = "Загрузка акцизных марок ЕГАИС") Экспорт
	
	ВнешнийИсточникФискальнаяБаза = Неопределено;
	
	Попытка
		ВнешнийИсточникФискальнаяБаза = ВнешниеИсточникиДанных[НастройкиФискальнойБазы.ИмяВнешнейБД];
	Исключение
		ТекстСообщения = СтрШаблон("Не найден внешний источник. Фискальная база: %1",НастройкиФискальнойБазы.ИмяВнешнейБД);
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
   		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
	
	Попытка
		
		ПараметрыСоединения = ВнешнийИсточникФискальнаяБаза.ПолучитьОбщиеПараметрыСоединения();
		ПараметрыСоединения.АутентификацияСтандартная = Истина;
		
		СтрокаПодключения = "DRIVER=SQLite3 ODBC Driver;Database=\\" + 
			НастройкиФискальнойБазы.Сервер + "\fiscaldb\1C_DB\FiscalDB.db3";
		ПараметрыСоединения.СтрокаСоединения = СтрокаПодключения; 
		
		ВнешнийИсточникФискальнаяБаза.УстановитьОбщиеПараметрыСоединения(ПараметрыСоединения);
		ВнешнийИсточникФискальнаяБаза.УстановитьПараметрыСоединенияПользователя(ИмяПользователя(), ПараметрыСоединения);
		ВнешнийИсточникФискальнаяБаза.УстановитьПараметрыСоединенияСеанса(ПараметрыСоединения);
		ВнешнийИсточникФискальнаяБаза.УстановитьСоединение();
				
		Запрос = Новый Запрос;
		Запрос.Текст  = "ВЫБРАТЬ                                                                          
		                |	excisemarks.rvc КАК rvc,
		                |	excisemarks.cknum КАК cknum,
		                |	markcodes.code КАК code,
		                |	excisemarks.date КАК date,
						|	markcodes.vol КАК vol,
						|	excisemarks.ckpos КАК ckpos
		                |ИЗ
		                |	ВнешнийИсточникДанных." + НастройкиФискальнойБазы.ИмяВнешнейБД + ".Таблица.excisemarks КАК excisemarks
						|	ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных."+ НастройкиФискальнойБазы.ИмяВнешнейБД +".Таблица.markcodes КАК markcodes
						|	ПО (excisemarks.id = markcodes.exciseid)
						|	ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных."+ НастройкиФискальнойБазы.ИмяВнешнейБД +".Таблица.midef КАК midef
						|	ПО (excisemarks.objnum = midef.objnum)
		                |ГДЕ
		                |	excisemarks.info ЕСТЬ NULL
		                |	И excisemarks.date >= &date";		
		///переменная дата
	    Запрос.УстановитьПараметр("date",НастройкиФискальнойБазы.ДатаЗапретаЗагрузки);
		//Запрос.УстановитьПараметр("datenow",НачалоДня(ТекущаяДата()));
		///
		
		Выгрузка = Запрос.Выполнить().Выгрузить();
		
		Если ДанныеФискальнойБазы.Колонки.Количество() = 0 Тогда
			Для каждого Поле Из Выгрузка.Колонки Цикл
				ДанныеФискальнойБазы.Колонки.Добавить(Поле.Имя, Поле.ТипЗначения);
			КонецЦикла;
		КонецЕсли;
		
		Для каждого Стр Из Выгрузка Цикл
			ЗаполнитьЗначенияСвойств(ДанныеФискальнойБазы.Добавить(), Стр);
		КонецЦикла;
		
		ВнешнийИсточникФискальнаяБаза.РазорватьСоединение();
		
		Если ДанныеФискальнойБазы.Количество() = 0 Тогда
			
			ТекстСообщения = СтрШаблон("Данных фискальной базы нет к записи. Фискальная база: %1",НастройкиФискальнойБазы.ИмяВнешнейБД);
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, , , ТекстСообщения);
   			
		КонецЕсли;
			
		Набор = РегистрыСведений.MRS_НастройкиПодключенияFiscalDBFront.СоздатьНаборЗаписей();
		Набор.Отбор.ИмяВнешнейБД.Установить(НастройкиФискальнойБазы.ИмяВнешнейБД);
		Набор.Прочитать();
		
		Для Каждого Запись из Набор Цикл
			
			Запись.ДатаЗапретаЗагрузки = ТекущаяДатаСеанса();
			
		КонецЦикла;
		
		Набор.Записать();

	Исключение
		
		ОписаниеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ОписаниеОшибки);
		
	КонецПопытки;
	
КонецПроцедуры

// запись данных в РС MRS_АкцизныеМаркиПроданныхБутылок
Процедура ЗаписатьВБазу(ДанныеФискальнойБазы) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НовыеЗаписи", ДанныеФискальнойБазы);
	// Запрос выбирает из таблицы загрузки такие записи, которых нет в РС совсем и такие, которые отличаются хотя бы одним полем от записи в РС.
	// Существующая запись с тем же значением штрихкода будет заменена новой записью - она должна быть обработана заново.
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПОДСТРОКА(НовыеЗаписи.ЗначениеШтрихкода, 1, 255) КАК ЗначениеШтрихкода,
	|	НовыеЗаписи.ДатаСканирования КАК ДатаСканирования,
	|	ПОДСТРОКА(НовыеЗаписи.КодМестаПродажи, 1, 10) КАК КодМестаПродажи,
	|	НовыеЗаписи.МестоПродажи КАК МестоПродажи,
	|	НовыеЗаписи.АкцизнаяМарка КАК АкцизнаяМарка,
	|	НовыеЗаписи.НомерЧека КАК НомерЧека,
	|	НовыеЗаписи.ПозицияЧека КАК ПозицияЧека,
	|	НовыеЗаписи.КоличествоВыбытия КАК КоличествоВыбытия,
	|	НовыеЗаписи.ТипВыбытия КАК ТипВыбытия,
	|	НовыеЗаписи.Серия КАК Серия,
	|	НовыеЗаписи.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ НовыеЗаписи
	|ИЗ
	|	&НовыеЗаписи КАК НовыеЗаписи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НовыеЗаписи.ЗначениеШтрихкода КАК ЗначениеШтрихкода,
	|	НовыеЗаписи.ДатаСканирования КАК ДатаСканирования,
	|	НовыеЗаписи.КодМестаПродажи КАК КодМестаПродажи,
	|	НовыеЗаписи.МестоПродажи КАК МестоПродажи,
	|	НовыеЗаписи.АкцизнаяМарка КАК АкцизнаяМарка,
	|	НовыеЗаписи.НомерЧека КАК НомерЧека,
	|	НовыеЗаписи.ПозицияЧека КАК ПозицияЧека,
	|	НовыеЗаписи.КоличествоВыбытия КАК КоличествоВыбытия,
	|	НовыеЗаписи.ТипВыбытия КАК ТипВыбытия,
	|	НовыеЗаписи.Серия КАК Серия,
	|	НовыеЗаписи.Номенклатура КАК Номенклатура
	|ИЗ
	|	НовыеЗаписи КАК НовыеЗаписи
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.MRS_АкцизныеМаркиПроданныхБутылок КАК ТекущиеЗаписи
	|		ПО НовыеЗаписи.ЗначениеШтрихкода = ТекущиеЗаписи.ЗначениеШтрихкода
	|			И НовыеЗаписи.ДатаСканирования = ТекущиеЗаписи.ДатаСканирования
	|			И НовыеЗаписи.КодМестаПродажи = ТекущиеЗаписи.КодМестаПродажи
	|			И НовыеЗаписи.НомерЧека = ТекущиеЗаписи.НомерЧека
	|			И НовыеЗаписи.ПозицияЧека = ТекущиеЗаписи.ПозицияЧека";
	
	Выборка = Запрос.Выполнить().Выбрать();
		
	Пока Выборка.Следующий() Цикл
		
		МенеджерЗаписи = РегистрыСведений.MRS_АкцизныеМаркиПроданныхБутылок.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
		МенеджерЗаписи.Записать();
			
	КонецЦикла; 
	
КонецПроцедуры

//для заполнения выпуска и целевых документов, получим проданную серию
Функция ПолучитьАкцизнуюМаркуПоНомеруЧека(НомерЧека, ДатаПродажи, Номенклатура) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	MRS_АкцизныеМаркиПроданныхБутылок.Серия КАК Серия,
	               |	1 КАК Количество,
	               |	MRS_АкцизныеМаркиПроданныхБутылок.НомерЧека КАК НомерЧека
	               |ИЗ
	               |	РегистрСведений.MRS_АкцизныеМаркиПроданныхБутылок КАК MRS_АкцизныеМаркиПроданныхБутылок
	               |ГДЕ
	               |	MRS_АкцизныеМаркиПроданныхБутылок.НомерЧека = &НомерЧека
	               |	И MRS_АкцизныеМаркиПроданныхБутылок.ДатаСканирования МЕЖДУ &ДатаСканированияНачало И &ДатаСканированияКонец
	               |	И MRS_АкцизныеМаркиПроданныхБутылок.Номенклатура = &Номенклатура
	               |ИТОГИ
	               |	СУММА(Количество)
	               |ПО
	               |	ОБЩИЕ,
	               |	Серия";
	
	Запрос.УстановитьПараметр("НомерЧека", НомерЧека);
	Запрос.УстановитьПараметр("ДатаСканированияНачало",НачалоДня(ДатаПродажи));
	Запрос.УстановитьПараметр("ДатаСканированияКонец",КонецДня(ДатаПродажи));
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса;
	
КонецФункции

//для переходного периода, сначала нужно досписать вскрытую продукцию
Функция ПолучитьОстаткиВскрытойПродукции(Номенклатура, Склад, Период) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТоварыНаСкладахОстатки.ВНаличииОстаток КАК ВНаличииОстаток
	               |ИЗ
	               |	РегистрНакопления.ТоварыНаСкладах.Остатки(
	               |			&Период,
	               |			Номенклатура = &Номенклатура
	               |				И Склад = &Склад) КАК ТоварыНаСкладахОстатки";
	Запрос.УстановитьПараметр("Номенклатура",Номенклатура);
	Запрос.УстановитьПараметр("Склад",Склад);
	Запрос.УстановитьПараметр("Период",Период);
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Возврат РезультатЗапроса;
	
КонецФункции

// Получает марки для списания в ЕГАИС по товарам (не продажам).
// Используется при формировании выпуска.
//
// Параметры:
//   ДокументВыпускБлюд - ДокументОбъект.питВыпускБлюд - документ выпуска блюд
//
// Возвращаемое значение:
//   Структура - данные по маркам для производства с ключами:
//     * Шапка - ОрганизацияЕГАИС
//     * ДанныеСерииТовара - таблица серий товаров
//
Функция ПолучитьОстаткиМарокДляПроизводства(ДокументВыпускБлюд, тблСозданныеДокументы) Экспорт
	
	СтруктураВозврата = Новый Структура;
	ОрганизацияЕГАИС = Неопределено;
	
	ДанныеСерииТовара = Новый ТаблицаЗначений;
	ДанныеСерииТовара.Колонки.Добавить("Номенклатура");
	ДанныеСерииТовара.Колонки.Добавить("Количество");
	ДанныеСерииТовара.Колонки.Добавить("ОрганизацияЕГАИС");
	ДанныеСерииТовара.Колонки.Добавить("АкцизнаяМарка");
	ДанныеСерииТовара.Колонки.Добавить("Справка2");
	ДанныеСерииТовара.Колонки.Добавить("АлкогольнаяПродукция");

	// 1. Получаем марки из ТЧ "ТоварыСерии" документа "Выпуск блюд", если это не розничная реализация.
	Если НЕ ДокументВыпускБлюд.ХозяйственнаяОперация = Перечисления.питХозяйственныеОперации.ВыпускПродукцииСРозничнойРеализацией Тогда
			
		ЗапросСерии = Новый Запрос;
		
		ЗапросСерии.Текст =
		"ВЫБРАТЬ
		|	питВыпускБлюдТоварыСерии.Номенклатура КАК Номенклатура,
		|	питВыпускБлюдТоварыСерии.Серия КАК Серия,
		|	питВыпускБлюдТоварыСерии.Количество КАК Количество,
		|	питВыпускБлюдТоварыСерии.Серия.Номер КАК СерияНомер
		|ПОМЕСТИТЬ ВТ_Серии
		|ИЗ
		|	Документ.питВыпускБлюд.ТоварыСерии КАК питВыпускБлюдТоварыСерии
		|ГДЕ
		|	питВыпускБлюдТоварыСерии.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Серии.Номенклатура КАК Номенклатура,
		|	ВТ_Серии.Серия КАК Серия,
		|	ВТ_Серии.Количество КАК Количество,
		|	ВТ_Серии.СерияНомер КАК СерияНомер,
		|	АкцизныеМаркиЕГАИС.ОрганизацияЕГАИС КАК ОрганизацияЕГАИС,
		|	АкцизныеМаркиЕГАИС.АкцизнаяМарка КАК АкцизнаяМарка,
		|	АкцизныеМаркиЕГАИС.Справка2 КАК Справка2,
		|	АкцизныеМаркиЕГАИС.АлкогольнаяПродукция КАК АлкогольнаяПродукция
		|ИЗ
		|	ВТ_Серии КАК ВТ_Серии
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АкцизныеМаркиЕГАИС КАК АкцизныеМаркиЕГАИС
		|		ПО ВТ_Серии.СерияНомер = АкцизныеМаркиЕГАИС.АкцизнаяМарка.ЗначениеШтрихкода
		|ИТОГИ ПО
		|	ОрганизацияЕГАИС";

		ЗапросСерии.УстановитьПараметр("Ссылка", ДокументВыпускБлюд);
		РезультатЗапросаСерии = ЗапросСерии.Выполнить();
		
		Если НЕ РезультатЗапросаСерии.Пустой() Тогда
        	ВыборкаСерииШапка = РезультатЗапросаСерии.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаСерииШапка.Следующий() Цикл
				
				Если ОрганизацияЕГАИС = Неопределено Тогда
					ОрганизацияЕГАИС = ВыборкаСерииШапка.ОрганизацияЕГАИС;
				КонецЕсли;

				ВыборкаСерии = ВыборкаСерииШапка.Выбрать();
				
				Пока ВыборкаСерии.Следующий() Цикл
					
					СтрокаТЧСерии = ДанныеСерииТовара.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТЧСерии, ВыборкаСерии);
					
				КонецЦикла;
			
			КонецЦикла;
		КонецЕсли;			
	КонецЕсли;

	// 2. Получаем марки из документов "Производство без заказа".
	МассивДокументов = Новый Массив;
	Для Каждого Строка Из тблСозданныеДокументы Цикл
		Если ТипЗнч(Строка.ТиповойДокумент) = Тип("ДокументСсылка.ПроизводствоБезЗаказа") Тогда
			МассивДокументов.Добавить(Строка.ТиповойДокумент);
		КонецЕсли;
	КонецЦикла;

	Если МассивДокументов.Количество() > 0 Тогда
		ЗапросПроизводство = Новый Запрос;
		ЗапросПроизводство.Текст =
		"ВЫБРАТЬ
		|	ПроизводствоБезЗаказаМатериалыИРаботы.Номенклатура КАК Номенклатура,
		|	ПроизводствоБезЗаказаМатериалыИРаботы.Количество КАК Количество,
		|	АкцизныеМаркиЕГАИС.ОрганизацияЕГАИС КАК ОрганизацияЕГАИС,
		|	АкцизныеМаркиЕГАИС.АкцизнаяМарка КАК АкцизнаяМарка,
		|	АкцизныеМаркиЕГАИС.Справка2 КАК Справка2,
		|	АкцизныеМаркиЕГАИС.АлкогольнаяПродукция КАК АлкогольнаяПродукция
		|ИЗ
		|	Документ.ПроизводствоБезЗаказа.МатериалыИРаботы КАК ПроизводствоБезЗаказаМатериалыИРаботы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АкцизныеМаркиЕГАИС КАК АкцизныеМаркиЕГАИС
		|		ПО (ПроизводствоБезЗаказаМатериалыИРаботы.Серия.Номер = АкцизныеМаркиЕГАИС.АкцизнаяМарка.ЗначениеШтрихкода)
		|ГДЕ
		|	ПроизводствоБезЗаказаМатериалыИРаботы.Ссылка В(&МассивДокументов)
		|	И ПроизводствоБезЗаказаМатериалыИРаботы.Номенклатура.АлкогольнаяПродукция
		|	И ПроизводствоБезЗаказаМатериалыИРаботы.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|ИТОГИ ПО
		|	ОрганизацияЕГАИС";
		
		ЗапросПроизводство.УстановитьПараметр("МассивДокументов", МассивДокументов);
		РезультатЗапросаПроизводство = ЗапросПроизводство.Выполнить();
		
		Если НЕ РезультатЗапросаПроизводство.Пустой() Тогда
			ВыборкаПроизводствоШапка = РезультатЗапросаПроизводство.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПроизводствоШапка.Следующий() Цикл
				
				Если ОрганизацияЕГАИС = Неопределено Тогда
					ОрганизацияЕГАИС = ВыборкаПроизводствоШапка.ОрганизацияЕГАИС;
				КонецЕсли;

				ВыборкаПроизводство = ВыборкаПроизводствоШапка.Выбрать();
				
				Пока ВыборкаПроизводство.Следующий() Цикл
					СтрокаТЧСерии = ДанныеСерииТовара.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТЧСерии, ВыборкаПроизводство);
				КонецЦикла;
			
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	Если ДанныеСерииТовара.Количество() > 0 Тогда
		СтруктураВозврата.Вставить("Шапка", ОрганизацияЕГАИС);
		СтруктураВозврата.Вставить("ДанныеСерииТовара", ДанныеСерииТовара);
	КонецЕсли;
			
	Возврат СтруктураВозврата;
КонецФункции

Процедура ОбновитьЗаписьВРегистреПроданныхМарок(НомерЧека, ВыпускБлюд) Экспорт
	
	Попытка
		
		Набор = РегистрыСведений.MRS_АкцизныеМаркиПроданныхБутылок.СоздатьНаборЗаписей();
		Набор.Отбор.НомерЧека.Установить(НомерЧека);
		Набор.Прочитать();
		
		Для Каждого Запись из Набор Цикл
			
			Запись.ДокументДвижения = ВыпускБлюд.Ссылка;
			
		КонецЦикла;
		
		Набор.Записать();
		
	Исключение

		ИмяСобытия = НСтр("ru = 'Обновление записи движений по проданным маркам'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
				
		Комментарий = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, Комментарий);
		
	КонецПопытки;
	
КонецПроцедуры

Процедура MRS_ДокументВнтуреннееПотреблениеПриЗаписи(Объект, Отказ) Экспорт
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеТоваровПоТребованию Тогда  
		
		// << MRS #VINE-129 ВикторовАГ <Artem.Viktorov@mriyaresort.com> 16.06.25, (на основании непроведенного документа ничего формировать не нужно)
		Если НЕ Объект.ДополнительныеСвойства.Свойство("РежимЗаписи") ИЛИ Объект.ДополнительныеСвойства.РежимЗаписи <> РежимЗаписиДокумента.Проведение Тогда
			Возврат;
		КонецЕсли;
		// >> MRS #VINE-129 ВикторовАГ <Artem.Viktorov@mriyaresort.com> 16.06.25, (на основании непроведенного документа ничего формировать не нужно)
		
		ЗначениеОснования = Неопределено;
		Если Объект.ДополнительныеСвойства.Свойство("питДокументОбщепитРаспределениеЗапасов") Тогда
		    ЗначениеОснования = Объект.ДополнительныеСвойства.питДокументОбщепитРаспределениеЗапасов;
		КонецЕсли;

		Если ЗначениеОснования <> Неопределено
		    И ТипЗнч(ЗначениеОснования) = Тип("ДокументСсылка.питВыпускБлюд") Тогда
		// если Списание создается на основании выпуска блюд, "Акт списания в ЕГАИС" создадим на основании Выпуска
		// иначе при ручном создании списания, создаем "Акт списания в ЕГАИС"
		Иначе
		    СоздатьДокументАктСписанияЕГАИС(Объект);
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

Функция ЗапросСвязанныхДокументов(Ссылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СвязанныеДокументы.Ссылка КАК Ссылка
	               |ИЗ
	               |	КритерийОтбора.СвязанныеДокументы(&Ссылка) КАК СвязанныеДокументы"; 
	
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();	
		
		Пока Выборка.Следующий() Цикл
			
			Возврат Выборка.Ссылка;
			
		КонецЦикла;
		
	Иначе
		
		Возврат Неопределено;	
		
	КонецЕсли;
		
КонецФункции


Функция СоздатьДокументАктСписанияЕГАИС(ВнутреннееПотребление) 
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВнутреннееПотреблениеСерии.Номенклатура КАК Номенклатура,
	               |	ВнутреннееПотреблениеСерии.Количество КАК Количество,
	               |	АкцизныеМаркиЕГАИС.ОрганизацияЕГАИС КАК ОрганизацияЕГАИС,
	               |	АкцизныеМаркиЕГАИС.АкцизнаяМарка КАК АкцизнаяМарка,
	               |	АкцизныеМаркиЕГАИС.Справка2 КАК Справка2,
	               |	АкцизныеМаркиЕГАИС.АлкогольнаяПродукция КАК АлкогольнаяПродукция
	               |ИЗ
	               |	Документ.ВнутреннееПотребление.Серии КАК ВнутреннееПотреблениеСерии
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АкцизныеМаркиЕГАИС КАК АкцизныеМаркиЕГАИС
	               |		ПО ВнутреннееПотреблениеСерии.Серия.Номер = АкцизныеМаркиЕГАИС.АкцизнаяМарка.ЗначениеШтрихкода
	               |ГДЕ
	               |	ВнутреннееПотреблениеСерии.Ссылка = &ВнутреннееПотребление
	               |ИТОГИ ПО
	               |	ОрганизацияЕГАИС";
	Запрос.УстановитьПараметр("ВнутреннееПотребление", ВнутреннееПотребление.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		СвязанныйДокументЕГАИС = ЗапросСвязанныхДокументов(ВнутреннееПотребление.Ссылка);
		
		Если СвязанныйДокументЕГАИС = Неопределено Тогда
			
			ТекДокументОбъект = Документы.АктСписанияЕГАИС.СоздатьДокумент();	
			ЭтоНовый = Истина;

		Иначе
				
		    ТекДокументОбъект = СвязанныйДокументЕГАИС.ПолучитьОбъект();
	        ЭтоНовый = Ложь;
						
		КонецЕсли;	
		
		// Определение параметров записи.
		ПараметрыЗаписи = ОпределитьПараметрыЗаписиТиповогоДокумента(ВнутреннееПотребление.Проведен,ВнутреннееПотребление.ПометкаУдаления,
			ТекДокументОбъект.Проведен,ТекДокументОбъект.ПометкаУдаления);
		
		// Определение режима записи
		ТекРежимЗаписи = ПараметрыЗаписи.РежимЗаписи;

		
		Если ПараметрыЗаписи.НужнаУстановкаПометкиУдаления Тогда
				
			Попытка

				ТекДокументОбъект.УстановитьПометкуУдаления(ПараметрыЗаписи.ПометкаУдаления);

			Исключение
				
				ТекстОшибки = ТекстОшибки + "
				|Ошибка при установке пометки удаления """ + ТекДокументОбъект.Метаданные().Представление() + """
				| по документу """+ВнутреннееПотребление+"""
				|по причине: <"+ОписаниеОшибки()+">";
				
			КонецПопытки;
			
		Иначе
			
			ТекДокументОбъект.Товары.Очистить();
			ТекДокументОбъект.АкцизныеМарки.Очистить();	
			
			//Шапка
			Если НЕ ЗначениеЗаполнено(ТекДокументОбъект.Дата) Тогда
				ТекДокументОбъект.Дата = ВнутреннееПотребление.Дата;
			КонецЕсли;
			
			ТекДокументОбъект.ДокументОснование = ВнутреннееПотребление.Ссылка;
			
			ТекДокументОбъект.ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктСписанияИзРегистра1;
			ТекДокументОбъект.ПричинаСписания = Перечисления.ПричиныСписанийЕГАИС.питПриготовление;
			ТекДокументОбъект.Комментарий = СтрШаблон("Создан по данным документа списания на расходы: %1",ВнутреннееПотребление);
			
			Если НЕ ЗначениеЗаполнено(ТекДокументОбъект.Номер) Тогда
				ТекДокументОбъект.УстановитьНовыйНомер();
			КонецЕсли;
			
			ТекДокументОбъект.Ответственный = ВнутреннееПотребление.Ответственный;
			
			//Товары
			ОрганизацияЕГАИСВыборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

			Пока ОрганизацияЕГАИСВыборка.Следующий() Цикл
				
				ОрганизацияЕГАИС = ОрганизацияЕГАИСВыборка.ОрганизацияЕГАИС; 
				
				ТекДокументОбъект.ОрганизацияЕГАИС = ОрганизацияЕГАИС;
				
				НоменклатураВыборка = ОрганизацияЕГАИСВыборка.Выбрать();
				
				Пока НоменклатураВыборка.Следующий() Цикл
					
					НоваяСтрока = ТекДокументОбъект.Товары.Добавить();
					НоваяСтрока.АлкогольнаяПродукция    = НоменклатураВыборка.АлкогольнаяПродукция;
					НоваяСтрока.Номенклатура            = НоменклатураВыборка.Номенклатура;
					НоваяСтрока.Справка2                = НоменклатураВыборка.Справка2;
					НоваяСтрока.Количество              = НоменклатураВыборка.Количество;
					НоваяСтрока.КоличествоУпаковок 		= НоменклатураВыборка.Количество;
					//НоваяСтрока.Упаковка				= НоменклатураВыборка.Упаковка;
					
				    НоваяСтрокаАМ = ТекДокументОбъект.АкцизныеМарки.Добавить();
				    НоваяСтрокаАМ.ШтрихкодУпаковки 				= НоменклатураВыборка.АкцизнаяМарка;
			        НоваяСтрокаАМ.АкцизнаяМарка 				= НоменклатураВыборка.АкцизнаяМарка;
				    НоваяСтрокаАМ.Справка2 						= НоменклатураВыборка.Справка2;
					НоваяСтрокаАМ.Количество                    = НоменклатураВыборка.Количество;
					НоваяСтрокаАМ.ВыбытиеБутылки				= Истина;
										
				КонецЦикла;	 
				
				// << MRS #VINE-41 ВикторовАГ <Artem.Viktorov@mriyaresort.com> 25.03.25, (Свертка товаров при автоматическом формировании акта списания ЕГАИС)
				ПоляГруппировки = "АлкогольнаяПродукция, Номенклатура, Характеристика, Серия, " +
					"Упаковка, Справка2, ИдентификаторСтроки, СтатусУказанияСерий";
				ПоляСуммирования = "Цена, НС_КоличествоДАЛ, Количество, КоличествоУпаковок, Сумма";
				ТекДокументОбъект.Товары.Свернуть(ПоляГруппировки, ПоляСуммирования);
				
				Для Каждого ТекСтрока Из ТекДокументОбъект.Товары Цикл
					Если ТекСтрока.Количество <> 0 Тогда
						ТекСтрока.Цена = ТекСтрока.Сумма / ТекСтрока.Количество;
					Иначе                                      
						ТекСтрока.Цена = ТекСтрока.Сумма / ТекСтрока.КоличествоУпаковок;
		            КонецЕсли;
						
				КонецЦикла;
				// >> MRS #VINE-41 ВикторовАГ <Artem.Viktorov@mriyaresort.com> 25.03.25, (Свертка товаров при автоматическом формировании акта списания ЕГАИС)
				
			КонецЦикла;
					
			// Для нового дока отменять проведения не требуется.
			Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения
				И ЭтоНовый Тогда
	            Отказ = истина;
			КонецЕсли;
						
			Попытка
				
				ТекДокументОбъект.Записать(ТекРежимЗаписи);
				
			Исключение
				ТекстОшибки = ТекстОшибки + "
				|Ошибка записи документа """ + ТекДокументОбъект.Метаданные().Представление() + """
				| по документу """+ВнутреннееПотребление+"""
				|по причине: <"+ОписаниеОшибки()+">";

			КонецПопытки;
		
		КонецЕсли;
	КонецЕсли;	

КонецФункции 

Функция ОпределитьПараметрыЗаписиТиповогоДокумента(ДокПроведен, ДокПомечен, ТДПроведен = Неопределено, ТДПомечен)
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("НужнаУстановкаПометкиУдаления"	,Ложь);
	ПараметрыЗаписи.Вставить("ПометкаУдаления"					,Ложь);
	ПараметрыЗаписи.Вставить("РежимЗаписи"						,Неопределено);
	
	Если ДокПомечен И НЕ ТДПомечен Тогда
		ПараметрыЗаписи.НужнаУстановкаПометкиУдаления			= Истина;
		ПараметрыЗаписи.ПометкаУдаления							= Истина;
	ИначеЕсли НЕ ДокПомечен И ТДПомечен Тогда
		ПараметрыЗаписи.НужнаУстановкаПометкиУдаления			= Истина;
		ПараметрыЗаписи.ПометкаУдаления							= Ложь;
	Иначе // пометка удаления не отличается.
		ПараметрыЗаписи.НужнаУстановкаПометкиУдаления			= Ложь;
	КонецЕсли;
	               	
	Если ДокПроведен Тогда
		ТекРежимЗаписи = РежимЗаписиДокумента.Проведение;
	ИначеЕсли НЕ ДокПроведен И ТДПроведен Тогда
		ТекРежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения;
	ИначеЕсли НЕ ДокПроведен И НЕ ТДПроведен Тогда
		ТекРежимЗаписи = РежимЗаписиДокумента.Запись;
	КонецЕсли;                                   
		
	ПараметрыЗаписи.РежимЗаписи = ТекРежимЗаписи;
	
	Возврат ПараметрыЗаписи;
	
КонецФункции

// Проверяет наличие свободных остатков серий товаров на складе.
//
// Параметры:
//   Ссылка - ДокументСсылка - ссылка на документ для исключения из расчета
//   Склад - СправочникСсылка.Склады - склад для проверки остатков
//   МассивТЧСерии - Массив - массив структур с данными серий для проверки
//
// Возвращаемое значение:
//   Булево, Строка - Ложь если остатки в порядке, иначе текст ошибки с вопросом продолжить
//
Функция ПроверитьОстаткиСерийПоДокументы(Ссылка, Склад, МассивТЧСерии) Экспорт
      
  	// Массив для номенклатуры
    МассивНоменклатуры = Новый Массив;
    
    // Создаем таблицу значений для серий
    ТЗСерии = Новый ТаблицаЗначений;
    
    // Если массив пустой, ничего не делаем
    Если МассивТЧСерии.Количество() = 0 Тогда
        Возврат Ложь;
    КонецЕсли;
	
	ТЗСерии.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));     
   	ТЗСерии.Колонки.Добавить("Серия", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	ТЗСерии.Колонки.Добавить("Номер", Новый ОписаниеТипов("Строка"));                            
	ТЗСерии.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	ТЗСерии.Колонки.Добавить("КоличествоУпаковок", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	
    // Один цикл для заполнения массива номенклатуры и таблицы серий
    Для Каждого Структура Из МассивТЧСерии Цикл
        // Добавляем номенклатуру в массив номенклатур
        Если Структура.Свойство("Номенклатура") 
            И ЗначениеЗаполнено(Структура.Номенклатура) 
            И МассивНоменклатуры.Найти(Структура.Номенклатура) = Неопределено Тогда
            МассивНоменклатуры.Добавить(Структура.Номенклатура);
        КонецЕсли;
        
        // Заполняем таблицу значений сериями
        НоваяСтрока = ТЗСерии.Добавить();
        Если Структура.Свойство("Серия") Тогда
            НоваяСтрока.Серия = Структура.Серия;
			НоваяСтрока.Номер = Структура.Серия.Номер;
        КонецЕсли;
        Если Структура.Свойство("Количество") Тогда
            НоваяСтрока.Количество = Структура.Количество;
			НоваяСтрока.КоличествоУпаковок = Структура.Количество;
		КонецЕсли;
		Если Структура.Свойство("Номенклатура") Тогда
            НоваяСтрока.Номенклатура = Структура.Номенклатура;
		КонецЕсли;
    КонецЦикла;
   
	лТекст = "ВЫБРАТЬ
	         |	ДанныеРегистров.Серия КАК Серия,
	         |	СУММА(ДанныеРегистров.СвободныйОстаток) КАК СвободныйОстаток
	         |ПОМЕСТИТЬ ДанныеРегистровДляЗапроса
	         |ИЗ
	         |	(ВЫБРАТЬ
	         |		ТоварыНаСкладахОстатки.Серия КАК Серия,
	         |		ТоварыНаСкладахОстатки.ВНаличииОстаток КАК СвободныйОстаток
	         |	ИЗ
	         |		РегистрНакопления.ТоварыНаСкладах.Остатки(
	         |				,
	         |				Номенклатура В (&Номенклатура)
	         |					И Склад = &Склад) КАК ТоварыНаСкладахОстатки
	         |	
	         |	ОБЪЕДИНИТЬ ВСЕ
	         |	
	         |	ВЫБРАТЬ
	         |		ТоварыНаСкладах.Серия,
	         |		ВЫБОР
	         |			КОГДА ТоварыНаСкладах.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	         |				ТОГДА -ТоварыНаСкладах.ВНаличии + ТоварыНаСкладах.КОтгрузке
	         |			ИНАЧЕ ТоварыНаСкладах.ВНаличии - ТоварыНаСкладах.КОтгрузке
	         |		КОНЕЦ
	         |	ИЗ
	         |		РегистрНакопления.ТоварыНаСкладах КАК ТоварыНаСкладах
	         |	ГДЕ
	         |		ТоварыНаСкладах.Номенклатура В(&Номенклатура)
	         |		И ТоварыНаСкладах.Склад = &Склад
	         |		И ТоварыНаСкладах.Регистратор = &Регистратор) КАК ДанныеРегистров
	         |
	         |СГРУППИРОВАТЬ ПО
	         |	ДанныеРегистров.Серия
	         |;
	         |
	         |////////////////////////////////////////////////////////////////////////////////
	         |ВЫБРАТЬ РАЗЛИЧНЫЕ
	         |	ДвиженияСерийТоваров.Серия КАК Серия
	         |ПОМЕСТИТЬ ВсеСерии
	         |ИЗ
	         |	РегистрНакопления.ДвиженияСерийТоваров КАК ДвиженияСерийТоваров
	         |ГДЕ
	         |	ДвиженияСерийТоваров.Номенклатура В(&Номенклатура)
	         |	И &ВсеСерии
	         |;
	         |
	         |////////////////////////////////////////////////////////////////////////////////
	         |ВЫБРАТЬ
	         |	ВложенныйЗапрос.Серия КАК Серия,
	         |	СУММА(ВложенныйЗапрос.СвободныйОстаток) КАК СвободныйОстаток
	         |ПОМЕСТИТЬ ДанныеРегистров
	         |ИЗ
	         |	(ВЫБРАТЬ
	         |		ДвиженияСерийТоваров.Серия КАК Серия,
	         |		0 КАК СвободныйОстаток
	         |	ИЗ
	         |		ВсеСерии КАК ДвиженияСерийТоваров
	         |	
	         |	ОБЪЕДИНИТЬ ВСЕ
	         |	
	         |	ВЫБРАТЬ
	         |		ДанныеРегистровДляЗапроса.Серия,
	         |		ДанныеРегистровДляЗапроса.СвободныйОстаток
	         |	ИЗ
	         |		ДанныеРегистровДляЗапроса КАК ДанныеРегистровДляЗапроса) КАК ВложенныйЗапрос
	         |
	         |СГРУППИРОВАТЬ ПО
	         |	ВложенныйЗапрос.Серия
	         |;
	         |
	         |////////////////////////////////////////////////////////////////////////////////
	         |ВЫБРАТЬ
	         |	СерииВДокументе.Серия КАК Серия,
	         |	СерииВДокументе.Номенклатура КАК Номенклатура,
	         |	СерииВДокументе.Номер КАК Номер,
	         |	СерииВДокументе.Количество КАК Количество,
	         |	СерииВДокументе.КоличествоУпаковок КАК КоличествоУпаковок
	         |ПОМЕСТИТЬ СерииВДокументе
	         |ИЗ
	         |	&СерииВДокументе КАК СерииВДокументе
	         |ГДЕ
	         |	СерииВДокументе.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	         |;
	         |
	         |////////////////////////////////////////////////////////////////////////////////
	         |ВЫБРАТЬ
	         |	СерииВДокументе.Номенклатура КАК Номенклатура,
	         |	СерииВДокументе.Серия КАК Серия,
	         |	ЕСТЬNULL(ДанныеРегистров.СвободныйОстаток, 0) / &КоэффицентУпаковки * &ЗнакОстатка - СерииВДокументе.КоличествоУпаковок КАК СвободныйОстаток,
	         |	СерииВДокументе.Количество КАК Количество,
	         |	СерииВДокументе.КоличествоУпаковок КАК КоличествоУпаковок,
	         |	СерииВДокументе.Номер КАК Номер
	         |ПОМЕСТИТЬ ВТ_Остатки
	         |ИЗ
	         |	СерииВДокументе КАК СерииВДокументе
	         |		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеРегистров КАК ДанныеРегистров
	         |		ПО (ДанныеРегистров.Серия = СерииВДокументе.Серия)
	         |;
	         |
	         |////////////////////////////////////////////////////////////////////////////////
	         |ВЫБРАТЬ
	         |	ВТ_Остатки.Номенклатура КАК Номенклатура,
	         |	ВТ_Остатки.Серия КАК Серия,
	         |	ВТ_Остатки.СвободныйОстаток КАК СвободныйОстаток,
	         |	ВТ_Остатки.Количество КАК Количество,
	         |	ВТ_Остатки.КоличествоУпаковок КАК КоличествоУпаковок,
	         |	ВТ_Остатки.Номер КАК Номер
	         |ИЗ
	         |	ВТ_Остатки КАК ВТ_Остатки
	         |ГДЕ
	         |	ВТ_Остатки.СвободныйОстаток < 0";

	лЗапрос = Новый Запрос(лТекст);
	
	// Присвоение значений переменным параметров.
	ВсеСерии = Ложь;

	ЗнакОстатка = 1;

	КоэффицентУпаковки = 1;

	// Установка параметров.
	лЗапрос.УстановитьПараметр("ВсеСерии", ВсеСерии);
	лЗапрос.УстановитьПараметр("ЗнакОстатка", ЗнакОстатка);
	лЗапрос.УстановитьПараметр("КоэффицентУпаковки", КоэффицентУпаковки);
	лЗапрос.УстановитьПараметр("Номенклатура", МассивНоменклатуры);
	лЗапрос.УстановитьПараметр("Регистратор", Ссылка);
	лЗапрос.УстановитьПараметр("СерииВДокументе", ТЗСерии);
	лЗапрос.УстановитьПараметр("Склад", Склад);
	
    РезультатЗапроса = лЗапрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда 
		
		Возврат Ложь;
		
	Иначе	
		
		// Итоговая строка
    	ИтоговаяСтрока = "";
		
		ШаблонСообщения = НСтр("ru = 'Для номенклатуры %1, серии %2 нет свободного остатка по складу %3'");
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ТекущаяСтрока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
            ШаблонСообщения,
            Выборка.Номенклатура,
            Выборка.Серия,
            Склад);	
			
			Если ПустаяСтрока(ИтоговаяСтрока) Тогда
           		ИтоговаяСтрока = ТекущаяСтрока;
	       	Иначе
	            ИтоговаяСтрока = ИтоговаяСтрока + Символы.ПС + ТекущаяСтрока; // Перенос строки как разделитель
	        КонецЕсли;
				
		КонецЦикла;
		
		Возврат ИтоговаяСтрока + Символы.ПС + "Продолжить?"; 
		
	КонецЕсли;
	
КонецФункции

// Заполняет марки товаров по остаткам ИС в табличной части документа.
// Используется для автоматического подбора марок при производстве алкогольной продукции.
//
// Параметры:
//   Объект - ДокументОбъект - объект документа для заполнения марок
//   ПараметрыУказанияСерий - Структура - параметры указания серий товаров
//
Процедура ЗаполнитьМаркиПоОстаткамИСВТЧТовары(Объект, ПараметрыУказанияСерий) Экспорт

    // Проверяем, находится ли склад в шапке документа
    СкладВШапке = НЕ (ПараметрыУказанияСерий.ПоляСвязи.Найти(ПараметрыУказанияСерий.ИмяПоляСклад) <> Неопределено
        Или ПараметрыУказанияСерий.ИменаПолейДополнительные.Найти(ПараметрыУказанияСерий.ИмяПоляСклад) <> Неопределено);

    Запрос = Новый Запрос;

    Запрос.УстановитьПараметр("ТаблицаТоваров", Объект[ПараметрыУказанияСерий.ИмяТЧТовары].Выгрузить());

    Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
    Запрос.УстановитьПараметр("Период", Объект.Дата);
    Запрос.УстановитьПараметр("МоментКонтроля", Новый Граница(Новый МоментВремени(Объект.Дата, Объект.Ссылка), ВидГраницы.Включая));
    Запрос.УстановитьПараметр("Организация", Объект.Организация);

    // Получаем доступные места печати
    Если Константы.питИспользоватьМаркиИСКассовыхСистемПриПроизводстве.Получить() Тогда
        ДоступныеМестаПечати = Справочники.питМестаПечати.МестаПечатиПоСтруктурнойЕдинице(Объект[ПараметрыУказанияСерий.ИмяПоляСклад]);
    Иначе
        ДоступныеМестаПечати = Новый Массив;
    КонецЕсли;
    ДоступныеМестаПечати.Добавить(Объект[ПараметрыУказанияСерий.ИмяПоляСклад]);
    Запрос.УстановитьПараметр("МестаПечати", ДоступныеМестаПечати);

    // Формируем данные для подбора марок
    Данные = ДанныеДляЗаполненияМарокПоОстаткамИС(Объект, ПараметрыУказанияСерий, Запрос);

    ВыборкаНомераСтрок = Данные.ВыборкаНомераСтрок;
    СоответствиеОстатки = Данные.СоответствиеОстатки;

    КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();

    // Определяем структуру пересчета количества упаковок
    Если ПараметрыУказанияСерий.ПолноеИмяОбъекта = "Документ.РасходныйОрдерНаТовары"
        И ТипЗнч(Объект) = Тип("ДанныеФормыСтруктура") Тогда
        СтруктураПересчетаКоличестваУпаковок = Новый Структура("ПересчитатьКоличествоУпаковок, ПересчитатьВесОбъем");
    Иначе
        СтруктураПересчетаКоличестваУпаковок = Новый Структура("ПересчитатьКоличествоУпаковок");
    КонецЕсли;

    НомерСтроки = 0;

    Пока ВыборкаНомераСтрок.Следующий() Цикл

        СтрокаТоваров = Объект[ПараметрыУказанияСерий.ИмяТЧТовары][ВыборкаНомераСтрок.НомерСтроки + НомерСтроки - 1];

        ОстатокТовара = СтрокаТоваров.Количество;

        Если СкладВШапке Тогда
            Попытка
                СтрокаТоваров.Склад = Объект[ПараметрыУказанияСерий.ИмяПоляСклад];
            Исключение
            КонецПопытки;
        КонецЕсли;

        ИзменяемаяСтрока = СтрокаТоваров;

        // Получаем марки для текущей строки товаров
        Если СкладВШапке Тогда
            ОстаткиМарокПоТовару = ОстаткиМарокПоТовару(СтрокаТоваров, СоответствиеОстатки, ПараметрыУказанияСерий.ИмяПоляСклад, Объект[ПараметрыУказанияСерий.ИмяПоляСклад]);
        Иначе
            ОстаткиМарокПоТовару = ОстаткиМарокПоТовару(СтрокаТоваров, СоответствиеОстатки, ПараметрыУказанияСерий.ИмяПоляСклад);
        КонецЕсли;

        Если ОстаткиМарокПоТовару = Неопределено Тогда
            Продолжить;
        КонецЕсли;

        Для Каждого СтруктураОстаток Из ОстаткиМарокПоТовару Цикл
            Если СтруктураОстаток.СвободныйОстаток = 0 Тогда
                Продолжить;
            КонецЕсли;

            КоличествоВСтроку = Мин(ОстатокТовара, СтруктураОстаток.СвободныйОстаток);

            ИзменяемаяСтрока.Количество = КоличествоВСтроку;
            ИзменяемаяСтрока.Серия = СтруктураОстаток.Серия;
						
            ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ИзменяемаяСтрока, СтруктураПересчетаКоличестваУпаковок, КэшированныеЗначения);

            ОстатокТовара = ОстатокТовара - ИзменяемаяСтрока.Количество;
            СтруктураОстаток.СвободныйОстаток = СтруктураОстаток.СвободныйОстаток - ИзменяемаяСтрока.Количество;

            Если ОстатокТовара > 0 Тогда
                НомерСтроки = НомерСтроки + 1;
                ИзменяемаяСтрока = Объект[ПараметрыУказанияСерий.ИмяТЧТовары].Вставить(ИзменяемаяСтрока.НомерСтроки);
                ЗаполнитьЗначенияСвойств(ИзменяемаяСтрока, СтрокаТоваров, , "Количество,КоличествоУпаковок,Серия");
                ИзменяемаяСтрока.Количество = ОстатокТовара;
                ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ИзменяемаяСтрока, СтруктураПересчетаКоличестваУпаковок, КэшированныеЗначения);
            Иначе
                Прервать;
            КонецЕсли;

        КонецЦикла;

    КонецЦикла;

    НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);

    // Проверка заполнения марок
    Запрос = Новый Запрос;
    Запрос.Текст = ТекстЗапросаПроверкаЗаполненияМарокПоОстаткамИС(Объект, ПараметрыУказанияСерий, СкладВШапке);

    Если СкладВШапке Тогда
        Запрос.УстановитьПараметр("Склад", Объект[ПараметрыУказанияСерий.ИмяПоляСклад]);
	КонецЕсли;
	
    Запрос.УстановитьПараметр("МоментКонтроля", Новый Граница(Новый МоментВремени(Объект.Дата, Объект.Ссылка), ВидГраницы.Включая));
    Запрос.УстановитьПараметр("СтатусыСерийСерияНеУказана", НоменклатураКлиентСервер.СтатусыСерийСерияНеУказана());
    Запрос.УстановитьПараметр("ТаблицаТоваров", Объект[ПараметрыУказанияСерий.ИмяТЧТовары].Выгрузить());
    Запрос.УстановитьПараметр("Организация", Объект.Организация);
	
    ВыборкаНезаполненные = Запрос.Выполнить().Выбрать();
	
    Пока ВыборкаНезаполненные.Следующий() Цикл
					
        КоличествоНеРаспределено = 0;
       	Если ВыборкаНезаполненные.Количество = 0 Тогда
            ТекстСообщения = НСтр("ru = 'В строке %НомерСтроки% для товара ""%ПредставлениеТовара%"" марки не заполнены, т.к. не указано количество товаров.'");
        Иначе
            ТекстСообщения = НСтр("ru = 'В строке %НомерСтроки% для товара ""%ПредставлениеТовара%"" марки не заполнены. На складе  не хватает ""%Количество%"" литра вскрытой тары'");
            КоличествоНеРаспределено = ВыборкаНезаполненные.Количество;
        КонецЕсли;

        ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", ВыборкаНезаполненные.НомерСтроки);
        ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПредставлениеТовара%", ВыборкаНезаполненные.Номенклатура);
        ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Количество%", КоличествоНеРаспределено);
        ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,,Истина);
        
    КонецЦикла;
		
КонецПроцедуры

Функция ДанныеДляЗаполненияМарокПоОстаткамИС(Объект, ПараметрыУказанияСерий, Запрос)

	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	//|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	//|	ТаблицаТоваров.Количество КАК Количество
	//|ПОМЕСТИТЬ ВтТовары
	//|ИЗ
	//|	&ТаблицаТоваров КАК ТаблицаТоваров
	//|ГДЕ
	//|	ТаблицаТоваров.Количество > 0
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ВтТовары.НомерСтроки КАК НомерСтроки,
	//|	ВтТовары.Номенклатура КАК Номенклатура
	//|ИЗ
	//|	ВтТовары КАК ВтТовары
	//|
	//|УПОРЯДОЧИТЬ ПО
	//|	НомерСтроки
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ОстаткиМарокИСОстатки.Номенклатура КАК Номенклатура,
	//|	СерииНоменклатуры.Ссылка КАК Серия,
	//|	ОстаткиМарокИСОстатки.КоличествоОстаток КАК СвободныйОстаток,
	//|	АкцизныеМаркиЕГАИС.ОрганизацияЕГАИС КАК ОрганизацияЕГАИС,
	//|	АкцизныеМаркиЕГАИС.АкцизнаяМарка КАК АкцизнаяМарка,
	//|	АкцизныеМаркиЕГАИС.Справка2 КАК Справка2,
	//|	АкцизныеМаркиЕГАИС.АлкогольнаяПродукция КАК АлкогольнаяПродукция
	//|ИЗ
	//|	РегистрНакопления.питОстаткиМарокИС.Остатки(
	//|			&МоментКонтроля,
	//|			Организация = &Организация
	//|				И МестоПечати В (&МестаПечати)
	//|				И Номенклатура В
	//|					(ВЫБРАТЬ
	//|						ВтТовары.Номенклатура
	//|					ИЗ
	//|						ВтТовары)) КАК ОстаткиМарокИСОстатки
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СерииНоменклатуры КАК СерииНоменклатуры
	//|		ПО ОстаткиМарокИСОстатки.Штрихкод.ЗначениеШтрихкода = СерииНоменклатуры.Номер
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АкцизныеМаркиЕГАИС КАК АкцизныеМаркиЕГАИС
	//|		ПО ОстаткиМарокИСОстатки.Штрихкод.ЗначениеШтрихкода = АкцизныеМаркиЕГАИС.АкцизнаяМарка.ЗначениеШтрихкода
	//|ГДЕ
	//|	ОстаткиМарокИСОстатки.КоличествоОстаток > 0
	//|
	//|УПОРЯДОЧИТЬ ПО
	//|	ОстаткиМарокИСОстатки.Номенклатура,
	//|	АкцизныеМаркиЕГАИС.ОрганизацияЕГАИС";
	
	Запрос.Текст =
    	"ВЫБРАТЬ
    	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
    	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
    	|	ТаблицаТоваров.Количество КАК Количество,
    	|	ТаблицаТоваров.Склад КАК Склад
    	|ПОМЕСТИТЬ ВтТовары
    	|ИЗ
    	|	&ТаблицаТоваров КАК ТаблицаТоваров
    	|ГДЕ
    	|	ТаблицаТоваров.Количество > 0
    	|;
    	|
    	|////////////////////////////////////////////////////////////////////////////////
    	|ВЫБРАТЬ
    	|	ВтТовары.НомерСтроки КАК НомерСтроки,
    	|	ВтТовары.Номенклатура КАК Номенклатура,
    	|	ВтТовары.Склад КАК Склад
    	|ИЗ
    	|	ВтТовары КАК ВтТовары
    	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
    	|		ПО ВтТовары.Номенклатура = СпрНоменклатура.Ссылка
    	|			И (СпрНоменклатура.АлкогольнаяПродукция)
    	|
    	|УПОРЯДОЧИТЬ ПО
    	|	НомерСтроки
    	|;
    	|
    	|////////////////////////////////////////////////////////////////////////////////
    	|ВЫБРАТЬ
    	|	ОстаткиМарокИСОстатки.Номенклатура КАК Номенклатура,
    	|	СерииНоменклатуры.Ссылка КАК Серия,
    	|	ОстаткиМарокИСОстатки.КоличествоОстаток / 1000 КАК СвободныйОстаток,
    	|	АкцизныеМаркиЕГАИС.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
    	|	АкцизныеМаркиЕГАИС.АлкогольнаяПродукция.Объем КАК АлкогольнаяПродукцияОбъем
    	|ИЗ
    	|	РегистрНакопления.питОстаткиМарокИС.Остатки(
    	|			&МоментКонтроля,
    	|			Организация = &Организация
    	|				И МестоПечати В
    	|					(ВЫБРАТЬ
    	|						ВтТовары.Склад
    	|					ИЗ
    	|						ВтТовары)
    	|				И Номенклатура В
    	|					(ВЫБРАТЬ
    	|						ВтТовары.Номенклатура
    	|					ИЗ
    	|						ВтТовары)) КАК ОстаткиМарокИСОстатки
    	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СерииНоменклатуры КАК СерииНоменклатуры
    	|		ПО ОстаткиМарокИСОстатки.Штрихкод.ЗначениеШтрихкода = СерииНоменклатуры.Номер
    	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АкцизныеМаркиЕГАИС КАК АкцизныеМаркиЕГАИС
    	|		ПО ОстаткиМарокИСОстатки.Штрихкод.ЗначениеШтрихкода = АкцизныеМаркиЕГАИС.АкцизнаяМарка.ЗначениеШтрихкода
    	|ГДЕ
    	|	ОстаткиМарокИСОстатки.КоличествоОстаток > 0
    	|
    	|УПОРЯДОЧИТЬ ПО
    	|	ОстаткиМарокИСОстатки.Номенклатура";

    Результат = Запрос.ВыполнитьПакет();

    ВыборкаНомераСтрок = Результат[1].Выбрать();
    ТаблицаОстатков = Результат[2].Выгрузить();

    СоответствиеОстатки = Новый Соответствие;

    Для Каждого Строка Из ТаблицаОстатков Цикл
        Ключ = Строка.Номенклатура;
        Если СоответствиеОстатки[Ключ] = Неопределено Тогда
            СоответствиеОстатки[Ключ] = Новый Массив;
        КонецЕсли;
        СоответствиеОстатки[Ключ].Добавить(Новый Структура(
			//"Серия,СвободныйОстаток,ОрганизацияЕГАИС,АкцизнаяМарка,Справка2,АлкогольнаяПродукция",
			//Строка.Серия, Строка.СвободныйОстаток, Строка.ОрганизацияЕГАИС, Строка.АкцизнаяМарка, Строка.Справка2, Строка.АлкогольнаяПродукция));
			     "Серия,СвободныйОстаток",
            Строка.Серия, Строка.СвободныйОстаток));
    КонецЦикла;

    Возврат Новый Структура("ВыборкаНомераСтрок,СоответствиеОстатки", ВыборкаНомераСтрок, СоответствиеОстатки);

КонецФункции

//возвращает массив структур с марками для конкретной строки товаров.
Функция ОстаткиМарокПоТовару(СтрокаТоваров, СоответствиеОстатки, ИмяПоляСклад, Склад = Неопределено)

    Ключ = СтрокаТоваров.Номенклатура;

    ОстаткиМарок = СоответствиеОстатки[Ключ];

    Если ОстаткиМарок = Неопределено Тогда
        Возврат Неопределено;
    КонецЕсли;

    Возврат ОстаткиМарок;

КонецФункции

//проверяем остались ли строки без марок.
Функция ТекстЗапросаПроверкаЗаполненияМарокПоОстаткамИС(Объект, ПараметрыУказанияСерий, СкладВШапке)

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеДокумента.НомерСтроки КАК НомерСтроки,
	|	ДанныеДокумента.Номенклатура КАК Номенклатура,
	|	ДанныеДокумента.Характеристика КАК Характеристика,
	|	ДанныеДокумента.Количество КАК Количество,
	|	ДанныеДокумента.Упаковка КАК Упаковка
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.СтатусУказанияСерий В(&СтатусыСерийСерияНеУказана)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.Характеристика КАК Характеристика,
	|	ТаблицаТоваров.Количество КАК Количество
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров";
	
    Возврат ТекстЗапроса;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
Процедура ОбработатьПолученныеДанные(ДанныеФискальнойБазы)
	
	// Отфильтровываем некорректные марки
	Для Индекс = ДанныеФискальнойБазы.Количество() - 1 По 0 Цикл
		СтрокаБД = ДанныеФискальнойБазы[Индекс];
		КодМарки = СтрокаБД.code;
		
		// 1. Проверка длины
		ДлинаКода = СтрДлина(КодМарки);
		Если НЕ (ДлинаКода = 68 ИЛИ ДлинаКода = 150) Тогда
			ДанныеФискальнойБазы.Удалить(Индекс);
			Продолжить;
		КонецЕсли;
		
		// 2. Проверка на недопустимые символы
		ЕстьНедопустимыеСимволы = Ложь;
		Для сч = 1 По ДлинаКода Цикл
			Символ = Сред(КодМарки, сч, 1);
			КодСимвола = КодСимвола(Символ);
			// Допустимы только цифры (48-57) и латинские буквы (65-90, 97-122)
			Если НЕ ((КодСимвола >= 48 И КодСимвола <= 57)
				ИЛИ (КодСимвола >= 65 И КодСимвола <= 90)
				ИЛИ (КодСимвола >= 97 И КодСимвола <= 122)) Тогда
				
				ЕстьНедопустимыеСимволы = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ЕстьНедопустимыеСимволы Тогда
			ДанныеФискальнойБазы.Удалить(Индекс);
		КонецЕсли;
		
	КонецЦикла;

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СТРОКА(ФискальнаяБД.rvc) КАК rvc,
	|	ФискальнаяБД.cknum КАК cknum,
	|	ФискальнаяБД.code КАК code,
	|	ФискальнаяБД.date КАК date,
	|	ФискальнаяБД.ckpos КАК ckpos,
	|	ФискальнаяБД.vol КАК vol,
	|	ФискальнаяБД.marktype КАК marktype
	|ПОМЕСТИТЬ ВТ_ФискальнаяБД
	|ИЗ
	|	&ФискальнаяБД КАК ФискальнаяБД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ФискальнаяБД.code КАК ЗначениеШтрихкода,
	|	ВТ_ФискальнаяБД.rvc КАК КодМестаПродажи,
	|	СоответсвиеКасс.Объект КАК МестоПродажи,
	|	ШтрихкодыУпаковокТоваров.Ссылка КАК АкцизнаяМарка,
	|	ВТ_ФискальнаяБД.date КАК ДатаСканирования,
	|	ВТ_ФискальнаяБД.cknum КАК НомерЧека,
	|	ВТ_ФискальнаяБД.ckpos КАК ПозицияЧека,
	|	ВТ_ФискальнаяБД.vol КАК КоличествоВыбытия,
	|	ВТ_ФискальнаяБД.marktype КАК ТипВыбытия,
	|	ВЫБОР
	|		КОГДА ШтрихкодыУпаковокТоваров.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|			ТОГДА СерииНоменклатуры.Ссылка
	|		ИНАЧЕ ШтрихкодыУпаковокТоваров.Серия
	|	КОНЕЦ КАК Серия,
	|	ВЫБОР
	|		КОГДА ДЛИНАСТРОКИ(СерииНоменклатуры.Наименование) > 4
	|			ТОГДА ""Покупной алкоголь""
	|		ИНАЧЕ ""Собственное вино""
	|	КОНЕЦ КАК ТипАлкоголя,
	|	ДЛИНАСТРОКИ(ШтрихкодыУпаковокТоваров.Серия.Наименование) КАК ПроверкаСерии,
	|	ШтрихкодыУпаковокТоваров.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ ВТ_СведенияБутылок
	|ИЗ
	|	ВТ_ФискальнаяБД КАК ВТ_ФискальнаяБД
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПЛ_СоответствиеСФронтСистемами КАК СоответсвиеКасс
	|		ПО (ПОДСТРОКА(ВТ_ФискальнаяБД.rvc, 1, 10) = СоответсвиеКасс.Код)
	|			И (СоответсвиеКасс.ФронтСистема = ЗНАЧЕНИЕ(Перечисление.ПЛ_ТипыФронтСистем.Micros))
	|			И (СоответсвиеКасс.ТипОбъекта = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ПЛ_ТипыОбъектовФронтСистем.КассаККМ))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
	|		ПО (ПОДСТРОКА(ВТ_ФискальнаяБД.code, 1, 255) = ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СерииНоменклатуры КАК СерииНоменклатуры
	|		ПО (ПОДСТРОКА(ВТ_ФискальнаяБД.code, 1, 255) = СерииНоменклатуры.Номер)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_СведенияБутылок.ЗначениеШтрихкода КАК ЗначениеШтрихкода,
	|	ВТ_СведенияБутылок.КодМестаПродажи КАК КодМестаПродажи,
	|	ВТ_СведенияБутылок.МестоПродажи КАК МестоПродажи,
	|	ВТ_СведенияБутылок.АкцизнаяМарка КАК АкцизнаяМарка,
	|	ВТ_СведенияБутылок.ДатаСканирования КАК ДатаСканирования,
	|	ВТ_СведенияБутылок.НомерЧека КАК НомерЧека,
	|	ВТ_СведенияБутылок.ПозицияЧека КАК ПозицияЧека,
	|	ВТ_СведенияБутылок.КоличествоВыбытия КАК КоличествоВыбытия,
	|	ВТ_СведенияБутылок.ТипВыбытия КАК ТипВыбытия,
	|	ВТ_СведенияБутылок.ТипАлкоголя КАК ТипАлкоголя,
	|	ВТ_СведенияБутылок.ПроверкаСерии КАК ПроверкаСерии,
	|	ВЫБОР
	|		КОГДА ТТНВходящаяЕГАИСТовары.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|			ТОГДА ПриобретениеТоваровУслугТовары.Серия
	|		ИНАЧЕ ТТНВходящаяЕГАИСТовары.Серия
	|	КОНЕЦ КАК СерияТТН,
	|	ВТ_СведенияБутылок.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ ВТ_НайденныеСерииТТН
	|ИЗ
	|	ВТ_СведенияБутылок КАК ВТ_СведенияБутылок
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АкцизныеМаркиЕГАИС КАК АкцизныеМаркиЕГАИС
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ТТНВходящаяЕГАИС.Товары КАК ТТНВходящаяЕГАИСТовары
	|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриобретениеТоваровУслуг.Товары КАК ПриобретениеТоваровУслугТовары
	|				ПО ТТНВходящаяЕГАИСТовары.Ссылка.ДокументОснование = ПриобретениеТоваровУслугТовары.Ссылка
	|					И ТТНВходящаяЕГАИСТовары.Номенклатура = ПриобретениеТоваровУслугТовары.Номенклатура
	|			ПО АкцизныеМаркиЕГАИС.Основание = ТТНВходящаяЕГАИСТовары.Ссылка
	|				И АкцизныеМаркиЕГАИС.АлкогольнаяПродукция = ТТНВходящаяЕГАИСТовары.АлкогольнаяПродукция
	|		ПО ВТ_СведенияБутылок.АкцизнаяМарка.ЗначениеШтрихкода = АкцизныеМаркиЕГАИС.АкцизнаяМарка.ЗначениеШтрихкода
	|ГДЕ
	|	ВТ_СведенияБутылок.ТипАлкоголя = ""Собственное вино""
	|	И ВТ_СведенияБутылок.ПроверкаСерии ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_СведенияБутылок.ЗначениеШтрихкода КАК ЗначениеШтрихкода,
	|	ВТ_СведенияБутылок.КодМестаПродажи КАК КодМестаПродажи,
	|	ВТ_СведенияБутылок.МестоПродажи КАК МестоПродажи,
	|	ВТ_СведенияБутылок.АкцизнаяМарка КАК АкцизнаяМарка,
	|	ВТ_СведенияБутылок.ДатаСканирования КАК ДатаСканирования,
	|	ВТ_СведенияБутылок.НомерЧека КАК НомерЧека,
	|	ВТ_СведенияБутылок.ПозицияЧека КАК ПозицияЧека,
	|	ВТ_СведенияБутылок.КоличествоВыбытия КАК КоличествоВыбытия,
	|	ВТ_СведенияБутылок.ТипВыбытия КАК ТипВыбытия,
	|	ВТ_СведенияБутылок.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ДЛИНАСТРОКИ(ВТ_СведенияБутылок.Серия.Наименование) > 4
	|			ТОГДА ВТ_СведенияБутылок.Серия
	|		ИНАЧЕ ВТ_НайденныеСерииТТН.СерияТТН
	|	КОНЕЦ КАК Серия
	|ИЗ
	|	ВТ_СведенияБутылок КАК ВТ_СведенияБутылок
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НайденныеСерииТТН КАК ВТ_НайденныеСерииТТН
	|		ПО (ПОДСТРОКА(ВТ_НайденныеСерииТТН.ЗначениеШтрихкода, 1, 255) = ПОДСТРОКА(ВТ_СведенияБутылок.ЗначениеШтрихкода, 1, 255))";
	
	Запрос.УстановитьПараметр("ФискальнаяБД",ДанныеФискальнойБазы);
	ДанныеФискальнойБазы = Запрос.Выполнить().Выгрузить();
		
КонецПроцедуры

Процедура ЗаписатьВЖурналРегистрации(Комментарий, Данные = Неопределено, ЭтоОшибка = Ложь)
	
	Уровень = ?(ЭтоОшибка, УровеньЖурналаРегистрации.Ошибка, УровеньЖурналаРегистрации.Информация);
	
	ИмяСобытия = НСтр("ru = 'Загрузка марок из фискальной базы '", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
	ЗаписьЖурналаРегистрации(ИмяСобытия, Уровень,, Данные, Комментарий);
	
КонецПроцедуры

#Область ЗапросДляЧековMicros
Функция ПолучитьИОбработатьАкцизныеМаркиИзФронта(ПараметрыВыборки, Пользователь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	MRS_НастройкиПодключенияFiscalDBFront.ИмяВнешнейБД
		|ИЗ
		|	РегистрСведений.MRS_НастройкиПодключенияFiscalDBFront КАК MRS_НастройкиПодключенияFiscalDBFront";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	ОбщаяТаблицаМарок = Новый ТаблицаЗначений;

	ИмяСобытия = "Загрузка чеков Micros";
	
	Для Каждого Строка Из Результат Цикл
		ИмяФискальнойБазы = Строка.ИмяВнешнейБД;
		
		НастройкиФискальнойБазы = ПолучитьНастройкиФискальнойБазы(ИмяФискальнойБазы, Пользователь, ИмяСобытия);
		Если НастройкиФискальнойБазы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		// Используем дату начала периода загрузки чеков
		НастройкиФискальнойБазы.Вставить("ДатаЗапретаЗагрузки", ПараметрыВыборки.НачалоПериода);
		НастройкиФискальнойБазы.Вставить("КонецПериода", ПараметрыВыборки.КонецПериода);
		
		ТаблицаМарокДляОднойБазы = Новый ТаблицаЗначений;
		ПолучитьРезультатыЗапросаКФискальнойБазеMICROS(ТаблицаМарокДляОднойБазы, НастройкиФискальнойБазы, ИмяСобытия, ПараметрыВыборки);
		
		Для Каждого СтрокаМарки из ТаблицаМарокДляОднойБазы Цикл
			СтрокаМарки.date = НачалоДня(СтрокаМарки.date);
		КонецЦикла;
		
		// Объединяем результаты
		Если ОбщаяТаблицаМарок.Колонки.Количество() = 0 Тогда
			Для Каждого Колонка Из ТаблицаМарокДляОднойБазы.Колонки Цикл
				ОбщаяТаблицаМарок.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения, Колонка.Заголовок);
			КонецЦикла;
		КонецЕсли;
		
		Для Каждого СтрокаМарки Из ТаблицаМарокДляОднойБазы Цикл
			ЗаполнитьЗначенияСвойств(ОбщаяТаблицаМарок.Добавить(), СтрокаМарки);
		КонецЦикла;
	КонецЦикла;
	
	Если ОбщаяТаблицаМарок.Количество() > 0 Тогда
		ОбработатьПолученныеДанныеMICROS(ОбщаяТаблицаМарок);
	КонецЕсли;
	
	Возврат ОбщаяТаблицаМарок;
	
КонецФункции

Процедура ПолучитьРезультатыЗапросаКФискальнойБазеMICROS(ДанныеФискальнойБазы, НастройкиФискальнойБазы, ИмяСобытия = "Загрузка акцизных марок ЕГАИС в чек общепита", ПараметрыВыборки = Неопределено) Экспорт
	
	ВнешнийИсточникФискальнаяБаза = Неопределено;
	
	Попытка
		ВнешнийИсточникФискальнаяБаза = ВнешниеИсточникиДанных[НастройкиФискальнойБазы.ИмяВнешнейБД];
	Исключение
		ТекстСообщения = СтрШаблон("Не найден внешний источник. Фискальная база: %1",НастройкиФискальнойБазы.ИмяВнешнейБД);
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
   		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
	
	Попытка
		
		ПараметрыСоединения = ВнешнийИсточникФискальнаяБаза.ПолучитьОбщиеПараметрыСоединения();
		ПараметрыСоединения.АутентификацияСтандартная = Истина;
		
		СтрокаПодключения = "DRIVER=SQLite3 ODBC Driver;Database=\\" + 
			НастройкиФискальнойБазы.Сервер + "\fiscaldb\1C_DB\FiscalDB.db3";
		ПараметрыСоединения.СтрокаСоединения = СтрокаПодключения; 
		
		ВнешнийИсточникФискальнаяБаза.УстановитьОбщиеПараметрыСоединения(ПараметрыСоединения);
		ВнешнийИсточникФискальнаяБаза.УстановитьПараметрыСоединенияПользователя(ИмяПользователя(), ПараметрыСоединения);
		ВнешнийИсточникФискальнаяБаза.УстановитьПараметрыСоединенияСеанса(ПараметрыСоединения);
		ВнешнийИсточникФискальнаяБаза.УстановитьСоединение();
				
		Запрос = Новый Запрос;
		Запрос.Текст  = "ВЫБРАТЬ                                                                          
		                |	excisemarks.rvc КАК rvc,
		                |	excisemarks.cknum КАК cknum,
		                |	markcodes.code КАК code,
		                |	excisemarks.date КАК date,
						|	markcodes.vol КАК vol,
						|	excisemarks.ckpos КАК ckpos
		                |ИЗ
		                |	ВнешнийИсточникДанных." + НастройкиФискальнойБазы.ИмяВнешнейБД + ".Таблица.excisemarks КАК excisemarks
						|	ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных."+ НастройкиФискальнойБазы.ИмяВнешнейБД +".Таблица.markcodes КАК markcodes
						|	ПО (excisemarks.id = markcodes.exciseid)
						|	ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных."+ НастройкиФискальнойБазы.ИмяВнешнейБД +".Таблица.midef КАК midef
						|	ПО (excisemarks.objnum = midef.objnum)
		                |ГДЕ
		                |	excisemarks.info ЕСТЬ NULL
		                |	И excisemarks.date >= &date";
		
		Если НастройкиФискальнойБазы.Свойство("КонецПериода") И ЗначениеЗаполнено(НастройкиФискальнойБазы.КонецПериода) Тогда
			Запрос.Текст = Запрос.Текст + " И excisemarks.date <= &endDate";
			Запрос.УстановитьПараметр("endDate", КонецДня(НастройкиФискальнойБазы.КонецПериода));
		КонецЕсли;
		
		Если ПараметрыВыборки <> Неопределено И ЗначениеЗаполнено(ПараметрыВыборки.СтрокаВыборкиТочекПродаж) Тогда
			Запрос.Текст = Запрос.Текст + " И excisemarks.rvc in (" + ПараметрыВыборки.СтрокаВыборкиТочекПродаж + ")";
		КонецЕсли;
		
		Если ПараметрыВыборки <> Неопределено И ЗначениеЗаполнено(ПараметрыВыборки.НомерЧекаФискальный) Тогда
			Запрос.Текст = Запрос.Текст + " И excisemarks.cknum = " + Формат(ПараметрыВыборки.НомерЧекаФискальный, "ЧГ=");
		КонецЕсли;
		
		///переменная дата
	    Запрос.УстановитьПараметр("date",НастройкиФискальнойБазы.ДатаЗапретаЗагрузки);
		//Запрос.УстановитьПараметр("datenow",НачалоДня(ТекущаяДата()));
		///
		
		Выгрузка = Запрос.Выполнить().Выгрузить();
		
		Если ДанныеФискальнойБазы.Колонки.Количество() = 0 Тогда
			Для каждого Поле Из Выгрузка.Колонки Цикл
				ДанныеФискальнойБазы.Колонки.Добавить(Поле.Имя, Поле.ТипЗначения);
			КонецЦикла;
		КонецЕсли;
		
		Для каждого Стр Из Выгрузка Цикл
			ЗаполнитьЗначенияСвойств(ДанныеФискальнойБазы.Добавить(), Стр);
		КонецЦикла;
		
		ВнешнийИсточникФискальнаяБаза.РазорватьСоединение();
			
	Исключение
		
		ОписаниеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ОписаниеОшибки);
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ОбработатьПолученныеДанныеMICROS(ДанныеФискальнойБазы)
	
	// Отфильтровываем некорректные марки
	Для Индекс = ДанныеФискальнойБазы.Количество() - 1 По 0 Цикл
		СтрокаБД = ДанныеФискальнойБазы[Индекс];
		КодМарки = СтрокаБД.code;
		
		// 1. Проверка длины
		ДлинаКода = СтрДлина(КодМарки);
		Если НЕ (ДлинаКода = 68 ИЛИ ДлинаКода = 150) Тогда
			ДанныеФискальнойБазы.Удалить(Индекс);
			Продолжить;
		КонецЕсли;
		
		// 2. Проверка на недопустимые символы
		ЕстьНедопустимыеСимволы = Ложь;
		Для сч = 1 По ДлинаКода Цикл
			Символ = Сред(КодМарки, сч, 1);
			КодСимвола = КодСимвола(Символ);
			// Допустимы только цифры (48-57) и латинские буквы (65-90, 97-122)
			Если НЕ ((КодСимвола >= 48 И КодСимвола <= 57)
				ИЛИ (КодСимвола >= 65 И КодСимвола <= 90)
				ИЛИ (КодСимвола >= 97 И КодСимвола <= 122)) Тогда
				
				ЕстьНедопустимыеСимволы = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ЕстьНедопустимыеСимволы Тогда
			ДанныеФискальнойБазы.Удалить(Индекс);
		КонецЕсли;
		
	КонецЦикла;

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СТРОКА(ФискальнаяБД.rvc) КАК rvc,
	|	ФискальнаяБД.cknum КАК cknum,
	|	ФискальнаяБД.code КАК code,
	|	ФискальнаяБД.date КАК date,
	|	ФискальнаяБД.vol КАК vol,
	|	ФискальнаяБД.ckpos КАК ckpos
	|ПОМЕСТИТЬ ВТ_ФискальнаяБД
	|ИЗ
	|	&ФискальнаяБД КАК ФискальнаяБД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ФискальнаяБД.code КАК ЗначениеШтрихкода,
	|	ВТ_ФискальнаяБД.rvc КАК КодМестаПродажи,
	|	СоответсвиеКасс.Объект КАК МестоПродажи,
	|	ШтрихкодыУпаковокТоваров.Ссылка КАК АкцизнаяМарка,
	|	ВТ_ФискальнаяБД.date КАК ДатаСканирования,
	|	ВТ_ФискальнаяБД.cknum КАК НомерЧека,
	|	ВТ_ФискальнаяБД.ckpos КАК ПозицияЧека,
	|	ВТ_ФискальнаяБД.vol КАК КоличествоВыбытия,
	|	ВЫБОР
	|		КОГДА ШтрихкодыУпаковокТоваров.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|			ТОГДА СерииНоменклатуры.Ссылка
	|		ИНАЧЕ ШтрихкодыУпаковокТоваров.Серия
	|	КОНЕЦ КАК Серия,
	|	ВЫБОР
	|		КОГДА ДЛИНАСТРОКИ(СерииНоменклатуры.Наименование) > 4
	|			ТОГДА ""Покупной алкоголь""
	|		ИНАЧЕ ""Собственное вино""
	|	КОНЕЦ КАК ТипАлкоголя,
	|	ДЛИНАСТРОКИ(ШтрихкодыУпаковокТоваров.Серия.Наименование) КАК ПроверкаСерии,
	|	ШтрихкодыУпаковокТоваров.Номенклатура КАК Номенклатура,
	|	ШтрихкодыУпаковокТоваров.Номенклатура.ЕдиницаИзмерения КАК НоменклатураЕдиницаИзмерения
	|ПОМЕСТИТЬ ВТ_СведенияБутылок
	|ИЗ
	|	ВТ_ФискальнаяБД КАК ВТ_ФискальнаяБД
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПЛ_СоответствиеСФронтСистемами КАК СоответсвиеКасс
	|		ПО (ПОДСТРОКА(ВТ_ФискальнаяБД.rvc, 1, 10) = СоответсвиеКасс.Код)
	|			И (СоответсвиеКасс.ФронтСистема = ЗНАЧЕНИЕ(Перечисление.ПЛ_ТипыФронтСистем.Micros))
	|			И (СоответсвиеКасс.ТипОбъекта = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ПЛ_ТипыОбъектовФронтСистем.КассаККМ))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
	|		ПО (ПОДСТРОКА(ВТ_ФискальнаяБД.code, 1, 255) = ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СерииНоменклатуры КАК СерииНоменклатуры
	|		ПО (ПОДСТРОКА(ВТ_ФискальнаяБД.code, 1, 255) = СерииНоменклатуры.Номер)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_СведенияБутылок.ЗначениеШтрихкода КАК ЗначениеШтрихкода,
	|	ВТ_СведенияБутылок.КодМестаПродажи КАК КодМестаПродажи,
	|	ВТ_СведенияБутылок.МестоПродажи КАК МестоПродажи,
	|	ВТ_СведенияБутылок.АкцизнаяМарка КАК АкцизнаяМарка,
	|	ВТ_СведенияБутылок.ДатаСканирования КАК ДатаСканирования,
	|	ВТ_СведенияБутылок.НомерЧека КАК НомерЧека,
	|	ВТ_СведенияБутылок.ПозицияЧека КАК ПозицияЧека,
	|	ВТ_СведенияБутылок.КоличествоВыбытия КАК КоличествоВыбытия,
	|	ВТ_СведенияБутылок.ТипАлкоголя КАК ТипАлкоголя,
	|	ВТ_СведенияБутылок.ПроверкаСерии КАК ПроверкаСерии,
	|	ВЫБОР
	|		КОГДА ТТНВходящаяЕГАИСТовары.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|			ТОГДА ПриобретениеТоваровУслугТовары.Серия
	|		ИНАЧЕ ТТНВходящаяЕГАИСТовары.Серия
	|	КОНЕЦ КАК СерияТТН,
	|	ВТ_СведенияБутылок.Номенклатура КАК Номенклатура,
	|	АкцизныеМаркиЕГАИС.АлкогольнаяПродукция КАК АлкогольнаяПродукция
	|ПОМЕСТИТЬ ВТ_НайденныеСерииТТН
	|ИЗ
	|	ВТ_СведенияБутылок КАК ВТ_СведенияБутылок
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АкцизныеМаркиЕГАИС КАК АкцизныеМаркиЕГАИС
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ТТНВходящаяЕГАИС.Товары КАК ТТНВходящаяЕГАИСТовары
	|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриобретениеТоваровУслуг.Товары КАК ПриобретениеТоваровУслугТовары
	|				ПО ТТНВходящаяЕГАИСТовары.Ссылка.ДокументОснование = ПриобретениеТоваровУслугТовары.Ссылка
	|					И ТТНВходящаяЕГАИСТовары.Номенклатура = ПриобретениеТоваровУслугТовары.Номенклатура
	|			ПО АкцизныеМаркиЕГАИС.Основание = ТТНВходящаяЕГАИСТовары.Ссылка
	|				И АкцизныеМаркиЕГАИС.АлкогольнаяПродукция = ТТНВходящаяЕГАИСТовары.АлкогольнаяПродукция
	|		ПО ВТ_СведенияБутылок.АкцизнаяМарка.ЗначениеШтрихкода = АкцизныеМаркиЕГАИС.АкцизнаяМарка.ЗначениеШтрихкода
	|ГДЕ
	|	ВТ_СведенияБутылок.ТипАлкоголя = ""Собственное вино""
	|	И ВТ_СведенияБутылок.ПроверкаСерии ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_СведенияБутылок.ЗначениеШтрихкода КАК ЗначениеШтрихкода,
	|	ВТ_СведенияБутылок.КодМестаПродажи КАК КодМестаПродажи,
	|	ВТ_СведенияБутылок.МестоПродажи КАК МестоПродажи,
	|	ВТ_СведенияБутылок.АкцизнаяМарка КАК АкцизнаяМарка,
	|	НАЧАЛОПЕРИОДА(ВТ_СведенияБутылок.ДатаСканирования, ДЕНЬ) КАК ДатаСканирования,
	|	ВТ_СведенияБутылок.НомерЧека КАК НомерЧека,
	|	ВТ_СведенияБутылок.ПозицияЧека КАК ПозицияЧека,
	|	ВТ_СведенияБутылок.КоличествоВыбытия КАК КоличествоВыбытия,
	|	ВТ_СведенияБутылок.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ДЛИНАСТРОКИ(ВТ_СведенияБутылок.Серия.Наименование) > 4
	|			ТОГДА ВТ_СведенияБутылок.Серия
	|		ИНАЧЕ ВТ_НайденныеСерииТТН.СерияТТН
	|	КОНЕЦ КАК Серия,
	|	ВТ_НайденныеСерииТТН.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	ВТ_СведенияБутылок.НоменклатураЕдиницаИзмерения КАК НоменклатураЕдиницаИзмерения
	|ИЗ
	|	ВТ_СведенияБутылок КАК ВТ_СведенияБутылок
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НайденныеСерииТТН КАК ВТ_НайденныеСерииТТН
	|		ПО (ПОДСТРОКА(ВТ_НайденныеСерииТТН.ЗначениеШтрихкода, 1, 255) = ПОДСТРОКА(ВТ_СведенияБутылок.ЗначениеШтрихкода, 1, 255))
	|			И (ВТ_НайденныеСерииТТН.ПозицияЧека = ВТ_СведенияБутылок.ПозицияЧека)";
	
	Запрос.УстановитьПараметр("ФискальнаяБД",ДанныеФискальнойБазы);
	ДанныеФискальнойБазы = Запрос.Выполнить().Выгрузить();
		
КонецПроцедуры
#КонецОбласти

#КонецОбласти
