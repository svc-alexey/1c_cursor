#Область ПрограммныйИнтерфейс

// Запускает фоновое задание загрузки чеков из системы MICROS.
//
Процедура ЗапускЗагрузкиЧековMICROSВФоне() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;                                             
	ФронтСистема = Перечисления.ПЛ_ТипыФронтСистем.Micros;
	
	// Получение списка точек продаж для параллельного запуска
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПЛ_СоответствиеСФронтСистемами.Код КАК КодТочкиПродаж
		|ИЗ
		|	РегистрСведений.ПЛ_СоответствиеСФронтСистемами КАК ПЛ_СоответствиеСФронтСистемами
		|ГДЕ
		|	ПЛ_СоответствиеСФронтСистемами.ФронтСистема = &ФронтСистема
		|	И ПЛ_СоответствиеСФронтСистемами.ТипОбъекта = &ТипОбъектаКасса";

	Запрос.УстановитьПараметр("ФронтСистема", ФронтСистема);
	Запрос.УстановитьПараметр("ТипОбъектаКасса", ПланыВидовХарактеристик.ПЛ_ТипыОбъектовФронтСистем.КассаККМ);
	
	ВыборкаТочекПродаж = Запрос.Выполнить().Выгрузить();
	
	Если ВыборкаТочекПродаж.Количество() = 0 Тогда
		ЗаписьЖурналаРегистрацииОбмена("Загрузка чеков Micros", "Не найдены настроенные точки продаж (кассы) для Micros. Загрузка не будет запущена.");
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТочкиПродаж Из ВыборкаТочекПродаж Цикл
		
		ПараметрыФЗ = Новый Массив();
		ПараметрыФЗ.Добавить(ФронтСистема);
		ПараметрыФЗ.Добавить(ТекущийПользователь);
		ПараметрыФЗ.Добавить(СтрокаТочкиПродаж.КодТочкиПродаж); // Передаем код точки продаж
		
		КлючЗадания = Метаданные.РегламентныеЗадания.MRS_ЗагрузкаЧековMicros.Ключ + "." + СтрокаТочкиПродаж.КодТочкиПродаж;
		
		Попытка
			ФоновыеЗадания.Выполнить(
			"MRS_МенеджерОбменаMicros.ФоновоеЗаданиеЗагрузкаЧеков",
			ПараметрыФЗ,
			КлючЗадания,
			НСтр("ru = 'Загрузка чеков Micros для точки продаж " + СтрокаТочкиПродаж.КодТочкиПродаж + " уже выполняется';
			|en = 'MRS_Micros_" + СтрокаТочкиПродаж.КодТочкиПродаж + "'"));
		Исключение
			ЗаписьЖурналаРегистрацииОбмена("Загрузка чеков Micros", "Повторный запуск обмена для точки продаж " + СтрокаТочкиПродаж.КодТочкиПродаж + ". Загрузка уже выполняется");
		КонецПопытки;
		
	КонецЦикла;
		
КонецПроцедуры

Процедура ЗапускПолученияВспомогательныхДанныхMICROSВФоне() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
                                             
	ФронтСистема = Перечисления.ПЛ_ТипыФронтСистем.Micros;
	
	ПараметрыФЗ = Новый Массив();
	ПараметрыФЗ.Добавить(ФронтСистема); 
	Попытка
		ФоновыеЗадания.Выполнить(
		"MRS_МенеджерОбменаMicros.ПолучениеВспомогательныхДанныхORACLE",
		ПараметрыФЗ,
		Метаданные.РегламентныеЗадания.MRS_ЗагрузкаВспомогательныхДанныхMicros.Ключ,
		НСтр("ru = 'Загрузка вспомогательных данных Micros уже выполняется';
		|en = 'MRS_Micros'"));
	Исключение
		ЗаписьЖурналаРегистрацииОбмена("Загрузка вспомогательных данных Micros", "Повторный запуск обмена. Загрузка вспомогательных данных Micros уже выполняется");
	КонецПопытки
		
КонецПроцедуры

Процедура ФоновоеЗаданиеЗагрузкаЧеков(ФронтСистема, Пользователь, КодТочкиПродаж = "") Экспорт
	
	ДатаЗапрета = ПолучитьДатыЗапрета(ФронтСистема, Пользователь);
	
	Если ТипЗнч(ДатаЗапрета) = Тип("Структура") Тогда 
		
		ПараметрыКасс = Неопределено;
		Если ЗначениеЗаполнено(КодТочкиПродаж) Тогда
			ПараметрыКасс = Новый ТаблицаЗначений;
			ПараметрыКасс.Колонки.Добавить("ФронтСистема");
			ПараметрыКасс.Колонки.Добавить("КодТочкиПродаж");
			ПараметрыКасс.Колонки.Добавить("Использовать", Новый ОписаниеТипов("Булево"));
			
			НоваяСтрока = ПараметрыКасс.Добавить();
			НоваяСтрока.ФронтСистема = ФронтСистема;
			НоваяСтрока.КодТочкиПродаж = КодТочкиПродаж;
			НоваяСтрока.Использовать = Истина;
		КонецЕсли;
				
		ВыполнитьЗагрузкуДанныхMicros(ФронтСистема, ДатаЗапрета.НачалоПериода, ДатаЗапрета.КонецПериода, 0, ПараметрыКасс, Пользователь);		
		
	Иначе
		
		ЗаписьЖурналаРегистрацииОбмена("Загрузка чеков Micros", "Дата начала выгрузки больше или равна текущему дню.",Истина);
		
		Возврат;
		
	КонецЕсли;

КонецПроцедуры

// Выполняет получение данных чеков из системы MICROS за указанный период.
//
// Параметры:
//   ФронтСистема - ПеречислениеСсылка.ПЛ_ТипыФронтСистем - тип фронт-системы
//   НачалоПериода - Дата - начало периода загрузки
//   КонецПериода - Дата - конец периода загрузки  
//   НомерЧека - Число - номер конкретного чека (0 для загрузки всех чеков)
//   ПараметрыКасс - Неопределено - параметры касс (не используется)
//
// Возвращаемое значение:
//   Структура - результат выполнения загрузки
//
Функция ВыполнитьПолучениеДанныхMicros(ФронтСистема, НачалоПериода, КонецПериода, НомерЧека, ПараметрыКасс = Неопределено) Экспорт

	Если НЕ ЗначениеЗаполнено(НачалоПериода) ИЛИ НЕ ЗначениеЗаполнено(КонецПериода) Тогда
		
		ЗаписьЖурналаРегистрацииОбмена("Загрузка чеков Micros", "Пустые даты выборки!",Истина);

		ВызватьИсключение "Пустые даты выборки!";
		
	КонецЕсли;
	
	ПараметрыВыборки = ПолучитьПараметрыВыборки(ФронтСистема, НачалоПериода, КонецПериода, НомерЧека);
	
	ЗаполнитьПараметрыЗапроса(НачалоПериода, КонецПериода, ПараметрыКасс, ПараметрыВыборки);
		
	ТаблицаЗначенийORACLE = ПолучениеДанныхORACLE(ПараметрыВыборки);
	
	ДобавитьЧекиКСверке(ТаблицаЗначенийORACLE, ПараметрыВыборки);
	
	Возврат ТаблицаЗначенийORACLE;
	
КонецФункции

// Выполняет полную загрузку данных чеков из системы MICROS в информационную базу.
//
// Параметры:
//   ФронтСистема - ПеречислениеСсылка.ПЛ_ТипыФронтСистем - тип фронт-системы
//   НачалоПериода - Дата - начало периода загрузки
//   КонецПериода - Дата - конец периода загрузки
//   НомерЧека - Число - номер конкретного чека (0 для загрузки всех чеков)
//   ПараметрыКасс - Неопределено - параметры касс (не используется)
//   Пользователь - СправочникСсылка.Пользователи - пользователь, под которым выполняется загрузка
//
Процедура ВыполнитьЗагрузкуДанныхMicros(ФронтСистема, НачалоПериода, КонецПериода, НомерЧека, ПараметрыКасс = Неопределено, Пользователь = Неопределено) Экспорт

	ВремяНачала = ТекущаяДатаСеанса();
	ЗаписьЖурналаРегистрацииОбмена("Загрузка чеков Micros", "Начало загрузки. Период с " + НачалоПериода + " по " + КонецПериода);

	Если НЕ ЗначениеЗаполнено(НачалоПериода) ИЛИ НЕ ЗначениеЗаполнено(КонецПериода) Тогда
		
		ЗаписьЖурналаРегистрацииОбмена("Загрузка чеков Micros", "Пустые даты выборки!",Истина);

		ВызватьИсключение "Пустые даты выборки!";
		
	КонецЕсли;
	
	Если НачалоДня(НачалоПериода) = НачалоДня(ТекущаяДатаСеанса()) ИЛИ НачалоДня(КонецПериода) = НачалоДня(ТекущаяДатаСеанса()) Тогда
		
		ЗаписьЖурналаРегистрацииОбмена("Загрузка чеков Micros", "Загрузка за текущий день  или чеки уже загружены!",Истина);
		
		ВызватьИсключение "Не загружать текущий день!";
		
	КонецЕсли;
	
	Если Пользователь = Неопределено Тогда
		Пользователь = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;
	
	ПараметрыВыборки = ПолучитьПараметрыВыборки(ФронтСистема, НачалоПериода, КонецПериода, НомерЧека);
	
	ЗаполнитьПараметрыЗапроса(НачалоПериода, КонецПериода, ПараметрыКасс, ПараметрыВыборки);	
	
	ТаблицаЗначенийORACLE = ПолучениеДанныхORACLE(ПараметрыВыборки);
	ВремяОкончанияSQL = ТекущаяДатаСеанса();
	ЗаписьЖурналаРегистрацииОбмена("Загрузка чеков Micros", "SQL-запрос выполнен за " + (ВремяОкончанияSQL - ВремяНачала) + " сек.");
	
	ЗаписатьДанныеДляСопоставления(ТаблицаЗначенийORACLE, ПараметрыВыборки);
	ВремяОкончанияСопоставления = ТекущаяДатаСеанса();
	ЗаписьЖурналаРегистрацииОбмена("Загрузка чеков Micros", "Запись данных для сопоставления выполнена за " + (ВремяОкончанияСопоставления - ВремяОкончанияSQL) + " сек.");
	
	//++ MRS-225
	ТаблицаАкцизныхМарок = ПолучитьАкцизныеМарки(ПараметрыВыборки, Пользователь);
	ЗаписатьВБазу(ТаблицаЗначенийORACLE, ПараметрыВыборки, ТаблицаАкцизныхМарок);
	ВремяОкончанияЗаписи = ТекущаяДатаСеанса();
	ЗаписьЖурналаРегистрацииОбмена("Загрузка чеков Micros", "Запись в базу выполнена за " + (ВремяОкончанияЗаписи - ВремяОкончанияСопоставления) + " сек.");
	//-- MRS-225

	СдвинутьДатуЗапрета(ПараметрыВыборки);
	
	ВремяОкончанияОбщее = ТекущаяДатаСеанса();
	ЗаписьЖурналаРегистрацииОбмена("Загрузка чеков Micros", "Загрузка завершена. Общее время: " + (ВремяОкончанияОбщее - ВремяНачала) + " сек.");
	
КонецПроцедуры

Функция ПолучитьДатыЗапрета(ФронтСистема, Пользователь)
	
	СтруктураВозврат = Новый Структура;
	
	Текст = "
		|ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(МАКСИМУМ(Даты.ДатаЗапрета), ДЕНЬ) КАК ДатаЗапрета
		|ИЗ
		|	(ВЫБРАТЬ
		|		ДатыЗапретаИзменения.ДатаЗапрета КАК ДатаЗапрета
		|	ИЗ
		|		РегистрСведений.ДатыЗапретаИзменения КАК ДатыЗапретаИзменения
		|	ГДЕ
		|		ДатыЗапретаИзменения.Пользователь = &Пользователь
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ДатыЗапретаИзменения.ДатаЗапрета
		|	ИЗ
		|		РегистрСведений.ДатыЗапретаИзменения КАК ДатыЗапретаИзменения
		|	ГДЕ
		|		ДатыЗапретаИзменения.Пользователь = ЗНАЧЕНИЕ(Перечисление.ВидыНазначенияДатЗапрета.ДляВсехПользователей)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		МАКСИМУМ(питДанныеПродажФронта.Дата)
		|	ИЗ
		|		Документ.питДанныеПродажФронта КАК питДанныеПродажФронта
		|	ГДЕ
		|		питДанныеПродажФронта.ПЛ_ФронтСистема = &ФронтСистема) КАК Даты
		|";

	Запрос = Новый Запрос(Текст);

	// Установка параметров.
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("ФронтСистема", ФронтСистема);

	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл

		НачалоПериода = Выборка.ДатаЗапрета + 86400;
		КонецПериода = НачалоДня(ТекущаяДатаСеанса()) - 1;
		
	КонецЦикла;
	
	Если НачалоПериода >= НачалоДня(ТекущаяДатаСеанса()) Тогда
		
		Возврат Ложь;
		
	КонецЕсли;

	Если ЗначениеЗаполнено(НачалоПериода) Тогда
		СтруктураВозврат.Вставить("НачалоПериода",НачалоПериода);
		СтруктураВозврат.Вставить("КонецПериода",КонецПериода);
		
		Возврат СтруктураВозврат;
	Иначе
		Возврат Ложь;
	КонецЕсли;
		
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ПолучитьПараметрыПодключения(ФронтСистема) Экспорт
	
	СтруктураПараметров = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	MRS_НастройкиПодключенияКФронтСистемам.Сервер КАК Сервер,
	               |	MRS_НастройкиПодключенияКФронтСистемам.Порт КАК Порт,
	               |	MRS_НастройкиПодключенияКФронтСистемам.SID КАК SID,
	               |	MRS_НастройкиПодключенияКФронтСистемам.Пользователь КАК Пользователь,
	               |	MRS_НастройкиПодключенияКФронтСистемам.Пароль КАК Пароль,
	               |	MRS_НастройкиПодключенияКФронтСистемам.ДатаЗапретаПодключения КАК ДатаЗапретаПодключения
	               |ИЗ
	               |	РегистрСведений.MRS_НастройкиПодключенияКФронтСистемам КАК MRS_НастройкиПодключенияКФронтСистемам
	               |ГДЕ
	               |	MRS_НастройкиПодключенияКФронтСистемам.ФронтСистема = &ФронтСистема";
	Запрос.УстановитьПараметр("ФронтСистема", ФронтСистема);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СтруктураПараметров.Вставить("Сервер",Выборка.Сервер);
		СтруктураПараметров.Вставить("Порт",Выборка.Порт);
		СтруктураПараметров.Вставить("SID",Выборка.SID);
		СтруктураПараметров.Вставить("Пользователь",Выборка.Пользователь);
		СтруктураПараметров.Вставить("Пароль",Выборка.Пароль);
		СтруктураПараметров.Вставить("ДатаЗапретаПодключения",Выборка.ДатаЗапретаПодключения);
		
	КонецЦикла;
	
	Возврат СтруктураПараметров;
	
КонецФункции

Процедура ЗаполнитьПараметрыЗапроса(НачалоПериода = Неопределено, КонецПериода = Неопределено, ПараметрыКасс = Неопределено, ПараметрыВыборки) Экспорт
	
	Если НачалоПериода <> Неопределено И КонецПериода <> Неопределено Тогда 
		
		ПараметрыВыборки.НачалоВыборки = Формат(НачалоПериода, "ДФ='yyyy-MM-dd HH:mm:ss'");
		ПараметрыВыборки.КонецВыборки =  Формат(КонецДня(КонецПериода), "ДФ='yyyy-MM-dd HH:mm:ss'");
		ПараметрыВыборки.НачалоПериода = НачалоПериода; 
		ПараметрыВыборки.КонецПериода = КонецПериода + 14400; //в фискальной базе может быть смещение дат
		
	КонецЕсли;
	
	Если ПараметрыКасс <> Неопределено Тогда
		
		СтрокаВыборкиТочекПродаж = ПараметрыВыборки.СтрокаВыборкиТочекПродаж;
		
		ЗапросПараметровКасс = Новый Запрос;
		
		ЗапросПараметровКасс.Текст = "ВЫБРАТЬ
		                             |	ПараметрыКасс.ФронтСистема КАК ФронтСистема,
		                             |	ПараметрыКасс.КодТочкиПродаж КАК КодТочкиПродаж
		                             |ПОМЕСТИТЬ ВТ_Используемые
		                             |ИЗ
		                             |	&ПараметрыКасс КАК ПараметрыКасс
		                             |ГДЕ
		                             |	ПараметрыКасс.Использовать
		                             |;
		                             |
		                             |////////////////////////////////////////////////////////////////////////////////
		                             |ВЫБРАТЬ
		                             |	ВТ_Используемые.ФронтСистема КАК ФронтСистема,
		                             |	ВТ_Используемые.КодТочкиПродаж КАК КодТочкиПродаж
		                             |ИЗ
		                             |	ВТ_Используемые КАК ВТ_Используемые";
		
		ЗапросПараметровКасс.УстановитьПараметр("ПараметрыКасс", ПараметрыКасс);
		
		Выборка = ЗапросПараметровКасс.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			СтрокаВыборкиТочекПродаж = СтрокаВыборкиТочекПродаж + ?(СтрокаВыборкиТочекПродаж = "", "", ",") + Выборка.КодТочкиПродаж;	
			
		КонецЦикла;
		
		ПараметрыВыборки.СтрокаВыборкиТочекПродаж = СтрокаВыборкиТочекПродаж;
				
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьЧекиКСверке(ТаблицаЗначенийORACLE, ПараметрыВыборки) 

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаORACLE.ФронтСистема КАК ФронтСистема,
	               |	ТаблицаORACLE.КассаККМ КАК КассаККМ,
	               |	ТаблицаORACLE.НАИМЕНОВАНИЕТОЧКИПРОДАЖ КАК НАИМЕНОВАНИЕТОЧКИПРОДАЖ,
	               |	ТаблицаORACLE.НОМЕРТОЧКИПРОДАЖ КАК НОМЕРТОЧКИПРОДАЖ,
	               |	ТаблицаORACLE.НОМЕРЧЕКА КАК НОМЕРЧЕКА,
	               |	ТаблицаORACLE.ДатаГруппировка КАК ДатаГруппировка,
	               |	ТаблицаORACLE.ДатаЗакрытияЧека КАК ДатаЗакрытияЧека,
	               |	ТаблицаORACLE.ДатаОткрытияЧека КАК ДатаОткрытияЧека,
	               |	ТаблицаORACLE.КОДТОВАРА КАК КОДТОВАРА,
	               |	ТаблицаORACLE.НАЗВАНИЕТОВАРА КАК НАЗВАНИЕТОВАРА,
	               |	ТаблицаORACLE.Номенклатура КАК Номенклатура,
	               |	ТаблицаORACLE.КОЛИЧЕСТВОТОВАРА КАК КОЛИЧЕСТВОТОВАРА,
	               |	ТаблицаORACLE.ЦЕНАТОВАРА КАК ЦЕНАТОВАРА,
	               |	ТаблицаORACLE.СУММАТОВАРА КАК СУММАТОВАРА,
	               |	ТаблицаORACLE.СУММАСКИДКИЧЕКА КАК СУММАСКИДКИЧЕКА,
				   |	ТаблицаORACLE.СУММАСКИДКИСТРОКИ КАК СУММАСКИДКИСТРОКИ,
	               |	ТаблицаORACLE.СТОИМОСТЬЧЕКА КАК СТОИМОСТЬЧЕКА,
	               |	ТаблицаORACLE.Организация КАК Организация,
	               |	ТаблицаORACLE.Склад КАК Склад,
	               |	ТаблицаORACLE.Подразделение КАК Подразделение
	               |ПОМЕСТИТЬ ТаблицаORACLE
	               |ИЗ
	               |	&ТаблицаORACLE КАК ТаблицаORACLE
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаORACLE.ФронтСистема КАК ФронтСистемаORACLE,
	               |	ТаблицаORACLE.КассаККМ КАК КассаККМORACLE,
	               |	ТаблицаORACLE.НАИМЕНОВАНИЕТОЧКИПРОДАЖ КАК НАИМЕНОВАНИЕТОЧКИПРОДАЖORACLE,
	               |	ТаблицаORACLE.НОМЕРТОЧКИПРОДАЖ КАК НОМЕРТОЧКИПРОДАЖORACLE,
	               |	ТаблицаORACLE.НОМЕРЧЕКА КАК НОМЕРЧЕКАORACLE,
	               |	ТаблицаORACLE.ДатаГруппировка КАК ДатаГруппировка,
	               |	ТаблицаORACLE.ДатаЗакрытияЧека КАК ДатаЗакрытияЧекаORACLE,
	               |	ТаблицаORACLE.ДатаОткрытияЧека КАК ДатаОткрытияЧекаORACLE,
	               |	ТаблицаORACLE.КОДТОВАРА КАК КОДТОВАРАORACLE,
	               |	ТаблицаORACLE.НАЗВАНИЕТОВАРА КАК НАЗВАНИЕТОВАРАORACLE,
	               |	ТаблицаORACLE.Номенклатура КАК НоменклатураORACLE,
	               |	ТаблицаORACLE.КОЛИЧЕСТВОТОВАРА КАК КОЛИЧЕСТВОТОВАРАORACLE,
	               |	ТаблицаORACLE.ЦЕНАТОВАРА КАК ЦЕНАТОВАРАORACLE,
	               |	ТаблицаORACLE.СУММАТОВАРА КАК СУММАТОВАРАORACLE,
	               |	ТаблицаORACLE.СУММАСКИДКИЧЕКА КАК СУММАСКИДКИORACLE,
				   |	ТаблицаORACLE.СУММАСКИДКИСТРОКИ КАК СУММАСКИДКИСТРОКИORACLE,
	               |	ТаблицаORACLE.СТОИМОСТЬЧЕКА КАК СУММАЧЕКАORACLE, 
	               |	ТаблицаORACLE.Организация КАК ОрганизацияORACLE,
	               |	ТаблицаORACLE.Склад КАК СкладORACLE,
	               |	ТаблицаORACLE.Подразделение КАК ПодразделениеORACLE,
	               |	ЕСТЬNULL(питДанныеПродажФронтаТовары.Ссылка, ЗНАЧЕНИЕ(Документ.питДанныеПродажФронта.ПустаяСсылка)) КАК ЧекОбщепита,
	               |	ЕСТЬNULL(питДанныеПродажФронтаТовары.Ссылка.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаЧекОбщепита,
	               |	ЕСТЬNULL(питДанныеПродажФронтаТовары.Ссылка.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК ОрганизацияЧекОбщепита,
	               |	ЕСТЬNULL(питДанныеПродажФронтаТовары.Ссылка.Подразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)) КАК ПодразделениеЧекОбщепита,
	               |	ЕСТЬNULL(питДанныеПродажФронтаТовары.Ссылка.КассаККМ, ЗНАЧЕНИЕ(Справочник.КассыККМ.ПустаяСсылка)) КАК КассаККМЧекОбщепита,
	               |	ЕСТЬNULL(питДанныеПродажФронтаТовары.Ссылка.НомерЧека, 0) КАК НомерЧекаЧекОбщепита,
	               |	ЕСТЬNULL(питДанныеПродажФронтаТовары.Ссылка.СуммаДокумента, 0) КАК СуммаДокументаЧекОбщепита,
	               |	ЕСТЬNULL(питДанныеПродажФронтаТовары.Ссылка.ПЛ_КодТочкиПродажи, """""""") КАК КодТочкиПродажиЧекОбщепита,
	               |	ЕСТЬNULL(питДанныеПродажФронтаТовары.Ссылка.ПЛ_ФронтСистема, """""""") КАК ФронтСистемаЧекОбщепита,
	               |	ЕСТЬNULL(питДанныеПродажФронтаТовары.Ссылка.Склад, ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)) КАК СкладЧекОбщепита,
	               |	ЕСТЬNULL(питДанныеПродажФронтаТовары.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК НоменклатураЧекОбщепита,
	               |	ЕСТЬNULL(питДанныеПродажФронтаТовары.Цена, 0) КАК ЦенаЧекОбщепита,
	               |	ЕСТЬNULL(питДанныеПродажФронтаТовары.Количество, 0) КАК КоличествоЧекОбщепита,
	               |	ЕСТЬNULL(питДанныеПродажФронтаТовары.Сумма, 0) КАК СуммаЧекОбщепита,
	               |	ЕСТЬNULL(питДанныеПродажФронтаТовары.ПЛ_КодКнопки, """""""") КАК КодКнопкиЧекОбщепита,
	               |	ЕСТЬNULL(питДанныеПродажФронтаТовары.ПЛ_НаименованиеКнопки, """""""") КАК НаименованиеКнопкиЧекОбщепита,
	               |	ЕСТЬNULL(питДанныеПродажФронтаТовары.СуммаСкидки, 0) КАК СуммаСкидкиЧекОбщепита,
	               |	питДанныеПродажФронтаТовары.Ссылка.ВидОперации КАК ВидОперации
	               |ИЗ
	               |	ТаблицаORACLE КАК ТаблицаORACLE
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.питДанныеПродажФронта.Товары КАК питДанныеПродажФронтаТовары
	               |		ПО ТаблицаORACLE.ФронтСистема = питДанныеПродажФронтаТовары.Ссылка.ПЛ_ФронтСистема
	               |			И (ПОДСТРОКА(ТаблицаORACLE.НОМЕРТОЧКИПРОДАЖ, 1, 10) = ПОДСТРОКА(питДанныеПродажФронтаТовары.Ссылка.ПЛ_КодТочкиПродажи, 1, 10))
	               |			И ТаблицаORACLE.ДатаЗакрытияЧека = питДанныеПродажФронтаТовары.Ссылка.Дата
	               |			И ТаблицаORACLE.НОМЕРЧЕКА = питДанныеПродажФронтаТовары.Ссылка.НомерЧека
	               |			И (ПОДСТРОКА(ТаблицаORACLE.КОДТОВАРА, 1, 50) = ПОДСТРОКА(ЕСТЬNULL(питДанныеПродажФронтаТовары.ПЛ_КодКнопки, """"""""), 1, 50))";
	
	Запрос.УстановитьПараметр("ФронтСистема", ПараметрыВыборки.ФронтСистема);
	Запрос.УстановитьПараметр("ТаблицаORACLE", ТаблицаЗначенийORACLE);
	Запрос.УстановитьПараметр("НачалоПериода",ПараметрыВыборки.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",ПараметрыВыборки.КонецПериода);

	
	ТаблицаЗначенийORACLE = Запрос.Выполнить().Выгрузить();

КонецПроцедуры

Процедура ДобавитьКодСопоставления(КодыСопоставления, ИмяПоляКод, ТипОбъекта, ИмяПоляНаименование = "") Экспорт
	
	НовСтр = КодыСопоставления.Добавить();
	НовСтр.ИмяПоляКод = ИмяПоляКод;
	НовСтр.ТипОбъекта = ТипОбъекта;
	НовСтр.ИмяПоляНаименование = ИмяПоляНаименование;
	
КонецПроцедуры

Функция ПолучитьПараметрыВыборки(ФронтСистема, НачалоПериода = Неопределено, КонецПериода = Неопределено, НомерЧека) 

	СтруктураПараметровВыборки = Новый Структура;
	СтруктураПараметровВыборки.Вставить("СтрокаВыборкиТочекПродаж","");
	СтруктураПараметровВыборки.Вставить("НачалоВыборки",Неопределено);
	СтруктураПараметровВыборки.Вставить("КонецВыборки",Неопределено);
	СтруктураПараметровВыборки.Вставить("НачалоПериода",Неопределено);
	СтруктураПараметровВыборки.Вставить("КонецПериода",Неопределено);
	СтруктураПараметровВыборки.Вставить("ФронтСистема",ФронтСистема);
	СтруктураПараметровВыборки.Вставить("НомерЧека",НомерЧека);
	
	Возврат СтруктураПараметровВыборки;	
	
КонецФункции

Функция ПолучитьСоответсвиеРеквизитыЧека()
	
	СоответствиеПолей = Новый Соответствие;
	СоответствиеПолей.Вставить("Организация","Организация");
	СоответствиеПолей.Вставить("Подразделение","Подразделение");
	СоответствиеПолей.Вставить("Склад","Склад");
	СоответствиеПолей.Вставить("Дата","ДатаЗакрытияЧека");
	СоответствиеПолей.Вставить("ДатаСмены","ДатаГруппировка");
	СоответствиеПолей.Вставить("ДатаЧека","ДатаГруппировка");
	СоответствиеПолей.Вставить("ПЛ_ДатаОткрытияЧека","ДатаОткрытияЧека");
	СоответствиеПолей.Вставить("КассаККМ","КассаККМ");
	СоответствиеПолей.Вставить("НомерЧека","НОМЕРЧЕКА");
	СоответствиеПолей.Вставить("ПЛ_ФронтСистема","ФронтСистема");
	СоответствиеПолей.Вставить("ПЛ_КодТочкиПродажи","НОМЕРТОЧКИПРОДАЖ");
	СоответствиеПолей.Вставить("КассовыйУзел","КассовыйУзел");
	
	Возврат СоответствиеПолей
	;
КонецФункции

Функция ПолучитьСоответствиеРеквизитыТоварыЧека()

	СоответствиеПолей = Новый Соответствие;
	СоответствиеПолей.Вставить("Номенклатура","Номенклатура");
	СоответствиеПолей.Вставить("Цена","ЦЕНАТОВАРА");
	СоответствиеПолей.Вставить("Количество","КОЛИЧЕСТВОТОВАРА");
	СоответствиеПолей.Вставить("Сумма","СУММАТОВАРА");
	СоответствиеПолей.Вставить("СуммаСкидки","СУММАСКИДКИСТРОКИ");
	СоответствиеПолей.Вставить("ПЛ_КодКнопки","КОДТОВАРА");
	СоответствиеПолей.Вставить("ПЛ_НаименованиеКнопки","НАЗВАНИЕТОВАРА");
		
	Возврат СоответствиеПолей;
КонецФункции

Функция ВидОплатыНаличными()
	
	ПолеВидОплатыНаличными = Справочники.питВидыОплатОрганизаций.ПустаяСсылка();
	
	Если ПолеВидОплатыНаличными = Справочники.питВидыОплатОрганизаций.ПустаяСсылка() Тогда 
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВидыОплат.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.питВидыОплатОрганизаций КАК ВидыОплат
		|ГДЕ
		|	ВидыОплат.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.питТипыОплат.Наличные)
		|	И ВидыОплат.питВидОперации = ЗНАЧЕНИЕ(Перечисление.питВидыОперацийПоЗагрузкеДанныхПродаж.Реализация)
		|	И НЕ ВидыОплат.ПометкаУдаления";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда 
			ПолеВидОплатыНаличными = Выборка.Ссылка;
		Иначе
			ПолеВидОплатыНаличными = Справочники.питВидыОплатОрганизаций.ПустаяСсылка();
			
			СтрокаСообщенияОбОшибке = НСтр("ru = 'Не удалось найти вид оплаты со способом оплаты %1 и видом операции %2.'");
			СтрокаСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщенияОбОшибке,
							Перечисления.питТипыОплат.Наличные,
							Перечисления.питВидыОперацийПоЗагрузкеДанныхПродаж.Реализация);
					
			ЗаписьЖурналаРегистрацииОбмена("Загрузка чеков Micros", СтрокаСообщенияОбОшибке, Истина);
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПолеВидОплатыНаличными;
	
КонецФункции

Функция ЗапросПоискаЧека(КлючевыеПоляСтрокой) Экспорт
	
	Схема = Новый СхемаЗапроса;
	// Берём первый подходящий чек из загруженных. Загруженный чек обязательно есть в РС ПЛ_СтатусыОбработкиЧековОбщепита
	Схема.УстановитьТекстЗапроса(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Чеки.Ссылка КАК Чек,
	|	ВЫБОР
	|		КОГДА Чеки.Проведен
	|			ТОГДА 0
	|		КОГДА НЕ Чеки.ПометкаУдаления
	|			ТОГДА 10
	|		ИНАЧЕ 20
	|	КОНЕЦ КАК Порядок,
	|	Чеки.Дата КАК Дата
	|ИЗ
	|	Документ.питДанныеПродажФронта КАК Чеки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПЛ_СтатусыОбработкиЧековОбщепита КАК СтатусыОбработки
	|		ПО Чеки.Ссылка = СтатусыОбработки.ДокументЧек
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	Дата");
	
	Отбор = СхемыЗапросов.ЗапросПакетаЗапросов(Схема).Операторы[0].Отбор;
	
	КлючевыеПоляСтрокой = СтрЗаменить(КлючевыеПоляСтрокой, " ", "");
	КлючевыеПоля = СтрРазделить(КлючевыеПоляСтрокой, ",");
	
	Для каждого Поле Из КлючевыеПоля Цикл
		Если Поле = "Дата" Тогда
			Отбор.Добавить("Чеки.Дата = &ДатаЗакрытияЧека");
		Иначе
			Отбор.Добавить("Чеки." + Поле + " = &" + Поле);
		КонецЕсли;	
	КонецЦикла; 
	
	Возврат Новый Запрос(Схема.ПолучитьТекстЗапроса());
	
КонецФункции

Процедура ЗаписатьЧекВИБ(ДокументЧек) Экспорт
	
	ДокументЧек.РасчетСуммДокумента();

	//СтрокаОплаты = ДокументЧек.Оплаты.Добавить();
	//СтрокаОплаты.СуммаОплаты = ДокументЧек.СуммаДокумента;
	//СтрокаОплаты.ВидОплаты = ВидОплатыНаличными();
	//
	//Если НЕ ЗначениеЗаполнено(СтрокаОплаты.ВидОплаты) Тогда 
	//	//Отказ = Истина;
	//	Возврат;
	//КонецЕсли;	
	
	//<< Портал-Юг, Баринов, 2019.04.04 [6.2.23 Функционал установки ссылочных типов в местах где указан код]
	// Для группировки чеков по дням при загрузке в выпуски блюд обработкой "Загрузка из чеков Общепита" номер смены заполним по дате чека.
	// Дата 01.02.2019 будет соответствовать номеру смены 190201
	ДокументЧек.НомерСмены = Формат(ДокументЧек.Дата, "ДФ=yyMMdd");
	//>> Портал-Юг, Баринов, 2019.04.04
	
	ЗаписатьОбъектВИБ(ДокументЧек);
	
КонецПроцедуры

Процедура ЗаписатьОбъектВИБ(Объект)
	
	// Для корректной загрузки чеков из обработки ПЛ_ЗагрузкаДанныхИзФронтСистем
	// Передадим это доп свойство в обработчики записи документа и проверим там его наличие. Если Истина, то выполним код ПриЗаписи
	
	Объект.ДополнительныеСвойства.Вставить("ПЛ_ЭтоЗагрузкаДанныхИзФронтСистем", Истина);
	
	Попытка
		
		Объект.Записать();
	    РегистрыСведений.ПЛ_СтатусыОбработкиЧековОбщепита.ПриЗаписиЧека(Объект, Ложь);
		
	Исключение
		
		СтрокаСообщенияОбОшибке = НСтр("ru = 'Не удалось записать %1.Описание ошибки: %2'");
		СтрокаСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщенияОбОшибке,
								Объект,
								ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		ЗаписьЖурналаРегистрацииОбмена("Загрузка чеков Micros", СтрокаСообщенияОбОшибке, Истина);

		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

Функция ПолучитьЧек(Запрос, КлючевыеПоля) Экспорт
	
	Результат = Неопределено;
	
	ПоляЗаполняемыеПриЗагрузкеСтрокой = "Ответственный,ПЛ_ДатаОткрытияЧека,ПЛ_КодСотрудника,Организация,КассаККМ,Подразделение,ДисконтнаяКарта,ПЛ_КодКарточки";
	ПоляЗаполняемыеПриЗагрузке = СтрРазделить(ПоляЗаполняемыеПриЗагрузкеСтрокой, ",");
	
	Для каждого Поле Из КлючевыеПоля Цикл
		Если Поле.Ключ = "Дата" Тогда
			Запрос.УстановитьПараметр("ДатаЗакрытияЧека", Поле.Значение);
		Иначе
			Запрос.УстановитьПараметр(Поле.Ключ, Поле.Значение);
		КонецЕсли;
		ИндексПоля = ПоляЗаполняемыеПриЗагрузке.Найти(Поле.Ключ);
		Если ИндексПоля <> Неопределено Тогда 
			ПоляЗаполняемыеПриЗагрузке.Удалить(ИндексПоля);
		КонецЕсли;	
	КонецЦикла; 
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Результат = Выборка.Чек.ПолучитьОбъект();
		// Очистка полей шапки
		Для каждого ИмяПоля Из ПоляЗаполняемыеПриЗагрузке Цикл
			Результат[ИмяПоля] = Неопределено;
		КонецЦикла;
		
		Для каждого ТабличнаяЧасть Из Результат.Метаданные().ТабличныеЧасти Цикл
			Результат[ТабличнаяЧасть.Имя].Очистить();
		КонецЦикла;	
		
		Результат.ПометкаУдаления = Ложь;
		
	Иначе
		// Новый чек
		Результат = Документы.питДанныеПродажФронта.СоздатьДокумент();
		ЗаполнитьЗначенияСвойств(Результат, КлючевыеПоля);
		Результат.Заполнить(КлючевыеПоля);
		Если НЕ ЗначениеЗаполнено(Результат.Номер) Тогда
			Результат.УстановитьНовыйНомер();
		КонецЕсли;
	КонецЕсли;	
	
	Результат.ДополнительныеСвойства.Вставить("ПЛ_СброситьСтатусОбработки", Истина);
	
	Возврат Результат;
		
КонецФункции

Процедура ЗаписатьДанныеДляСопоставления(ТаблицаЗначенийORACLE, ПараметрыВыборки)
	
	ТипыОбъектов = ПланыВидовХарактеристик.ПЛ_ТипыОбъектовФронтСистем;
	
	КодыСопоставления = Новый ТаблицаЗначений;
	КолонкиКодыСопоставления = КодыСопоставления.Колонки;
	КолонкиКодыСопоставления.Добавить("ИмяПоляКод");
	КолонкиКодыСопоставления.Добавить("ТипОбъекта");
	КолонкиКодыСопоставления.Добавить("ИмяПоляНаименование");
	
	ДобавитьКодСопоставления(КодыСопоставления, "НомерТочкиПродаж", ТипыОбъектов.КассаККМ, "НаименованиеТочкиПродаж");
	ДобавитьКодСопоставления(КодыСопоставления, "КодТовара", ТипыОбъектов.Номенклатура, "НазваниеТовара");
	
	ТаблицаСопоставления = ТаблицаЗначенийORACLE.Скопировать(); 
	
	ТаблицаСопоставления.Свернуть("НомерТочкиПродаж, НаименованиеТочкиПродаж, КодТовара, НазваниеТовара");
	
	СоответствиеСФронтСистемами = РегистрыСведений.ПЛ_СоответствиеСФронтСистемами;
	
	Для Каждого СтрокаЗагрузки Из ТаблицаСопоставления Цикл
		Для Каждого СтрокаКодСопоставления Из КодыСопоставления Цикл
			
			КодСопоставления = СтрокаЗагрузки[СтрокаКодСопоставления.ИмяПоляКод];
			Если ПустаяСтрока(КодСопоставления) Тогда 
				// Не все поля с кодами обязательны
				Продолжить;	
			КонецЕсли;	
			
			текНаименование = "";
			Если Не ПустаяСтрока(СтрокаКодСопоставления.ИмяПоляНаименование) Тогда 
				// Наименование есть не всегда
				текНаименование = СтрокаЗагрузки[СтрокаКодСопоставления.ИмяПоляНаименование];
			КонецЕсли;
			
			Попытка
				СоответствиеСФронтСистемами.ДобавитьЗаписьДляСопоставления(СтрокаКодСопоставления.ТипОбъекта,
					ПараметрыВыборки.ФронтСистема, КодСопоставления, текНаименование);
			Исключение
				Отказ = Истина;
				СтрокаСообщенияОбОшибке = НСтр("ru = 'Не удалось записать данные для сопоставления для системы %1, тип объекта %2, код %3.
				|Описание ошибки: %4'");
				СтрокаСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщенияОбОшибке,
								ПараметрыВыборки.ФронтСистема,
								СтрокаКодСопоставления.ТипОбъекта,
								КодСопоставления,
								ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
					
				ЗаписьЖурналаРегистрацииОбмена("Загрузка чеков Micros", СтрокаСообщенияОбОшибке, Истина);
							
			КонецПопытки;
		КонецЦикла;	
	КонецЦикла;	
		
КонецПроцедуры

Процедура ЗаполнитьСтруктуруХарактеристик(СвойстваХарактеристикОткрытаяЦена)

	ИменаСвойствХарактеристик = Новый Массив;
	ИменаСвойствХарактеристик.Добавить("ПЛ_ДатаЧека_ОткрытаяЦена_Характеристика");
	ИменаСвойствХарактеристик.Добавить("ПЛ_НомерЧека_ОткрытаяЦена_Характеристика");
	ИменаСвойствХарактеристик.Добавить("ПЛ_НомерСтроки_ОткрытаяЦена_Характеристика");

    Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ДополнительныеРеквизитыИСведения.Ссылка КАК Ссылка,
	|	ДополнительныеРеквизитыИСведения.Имя КАК Имя
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|ГДЕ
	|	ДополнительныеРеквизитыИСведения.Имя В(&ИменаСвойствХарактеристик)";
		
	Запрос.УстановитьПараметр("ИменаСвойствХарактеристик", ИменаСвойствХарактеристик);
	
	РезультатЗапроса = Запрос.Выполнить();
	
   	ВыборкаСвойстваХарактеристик = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаСвойстваХарактеристик.Следующий() Цикл
		СвойстваХарактеристикОткрытаяЦена.Вставить(ВыборкаСвойстваХарактеристик.Имя, ВыборкаСвойстваХарактеристик.Ссылка);
	КонецЦикла; 
	
	ЕстьНеНайденныеРеквизиты = Ложь;
	
	Для каждого ИмяСвойства Из ИменаСвойствХарактеристик Цикл
		Если НЕ СвойстваХарактеристикОткрытаяЦена.Свойство(ИмяСвойства) Тогда
			
			ТекстСообщения = НСтр("ru = 'Не найден дополнительный реквизит характеристики с именем %1. Характеристики для открытой цены не будут сформированы.'");
			СтрокаСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,ИмяСвойства);
			ЗаписьЖурналаРегистрацииОбмена("Загрузка чеков Micros", СтрокаСообщенияОбОшибке, Истина);
			ЕстьНеНайденныеРеквизиты = Истина;
			
		КонецЕсли; 
	КонецЦикла;
	
	Если ЕстьНеНайденныеРеквизиты Тогда
	 	СвойстваХарактеристикОткрытаяЦена = Неопределено;
	КонецЕсли; 
	
КонецПроцедуры

Функция ДозаполнитьХарактеристикиДляОткрытойЦены(ЧекОбъект, НомерСтроки, НоменклатураСХарактеристиками, СвойстваХарактеристикОткрытаяЦена)
			
	ДатаЧека = НачалоДня(ЧекОбъект.Дата);
	НомерЧека = ?(ЗначениеЗаполнено(ЧекОбъект.НомерЧека), ЧекОбъект.НомерЧека, ЧекОбъект.Номер); 
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Номенклатура", НоменклатураСХарактеристиками);
	Запрос.УстановитьПараметр("ДатаЧека", ДатаЧека);
	Запрос.УстановитьПараметр("НомерЧека", НомерЧека);
	Запрос.УстановитьПараметр("НомерСтроки", НомерСтроки);
	Для каждого ДопРеквизит Из СвойстваХарактеристикОткрытаяЦена Цикл
		Запрос.УстановитьПараметр(ДопРеквизит.Ключ, ДопРеквизит.Значение);
	КонецЦикла; 
		
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХарактеристикаШапка.Ссылка КАК Характеристика,
	|	ХарактеристикаНомерСтроки.Значение КАК НомерСтроки,
	|	ХарактеристикаШапка.Владелец КАК Владелец
	|ПОМЕСТИТЬ спрХарактеристики
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикаШапка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры.ДополнительныеРеквизиты КАК ХарактеристикаНомерСтроки
	|		ПО ХарактеристикаШапка.Ссылка = ХарактеристикаНомерСтроки.Ссылка
	|			И (ХарактеристикаНомерСтроки.Свойство = &ПЛ_НомерСтроки_ОткрытаяЦена_Характеристика)
	|			И (ХарактеристикаНомерСтроки.Значение = &НомерСтроки)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры.ДополнительныеРеквизиты КАК ХарактеристикаНомерЧека
	|		ПО ХарактеристикаШапка.Ссылка = ХарактеристикаНомерЧека.Ссылка
	|			И (ХарактеристикаНомерЧека.Свойство = &ПЛ_НомерЧека_ОткрытаяЦена_Характеристика)
	|			И (ХарактеристикаНомерЧека.Значение = &НомерЧека)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры.ДополнительныеРеквизиты КАК ХарактеристикаДатаЧека
	|		ПО ХарактеристикаШапка.Ссылка = ХарактеристикаДатаЧека.Ссылка
	|			И (ХарактеристикаДатаЧека.Свойство = &ПЛ_ДатаЧека_ОткрытаяЦена_Характеристика)
	|			И (ХарактеристикаДатаЧека.Значение = &ДатаЧека)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	спрХарактеристики.Характеристика КАК Характеристика
	|ИЗ
	|	спрХарактеристики КАК спрХарактеристики
	|ГДЕ
	|	спрХарактеристики.Владелец = &Номенклатура";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СпрМенеджер = Справочники.ХарактеристикиНоменклатуры;
	
	Если РезультатЗапроса.Пустой() Тогда
    	Новая = СпрМенеджер.СоздатьЭлемент();
		Новая.Владелец = НоменклатураСХарактеристиками;
		Новая.Заполнить(Неопределено);
		
		ДопРеквизит = Новая.ДополнительныеРеквизиты.Добавить();
		ДопРеквизит.Свойство = СвойстваХарактеристикОткрытаяЦена.ПЛ_ДатаЧека_ОткрытаяЦена_Характеристика;
		ДопРеквизит.Значение = ДатаЧека;
		
		ДопРеквизит = Новая.ДополнительныеРеквизиты.Добавить();
		ДопРеквизит.Свойство = СвойстваХарактеристикОткрытаяЦена.ПЛ_НомерЧека_ОткрытаяЦена_Характеристика;
		ДопРеквизит.Значение = НомерЧека;
		
		ДопРеквизит = Новая.ДополнительныеРеквизиты.Добавить();
		ДопРеквизит.Свойство = СвойстваХарактеристикОткрытаяЦена.ПЛ_НомерСтроки_ОткрытаяЦена_Характеристика;
		ДопРеквизит.Значение = НомерСтроки;
		
		Новая.Записать();
		Характеристика = Новая.Ссылка;
		Возврат Характеристика;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Характеристика;
	КонецЕсли;
КонецФункции

Процедура ЗаписатьВБазу(ТаблицаЗначенийORACLE, ПараметрыВыборки, ТаблицаАкцизныхМарок = Неопределено) Экспорт //MRS-225
	
	// Заполним структуру характеристик для открытых продаж
	СвойстваХарактеристикОткрытаяЦена = Новый Структура;
	ЗаполнитьСтруктуруХарактеристик(СвойстваХарактеристикОткрытаяЦена);
	
	СоответсвиеТаблицыЧека = ПолучитьСоответсвиеРеквизитыЧека();
	// Отсортировать таблицу так, чтобы строки одного чека шли подряд
	ТаблицаЗначенийORACLE.Сортировать("ДатаГруппировка, НОМЕРЧЕКА, НОМЕРТОЧКИПРОДАЖ, КОЛИЧЕСТВОТОВАРА Убыв");
		
	ТекущийЧек = Неопределено;
	
	// Ключевые поля идентифицируют документ чек
	КлючевыеПоляСтрокой = "Дата, НомерЧека, ПЛ_ФронтСистема, ПЛ_КодТочкиПродажи, ВидОперации";
	
	ЗапросПоиска = ЗапросПоискаЧека(КлючевыеПоляСтрокой);

	КлючевыеПоля = Новый Структура(КлючевыеПоляСтрокой);
	
	// Массив соответствий: [Имя в КлючевыеПоляСтрокой, Имя в ТаблицаЗначенийORACLE]
	СоответствиеПолей = Новый Соответствие;
	СоответствиеПолей.Вставить("Дата","ДатаЗакрытияЧека");
	СоответствиеПолей.Вставить("НомерЧека","НОМЕРЧЕКА");
	СоответствиеПолей.Вставить("ПЛ_ФронтСистема","ФронтСистема");
	СоответствиеПолей.Вставить("ПЛ_КодТочкиПродажи","НОМЕРТОЧКИПРОДАЖ");
	
	// Разделяем строку КлючевыеПоляСтрокой на отдельные поля
	МассивКлючевыхПолей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КлючевыеПоляСтрокой,",");
	
	// Структура для хранения данных об оплате для текущего чека
	ДанныеОплаты = Новый Структура("МетодОплаты, СуммаОплаты", Неопределено, 0);
	
	МассивЧековДляЗаписи = Новый Массив;
	
	Для каждого СтрокаТаблицы Из ТаблицаЗначенийORACLE Цикл
		
		Если СтрокаТаблицы.КОЛИЧЕСТВОТОВАРА = 0 Тогда
			Продолжить;
		КонецЕсли; 
		
		Для Каждого Поле Из МассивКлючевыхПолей Цикл
			ИмяСтолбца = СоответствиеПолей[Поле]; // Получаем имя столбца из соответствия
			Если ИмяСтолбца <> Неопределено Тогда
				КлючевыеПоля.Вставить(Поле, СтрокаТаблицы[ИмяСтолбца]); // Заполняем структуру
			КонецЕсли;
		КонецЦикла;
		
		КлючевыеПоля.ВидОперации = Перечисления.питХозяйственныеОперации.ДанныеПродажФронтаПродажа;
		Если СтрокаТаблицы.КОЛИЧЕСТВОТОВАРА < 0 Тогда 
			КлючевыеПоля.ВидОперации = Перечисления.питХозяйственныеОперации.ДанныеПродажФронтаВозврат;
		КонецЕсли;
	
		// сохранить текущий чек и начать новый
		Если ТекущийЧек <> Неопределено Тогда
			ПоляТекущегоЧека = Новый Структура(КлючевыеПоляСтрокой); 
			ЗаполнитьЗначенияСвойств(ПоляТекущегоЧека, ТекущийЧек);
			Если НЕ ОбщегоНазначения.ДанныеСовпадают(КлючевыеПоля, ПоляТекущегоЧека) Тогда
				// Добавить строку оплаты перед сохранением чека
				ДобавитьСтрокуОплаты(ТекущийЧек, ДанныеОплаты);
				
				//++ MRS-225
				Если ТаблицаАкцизныхМарок <> Неопределено Тогда
					НайденныеМарки = ТаблицаАкцизныхМарок.НайтиСтроки(Новый Структура("НомерЧека, КодМестаПродажи, ДатаСканирования", ТекущийЧек.НомерЧека, ТекущийЧек.ПЛ_КодТочкиПродажи, НачалоДня(ТекущийЧек.ДатаЧека)));
					Если НайденныеМарки.Количество() > 0 Тогда
						ТекущийЧек.УчетАлкоголя.Очистить();
						Для Каждого Марка Из НайденныеМарки Цикл
							НовСтр = ТекущийЧек.УчетАлкоголя.Добавить();
							НовСтр.Номенклатура = Марка.Номенклатура;
							НовСтр.КодАкциза = Марка.ЗначениеШтрихкода;
							НовСтр.КоличествоВМЛ = Марка.КоличествоВыбытия;
							НовСтр.ШтрихкодУпаковки = Марка.АкцизнаяМарка;
							НовСтр.АлкогольнаяПродукция = Марка.АлкогольнаяПродукция;
							НовСтр.Количество = Марка.КоличествоВыбытия / 1000;
							НовСтр.ЕдиницаИзмерения = Марка.НоменклатураЕдиницаИзмерения;
							НовСтр.НомерСтрокиОсновнойПозиции = Марка.ПозицияЧека;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
				//-- MRS-225
				
				// Сохранить текущий чек
				МассивЧековДляЗаписи.Добавить(ТекущийЧек);
				ТекущийЧек = Неопределено;
				// Очистить данные оплаты для нового чека
				ДанныеОплаты = Новый Структура("МетодОплаты, СуммаОплаты", Неопределено, 0);
			КонецЕсли;
		КонецЕсли;
		
		//поиск чека
		Если ТекущийЧек = Неопределено Тогда
			ТекущийЧек = ПолучитьЧек(ЗапросПоиска, КлючевыеПоля);
			//ТекущийЧек.Ответственный = Неопределено; // Должен быть заполнен по коду сотрудника
			ТекущийЧек.СуммаВключаетНДС = Истина;
			
			Для Каждого ЭлементСоответствия из СоответсвиеТаблицыЧека Цикл
				
				ИмяПоляЧека = ЭлементСоответствия.Ключ; 
				ИмяПоляТаблицы = ЭлементСоответствия.Значение;
				
				ТекущийЧек[ИмяПоляЧека] = СтрокаТаблицы[ИмяПоляТаблицы];
				
			КонецЦикла;
			
		КонецЕсли;

		// Чек со 100% скидкой, Officer чек. Наименование Карточки
		Если СтрокаТаблицы.НОМЕРМЕТОДАОПЛАТЫ = 24 Тогда 
			ТекущийЧек.ПЛ_КодКарточки = СтрокаТаблицы.НАИМЕНОВАНИЕСКИДКИЧЕКА;	
		КонецЕсли;	
		
		//фискализированные типы оплат
		МассивНомеровОплаты = Новый Массив;
		МассивНомеровОплаты.Добавить(3);
		МассивНомеровОплаты.Добавить(6);
		МассивНомеровОплаты.Добавить(16);
		МассивНомеровОплаты.Добавить(18);
		МассивНомеровОплаты.Добавить(100);
		МассивНомеровОплаты.Добавить(101);
		МассивНомеровОплаты.Добавить(111);
		МассивНомеровОплаты.Добавить(120);
		МассивНомеровОплаты.Добавить(121);
		МассивНомеровОплаты.Добавить(122);
		МассивНомеровОплаты.Добавить(777);

		Если МассивНомеровОплаты.Найти(СтрокаТаблицы.НОМЕРМЕТОДАОПЛАТЫ) <> Неопределено Тогда
		    ТекущийЧек.MRS_Фискализирован = Истина;
		КонецЕсли;
		
		//////////////// Обработка строки таблицы загрузки //////////////
		
		// Сохраняем метод оплаты (если указан) для текущего чека
		Если ЗначениеЗаполнено(СтрокаТаблицы.МетодОплаты) Тогда
			ДанныеОплаты.МетодОплаты = СтрокаТаблицы.МетодОплаты;
		КонецЕсли;
		
		// Определяем флаги
		ЭтоСвободнаяЦена = ?(СтрокаТаблицы.ПродажаПоСвободнойЦене = NULL, Ложь, СтрокаТаблицы.ПродажаПоСвободнойЦене);
		ЭтоПродажа = ТекущийЧек.ВидОперации = Перечисления.питХозяйственныеОперации.ДанныеПродажФронтаПродажа;
		НужнаХарактеристика = ?(СтрокаТаблицы.ИспользованиеХарактеристик = NULL, Ложь, СтрокаТаблицы.ИспользованиеХарактеристик) 
		                     И ЭтоПродажа 
		                     И СвойстваХарактеристикОткрытаяЦена <> Неопределено;	   
	    
	    // Определяем количество единиц
	    КоличествоЕдиниц = ?(СтрокаТаблицы.КОЛИЧЕСТВОТОВАРА < 0, 
	                         -СтрокаТаблицы.КОЛИЧЕСТВОТОВАРА, 
	                         СтрокаТаблицы.КОЛИЧЕСТВОТОВАРА);
	    
	    // Определяем знак количества
	    ЗнакКоличества = ?(СтрокаТаблицы.КОЛИЧЕСТВОТОВАРА < 0, -1, 1);
	    
	    // Если нужно разбивать строку на единицы
	    Если ЭтоСвободнаяЦена И КоличествоЕдиниц > 1 Тогда
	        ДобавитьСтрокиСРазбиением(ТекущийЧек, СтрокаТаблицы, КоличествоЕдиниц, ЗнакКоличества, 
	                                 НужнаХарактеристика, СвойстваХарактеристикОткрытаяЦена);
	    Иначе
	        // Добавляем строку без разбиения
	        ДобавитьСтрокуВЧек(ТекущийЧек, СтрокаТаблицы, 
	                          СтрокаТаблицы.КОЛИЧЕСТВОТОВАРА * ЗнакКоличества, 
	                          СтрокаТаблицы.СУММАТОВАРА, 
	                          СтрокаТаблицы.СУММАСКИДКИСТРОКИ, 
	                          НужнаХарактеристика, 
	                          СвойстваХарактеристикОткрытаяЦена);
	    КонецЕсли;
	    //////////////// Обработка строки таблицы загрузки //////////////
		
				
	КонецЦикла; 
	// Записать чек, если он есть
	Если ТекущийЧек <> Неопределено Тогда
		// Добавить строку оплаты перед сохранением чека
		ДобавитьСтрокуОплаты(ТекущийЧек, ДанныеОплаты);
		
		//++ MRS-225
		Если ТаблицаАкцизныхМарок <> Неопределено Тогда
			НайденныеМарки = ТаблицаАкцизныхМарок.НайтиСтроки(Новый Структура("НомерЧека, КодМестаПродажи, ДатаСканирования", ТекущийЧек.НомерЧека, ТекущийЧек.ПЛ_КодТочкиПродажи, НачалоДня(ТекущийЧек.ДатаЧека)));
			Если НайденныеМарки.Количество() > 0 Тогда
				ТекущийЧек.УчетАлкоголя.Очистить();
				Для Каждого Марка Из НайденныеМарки Цикл
					НовСтр = ТекущийЧек.УчетАлкоголя.Добавить();
					НовСтр.Номенклатура = Марка.Номенклатура;
					НовСтр.КодАкциза = Марка.ЗначениеШтрихкода;
					НовСтр.КоличествоВМЛ = Марка.КоличествоВыбытия;
					НовСтр.ШтрихкодУпаковки = Марка.АкцизнаяМарка;
					НовСтр.АлкогольнаяПродукция = Марка.АлкогольнаяПродукция;
					НовСтр.Количество = Марка.КоличествоВыбытия / 1000;
					НовСтр.ЕдиницаИзмерения = Марка.НоменклатураЕдиницаИзмерения;
					НовСтр.НомерСтрокиОсновнойПозиции = Марка.ПозицияЧека;
				КонецЦикла;
			КонецЕсли;                                 
		КонецЕсли;
		//-- MRS-225
		
		// Сохранить текущий чек
		МассивЧековДляЗаписи.Добавить(ТекущийЧек);
	КонецЕсли;
	
    РазмерПакета = 100;
    КоличествоЧеков = МассивЧековДляЗаписи.Количество();
    
    Если КоличествоЧеков > 0 Тогда
        Для ИндексПакета = 0 По Цел((КоличествоЧеков - 1) / РазмерПакета) Цикл
            
            НачалоПакета = ИндексПакета * РазмерПакета;
            КонецПакета = Мин(НачалоПакета + РазмерПакета - 1, КоличествоЧеков - 1);
            
            НачатьТранзакцию();
            Попытка
                Для Индекс = НачалоПакета По КонецПакета Цикл
                    ЗаписатьЧекВИБ(МассивЧековДляЗаписи[Индекс]);
                КонецЦикла;
                ЗафиксироватьТранзакцию();
            Исключение
                ОтменитьТранзакцию();
                ВызватьИсключение;
            КонецПопытки;
            
        КонецЦикла;
    КонецЕсли;
	
КонецПроцедуры

// Процедура для добавления строк с разбиением
Процедура ДобавитьСтрокиСРазбиением(ТекущийЧек, СтрокаТаблицы, КоличествоЕдиниц, ЗнакКоличества, ИспользоватьХарактеристики, СвойстваХарактеристик)
    
    // Рассчитываем сумму и скидку на единицу
    СуммаНаЕдиницу = СтрокаТаблицы.СУММАТОВАРА / КоличествоЕдиниц;
    СкидкаНаЕдиницу = СтрокаТаблицы.СУММАСКИДКИСТРОКИ / КоличествоЕдиниц;
    
    // Разбиваем строку
    Для НомерСтроки = 1 По КоличествоЕдиниц Цикл
        Сумма = ?(НомерСтроки = КоличествоЕдиниц, 
                  СтрокаТаблицы.СУММАТОВАРА - (КоличествоЕдиниц - 1) * СуммаНаЕдиницу, 
                  СуммаНаЕдиницу);
        Скидка = ?(НомерСтроки = КоличествоЕдиниц, 
                   СтрокаТаблицы.СУММАСКИДКИСТРОКИ - (КоличествоЕдиниц - 1) * СкидкаНаЕдиницу, 
                   СкидкаНаЕдиницу);
        
        ДобавитьСтрокуВЧек(ТекущийЧек, СтрокаТаблицы, ЗнакКоличества, Сумма, Скидка, 
                          ИспользоватьХарактеристики, СвойстваХарактеристик, НомерСтроки);
    КонецЦикла;

КонецПроцедуры

// Добавляет строку в табличную часть Товары чека. 
Процедура ДобавитьСтрокуВЧек(Чек, СтрокаТаблицы, КоличествоУпаковок, Сумма, СуммаСкидки, НужнаХарактеристика, СвойстваХарактеристикОткрытаяЦена, НомерСтроки = Неопределено)

	СтрокаЧека = Чек.Товары.Добавить();
	    
	// Копируем реквизиты
	СкопироватьРеквизитыВСтрокуЧека(СтрокаЧека, СтрокаТаблицы, КоличествоУпаковок, Сумма, СуммаСкидки);

	//характеристика
	Если НужнаХарактеристика Тогда                                                
		НомерСтрокиОЦ = ?(НомерСтроки = Неопределено,СтрокаЧека.НомерСтроки, НомерСтроки);
		СтрокаЧека.Характеристика = ДозаполнитьХарактеристикиДляОткрытойЦены(Чек, НомерСтрокиОЦ, СтрокаЧека.Номенклатура, СвойстваХарактеристикОткрытаяЦена)		
	КонецЕсли;

	// Заполняем НДС и проценты скидки
	ЗаполнитьНДСИСкидки(СтрокаЧека, СтрокаТаблицы.КодСтавкиНДС, СтрокаЧека.Сумма);

КонецПроцедуры

// Копирует реквизиты из строки таблицы в строку чека. 
Процедура СкопироватьРеквизитыВСтрокуЧека(СтрокаЧека, СтрокаТаблицы, КоличествоУпаковок, Сумма, СуммаСкидки) 
	СоответствиеТоварыЧека = ПолучитьСоответствиеРеквизитыТоварыЧека(); 
	Для Каждого ЭлементСоответствияТовары Из СоответствиеТоварыЧека Цикл 
		ИмяПоляЧека = ЭлементСоответствияТовары.Ключ; 
		ИмяПоляТаблицы = ЭлементСоответствияТовары.Значение; 
		Значение = СтрокаТаблицы[ИмяПоляТаблицы]; 
		// Преобразование отрицательного значения только для числовых типов 
		Если ЗначениеЗаполнено(Значение) Тогда 
			Если ТипЗнч(Значение) = Тип("Число") И Значение < 0 Тогда 
				СтрокаЧека[ИмяПоляЧека] = -Значение; 
			Иначе 
				СтрокаЧека[ИмяПоляЧека] = Значение; 
			КонецЕсли; 
		Иначе СтрокаЧека[ИмяПоляЧека] = Значение; // Сохраняем пустое значение 
		КонецЕсли; 
	КонецЦикла;

	СтрокаЧека.КоличествоУпаковок = ?(КоличествоУпаковок < 0, -КоличествоУпаковок, КоличествоУпаковок);
	СтрокаЧека.Количество = СтрокаЧека.КоличествоУпаковок; 
	СтрокаЧека.Коэффициент = 1;
	СтрокаЧека.Сумма = ?(Сумма < 0, -Сумма, Сумма);
	СтрокаЧека.СуммаСкидки = ?(СуммаСкидки < 0, -СуммаСкидки, СуммаСкидки);

КонецПроцедуры

// Заполняет НДС и проценты скидки в строке чека.
Процедура ЗаполнитьНДСИСкидки(СтрокаЧека, КодСтавкиНДС, Сумма)
    СтруктураСтавкаНДС = СтавкаНДСПоКодуMicros(КодСтавкиНДС, Сумма);
    СтрокаЧека.СтавкаНДС = СтруктураСтавкаНДС.СтавкаНДС;
    СтрокаЧека.СуммаНДС = СтруктураСтавкаНДС.СуммаНДС;
    
    СтрокаЧека.ПроцентСкидки = ?(СтрокаЧека.Сумма = 0, 0, 
                                Окр(СтрокаЧека.СуммаСкидки * 100 / СтрокаЧека.Сумма, 2));
    СтрокаЧека.ПроцентСкидкиСтроки = СтрокаЧека.ПроцентСкидки;
КонецПроцедуры

// добавление строки оплаты
Процедура ДобавитьСтрокуОплаты(Чек, ДанныеОплаты)
	
	Чек.Оплаты.Очистить();
	
	РассчетнаяСумма = РасчетСуммыДокумента(Чек);
	
	СтрокаОплаты = Чек.Оплаты.Добавить();
	СтрокаОплаты.СуммаОплаты = РассчетнаяСумма;
	СтрокаОплаты.ВидОплаты = ?(ЗначениеЗаполнено(ДанныеОплаты.МетодОплаты), ДанныеОплаты.МетодОплаты, ВидОплатыНаличными());
	
КонецПроцедуры

// Рассчитывает сумму документа
Функция РасчетСуммыДокумента(Чек) Экспорт
	
	СуммаСкидкиДокумента = Чек.Товары.Итог("СуммаСкидки") + Чек.Товары.Итог("СуммаСкидкиСтроки");
	
	СуммаДокумента = питОбщегоНазначения.ПолучитьСуммуДокументаСНДС(Чек, "Товары")
		+ питОбщегоНазначения.ПолучитьСуммуДокументаСНДС(Чек, "Модификаторы") - СуммаСкидкиДокумента;
		
	Возврат СуммаДокумента;
	
КонецФункции

// Определяет ставку НДС по коду Micros
Функция СтавкаНДСПоКодуMicros(КодСтавкиНДС, Сумма) 
	
	СтруктураНДС = Новый Структура;
	
	Запрос = новый запрос;
	Запрос.текст = 
	"ВЫБРАТЬ
	|	СтавкиНДС.Ссылка КАК Ссылка,
	|	СтавкиНДС.ПеречислениеСтавкаНДС КАК ПеречислениеСтавкаНДС
	|ИЗ
	|	Справочник.СтавкиНДС КАК СтавкиНДС
	|ГДЕ
	|	СтавкиНДС.ПеречислениеСтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СтавкиНДС.Ссылка,
	|	СтавкиНДС.ПеречислениеСтавкаНДС
	|ИЗ
	|	Справочник.СтавкиНДС КАК СтавкиНДС
	|ГДЕ
	|	СтавкиНДС.ПеречислениеСтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СтавкиНДС.Ссылка,
	|	СтавкиНДС.ПеречислениеСтавкаНДС
	|ИЗ
	|	Справочник.СтавкиНДС КАК СтавкиНДС
	|ГДЕ
	|	СтавкиНДС.ПеречислениеСтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20)";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Если КодСтавкиНДС = 34 или КодСтавкиНДС = 0 Тогда
		
		СтавкаНДС = РезультатЗапроса.Найти(Перечисления.СтавкиНДС.БезНДС,"ПеречислениеСтавкаНДС").Ссылка;
		СуммаНДС = 0;
		
	ИначеЕсли КодСтавкиНДС = 36 Тогда
		
		СтавкаНДС = РезультатЗапроса.Найти(Перечисления.СтавкиНДС.НДС20,"ПеречислениеСтавкаНДС").Ссылка;
        СуммаНДС = Сумма * 20 / 120;
		
	ИначеЕсли КодСтавкиНДС = 16 Тогда
		
		СтавкаНДС =	РезультатЗапроса.Найти(Перечисления.СтавкиНДС.НДС10,"ПеречислениеСтавкаНДС").Ссылка;
		СуммаНДС = Сумма * 10 / 110;
	
	КонецЕсли;
	
	СтруктураНДС.Вставить("СтавкаНДС", СтавкаНДС);
	СтруктураНДС.Вставить("СуммаНДС ", СуммаНДС );
	
	Возврат СтруктураНДС;
	
КонецФункции

// Загрузка данных и получение таблицы значений
Функция ПолучениеДанныхORACLE(ПараметрыВыборки)
	
	Попытка
		
		Соединение = Новый COMОбъект("ADODB.Connection");
		
		СтруктураПараметров = ПолучитьПараметрыПодключения(ПараметрыВыборки.ФронтСистема);
	    
	    СтрокаПодключения = "Provider=OraOLEDB.Oracle;Data Source=(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=" + СтруктураПараметров.Сервер + ")(PORT=" + СтруктураПараметров.Порт + "))(CONNECT_DATA=(SID=" + СтруктураПараметров.SID + ")));User Id=" + СтруктураПараметров.Пользователь + ";Password=" + СтруктураПараметров.Пароль + ";";

	    Соединение.Open(СтрокаПодключения);

	Исключение
		СтрокаСообщенияОбОшибке = НСтр("ru = 'Ошибка подключения к базе данных Micros: 
				|Описание ошибки: %1'");
		СтрокаСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщенияОбОшибке,
								ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
					
		ЗаписьЖурналаРегистрацииОбмена("Загрузка чеков Micros", СтрокаСообщенияОбОшибке, Истина);

	КонецПопытки;

	//выборка через RecordSet
	RecordSet  = Новый COMОбъект("ADODB.RecordSet");
	RecordSet.ActiveConnection = Соединение;
	RecordSet.CursorType = 3;
	RecordSet.LockType = 2; 
	
	#Область Запрос
	
	УсловиеДатаЗагрузки = "cc.checkclose BETWEEN TO_TIMESTAMP('" + ПараметрыВыборки.НачалоВыборки + "','YYYY-MM-DD HH24:MI:SS') AND TO_TIMESTAMP('" + ПараметрыВыборки.КонецВыборки + "','YYYY-MM-DD HH24:MI:SS')";
	
	УсловиеТочкиПродаж =  ?(ПараметрыВыборки.СтрокаВыборкиТочекПродаж = "", "", "AND rc.objectnumber in (" + ПараметрыВыборки.СтрокаВыборкиТочекПродаж + ")");
	
	УсловиеНомерЧека = ?(ПараметрыВыборки.НомерЧека <> 0, "AND cc.CHECKNUMBER = " + Формат(ПараметрыВыборки.НомерЧека, "ЧГ="), "");
	
	CommandText = "WITH TenderData AS (
	|    SELECT 
	|        c.checkid,
	|        MAX(tm.objectnumber) AS tendernum
	|    FROM transdb.check_detail c
	|    INNER JOIN transdb.checks cc ON c.checkid = cc.checkid
	|    INNER JOIN transdb.tender_media_detail t ON c.checkdetailid = t.checkdetailid
	|    INNER JOIN transdb.tender_media tm ON tm.tendmedid = t.tendmedid
	|    INNER JOIN transdb.revenue_center rc ON rc.revctrid = c.revctrid
	|    WHERE
	|        " + УсловиеДатаЗагрузки + "
	|        " + УсловиеТочкиПродаж + "
	|        " + УсловиеНомерЧека + "
	|        AND c.detailtype = 4
	|        AND SUBSTR(cc.STATUS, 23, 1) = '0'
	|        AND SUBSTR(cc.STATUS, 18, 1) = '0'
	|        AND cc.reopenedtochecknum IS NULL
	|        AND cc.ADDEDTOCHECKNUM IS NULL
	|        AND SUBSTR(c.status, 10, 1) = '0'
	|    GROUP BY c.checkid
	|),
	|DiscountData AS (
	|    SELECT 
	|        c.checkid,
	|        SUM(c.total) AS total,
	|        MAX(s1.stringtext) AS discountname
	|    FROM transdb.check_detail c
	|    INNER JOIN transdb.discount_detail d ON c.checkdetailid = d.checkdetailid
	|    INNER JOIN transdb.discount dd ON dd.dscntid = d.dscntid
	|    INNER JOIN transdb.string_table s1 ON s1.stringnumberid = dd.nameid AND s1.langid = 1
	|    INNER JOIN transdb.checks cc ON c.checkid = cc.checkid
	|    INNER JOIN transdb.revenue_center rc ON rc.revctrid = c.revctrid
	|    WHERE
	|        " + УсловиеДатаЗагрузки + "
	|        " + УсловиеТочкиПродаж + "
	|        " + УсловиеНомерЧека + "
	|        AND c.detailtype = 2
	|        AND SUBSTR(cc.STATUS, 23, 1) = '0'
	|        AND SUBSTR(cc.STATUS, 18, 1) = '0'
	|        AND cc.reopenedtochecknum IS NULL
	|        AND cc.ADDEDTOCHECKNUM IS NULL
	|        AND SUBSTR(c.status, 10, 1) = '0'
	|    GROUP BY c.checkid
	|),
	|AggregatedDiscountData AS (
	|    SELECT
	|        td.checkid,
	|        td.tendernum,
	|        dd.total AS misum,
	|        dd.discountname
	|    FROM TenderData td
	|    LEFT JOIN DiscountData dd ON td.checkid = dd.checkid
	|),
	|PreChecksDetail AS (
	|    SELECT
	|        d.checkid,
	|		 d.detailindex,
	|        TO_CHAR(d.OBJECTNUMBER) AS stringobjectnum,
	|        rc.objectnumber AS rc_objectnumber,
	|        s5.stringtext AS hu_stringtext,
	|        cc.checknumber,
	|        TO_CHAR(cc.checkopen, 'DD-MM-YYYY HH24:MI:SS') AS checkopenday,
	|        TO_CHAR(cc.checkclose, 'DD-MM-YYYY HH24:MI:SS') AS checkcloseday,
	|        mg.objectnumber AS mg_objectnumber,
	|        s3.stringtext AS md_stringtext,
	|        ROUND(d.numerator / d.denominator, 3) AS quantity,
	|        d.total,
	|        ROUND(d.total / NULLIF(d.numerator / d.denominator, 0), 3) AS price,
	|        e.checkname,
	|        ws.objectnumber AS ws_objectnumber,
	|        stax.STRINGTEXT AS tax,
	|        tax.TAXCLASSID AS idtax
	|    FROM transdb.menu_item_detail m
	|    LEFT JOIN transdb.check_detail d ON d.checkdetailid = m.checkdetailid
	|    LEFT JOIN transdb.checks cc ON cc.checkid = d.checkid
	|    LEFT JOIN transdb.menu_item_definition md ON m.menuitemdefid = md.menuitemdefid
	|    LEFT JOIN transdb.menu_item_price mp ON m.menuitempriceid = mp.menuitempriceid
	|    LEFT JOIN transdb.menu_item_master mm ON md.menuitemmasterid = mm.menuitemmasterid
	|    LEFT JOIN transdb.major_group mg ON (mg.objectnumber = mm.majgrpobjnum AND mg.hierstrucid = 1)
	|    LEFT JOIN transdb.family_group fg ON (fg.objectnumber = mm.famgrpobjnum AND fg.hierstrucid = 1)
	|    LEFT JOIN transdb.hierarchy_unit hu ON hu.revctrid = d.revctrid
	|    LEFT JOIN transdb.hierarchy_structure hs ON hs.hierunitid = hu.hierunitid
	|    LEFT JOIN transdb.employee e ON e.employeeid = cc.employeeid
	|    LEFT JOIN transdb.cashier csh ON cc.cashierid = csh.cashierid
	|    LEFT JOIN transdb.secure_detail sd ON sd.checkdetailid = d.checkdetailid + 1
	|    LEFT JOIN transdb.revenue_center rc ON rc.revctrid = d.revctrid
	|    LEFT JOIN transdb.dining_table t ON t.diningtableid = cc.diningtableid AND t.hierstrucid = hs.hierstrucid
	|    LEFT JOIN transdb.string_table s1 ON s1.stringnumberid = mg.nameid AND s1.langid = 1
	|    LEFT JOIN transdb.string_table s2 ON s2.stringnumberid = fg.nameid AND s2.langid = 1
	|    LEFT JOIN transdb.string_table s3 ON s3.stringnumberid = md.name1id AND s3.langid = 1
	|    LEFT JOIN transdb.string_table s5 ON s5.stringnumberid = hu.nameid AND s5.langid = 1
	|    LEFT JOIN transdb.string_table s6 ON s6.stringnumberid = csh.nameid AND s6.langid = 1
	|    LEFT JOIN transdb.string_table s7 ON s7.stringnumberid = t.nameid AND s7.langid = 1
	|    LEFT JOIN (
	|        SELECT 
	|            ttls.checkid, 
	|            MAX(ttls.transactiontime), 
	|            ttls.workstationid, 
	|            ttls.ordtypeid
	|        FROM transdb.totals ttls
	|        INNER JOIN (
	|            SELECT 
	|                checkid, 
	|                MAX(transactiontime) maxtime 
	|            FROM transdb.totals 
	|            GROUP BY checkid
	|        ) ttls1 ON ttls.checkid = ttls1.checkid AND ttls.transactiontime = ttls1.maxtime
	|        GROUP BY ttls.checkid, ttls.workstationid, ttls.ordtypeid
	|    ) ttl ON cc.checkid = ttl.checkid
	|    LEFT JOIN transdb.workstation ws ON ttl.workstationid = ws.workstationid
	|    LEFT JOIN transdb.MENU_ITEM_CLASS mic ON md.MENUITEMCLASSOBJNUM = mic.OBJECTNUMBER AND mic.hierstrucid = 2
	|    LEFT JOIN transdb.TAX_CLASS tax ON mic.taxclassobjnum = tax.objectnumber AND tax.hierstrucid = 2
	|    LEFT JOIN transdb.STRING_TABLE stax ON tax.NAMEID = stax.STRINGNUMBERID AND stax.langid = 1
	|    WHERE
	|        " + УсловиеДатаЗагрузки + "
	|        " + УсловиеТочкиПродаж + "
	|        " + УсловиеНомерЧека + "
	|        AND SUBSTR(cc.STATUS, 23, 1) = '0'
	|        AND SUBSTR(cc.STATUS, 18, 1) = '0'
	|        AND d.detailtype = 1
	|        AND cc.reopenedtochecknum IS NULL
	|        AND cc.ADDEDTOCHECKNUM IS NULL
	|        AND hs.hierid = 1
	|        AND s2.stringtext != 'TXT MESSAGE'
	|),
	|RankedPreChecksDetail AS (
	|    SELECT
	|        pcd.*,
	|        SUM(pcd.quantity) OVER (PARTITION BY pcd.checkid, pcd.stringobjectnum) as net_quantity,
	|        CASE WHEN pcd.quantity > 0 THEN ROW_NUMBER() OVER (PARTITION BY pcd.checkid, pcd.stringobjectnum ORDER BY pcd.detailindex ASC) ELSE NULL END as sale_rank,
	|        MAX(CASE WHEN TRUNC(pcd.quantity) != pcd.quantity THEN 1 ELSE 0 END) OVER (PARTITION BY pcd.checkid, pcd.stringobjectnum) as has_fractional
	|    FROM PreChecksDetail pcd
	|),
	|FilteredPreChecksDetail AS (
	|    SELECT *
	|    FROM RankedPreChecksDetail
	|    WHERE net_quantity > 0 AND (
	|        (has_fractional = 1 AND quantity > 0)
	|        OR
	|        (has_fractional = 0 AND sale_rank <= net_quantity)
	|    )
	|),
	|ChecksDetail AS (
	|    SELECT
	|        checkid,
	|        stringobjectnum,
	|        detailindex,
	|        rc_objectnumber AS objectnumber,
	|        hu_stringtext AS stringtext,
	|        checknumber,
	|        checkopenday,
	|        checkcloseday,
	|        mg_objectnumber AS objectnumber_mg,
	|        md_stringtext AS stringtext_md,
	|        quantity AS total_quantity,
	|        price,
	|        total AS total_sum,
	|        SUM(total) OVER (PARTITION BY checkid) AS total_sales_per_check,
	|        checkname,
	|        ws_objectnumber AS objectnumber_ws,
	|        tax AS TAX,
	|        idtax AS IDTAX
	|    FROM FilteredPreChecksDetail
	|)
	|SELECT
	|    cd.objectnumber AS НомерТочкиПродаж,
	|    cd.stringtext AS НаименованиеТочкиПродаж,
	|    cd.objectnumber_ws AS НомерКассы,
	|    cd.checknumber AS НомерЧека,
	|    cd.checkid AS ИДЧека,
	|    cd.checkopenday AS ДатаОткрытияЧекаСтрока,
	|    cd.checkcloseday AS ДатаЗакрытияЧекаСтрока,
	|    cd.stringobjectnum AS КодТовара,
	|    cd.stringtext_md AS НазваниеТовара,
	|    cd.total_quantity AS КоличествоТовара,
	|    cd.price AS ЦенаТовара,
	|    cd.total_sum AS СуммаТовара,
	|    cd.total_sales_per_check AS СтоимостьЧекаБезСкидки,
	|    NVL(-agg.misum, 0) AS СуммаСкидкиЧека,
	|    cd.total_sales_per_check - NVL(-agg.misum, 0) AS СтоимостьЧека,
	|    CAST(
	|        CASE
	|            WHEN NVL(cd.total_sales_per_check, 0) = 0 THEN 0
	|            ELSE NVL(cd.total_sum, 0) / cd.total_sales_per_check * NVL(-agg.misum, 0)
	|        END AS NUMBER(15, 3)
	|    ) AS СуммаСкидкиСтроки,
	|    NVL(cd.IDTAX, 0) AS КодСтавкиНДС,
	|    cd.TAX AS СтавкаНДССтрокой,
	|    agg.discountname AS НаименованиеСкидкиЧека,
	|    agg.tendernum AS НомерМетодаОплаты,
	|    cd.checkname AS ИмяСотрудника,
	|	cd.detailindex AS НомерПозицииВЧеке
	|FROM ChecksDetail cd
	|LEFT JOIN AggregatedDiscountData agg ON cd.checkid = agg.checkid
	|ORDER BY cd.checknumber, cd.detailindex";
	
#КонецОбласти
	
	Попытка
		
		RecordSet.Open(CommandText, Соединение); 
		
	Исключение
		
        Соединение.Close();
		
		СтрокаСообщенияОбОшибке = НСтр("ru = 'Ошибка выборки RECORDSET в данных Micros: 
				|Описание ошибки: %1'");
		СтрокаСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщенияОбОшибке,
								ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
					
		ЗаписьЖурналаРегистрацииОбмена("Загрузка чеков Micros", СтрокаСообщенияОбОшибке, Истина);

	КонецПопытки;		
	
	Если RecordSet.EOF() = Истина Тогда
		
		RecordSet.Close();
		
		Соединение.Close();
		
		ЗаписьЖурналаРегистрацииОбмена("Загрузка чеков Micros", "Данных нет. Не обязательно ошибка. Проверить наличие чеков.");
		
		ВызватьИсключение "Данных нет. Не обязательно ошибка. Проверить наличие чеков.";
		
	КонецЕсли;
	
	// Создаем новую пустую таблицу значений
	ТаблицаЗначенийORACLE = Новый ТаблицаЗначений;

	 //Добавляем колонки в таблицу значений
	Для Каждого Колонка Из RecordSet.Fields Цикл
	    ИмяКолонки = Колонка.Name;
	    ТипДанных = ТипЗнч(Колонка.Value);
	    
	    // Определяем тип данных для колонок таблицы значений
		Если ИмяКолонки = "НАИМЕНОВАНИЕСКИДКИЧЕКА" Тогда //может быть null
			ТипКолонки = Новый ОписаниеТипов("Строка");
		ИначеЕсли ИмяКолонки = "НОМЕРМЕТОДАОПЛАТЫ" Тогда
			ТипКолонки = Новый ОписаниеТипов("Число");
		ИначеЕсли ИмяКолонки = "НОМЕРТОЧКИПРОДАЖ" Тогда
			ТипКолонки = Новый ОписаниеТипов("Строка");
		ИначеЕсли ТипДанных = Тип("Число") Тогда
	        ТипКолонки = Новый ОписаниеТипов("Число");
	    ИначеЕсли ТипДанных = Тип("Дата") Тогда
	        ТипКолонки = Новый ОписаниеТипов("Дата");
	    ИначеЕсли ТипДанных = Тип("Строка") Тогда
	        ТипКолонки = Новый ОписаниеТипов("Строка");
		КонецЕсли;
	
	    ТаблицаЗначенийORACLE.Колонки.Добавить(ИмяКолонки, ТипКолонки);
	  
	КонецЦикла;
	
	ТаблицаЗначенийORACLE.Колонки.Добавить("ДатаГруппировка", Новый ОписаниеТипов("Дата"));
	ТаблицаЗначенийORACLE.Колонки.Добавить("ДатаОткрытияЧека", Новый ОписаниеТипов("Дата"));
	ТаблицаЗначенийORACLE.Колонки.Добавить("ДатаЗакрытияЧека", Новый ОписаниеТипов("Дата"));
	
	// Заполняем строки таблицы значений данными из RecordSet
	Пока RecordSet.EOF() = Ложь Цикл
		
		НоваяСтрока = ТаблицаЗначенийORACLE.Добавить();

	Для Каждого Колонка Из RecordSet.Fields Цикл
		
		ИмяКолонки = Колонка.Name;
	    ЗначениеКолонки = Колонка.Value;
	    
	    // Устанавливаем значение в соответствующую колонку новой строки
	    НоваяСтрока[ИмяКолонки] = ЗначениеКолонки;
		
	КонецЦикла;

		RecordSet.MoveNext(); // Переходим к следующей записи в RecordSet
		
	КонецЦикла;
	
	Попытка
		
		RecordSet.Close();

    	Соединение.Close(); 
		
	Исключение
	//соединение может быть уже закрыто	
	КонецПопытки;
	
	Для Каждого Строка из ТаблицаЗначенийORACLE Цикл
		
		ДатаЗакрытияЧека = Строка.ДАТАЗАКРЫТИЯЧЕКАСТРОКА;
		ДатаОткрытияЧека = Строка.ДАТАОТКРЫТИЯЧЕКАСТРОКА;		
		
		Строка.ДатаГруппировка = СтроковыеФункцииКлиентСервер.СтрокаВДату(ДатаЗакрытияЧека);
		Строка.ДатаОткрытияЧека = СтроковыеФункцииКлиентСервер.СтрокаВДату(ДатаОткрытияЧека, ЧастиДаты.ДатаВремя);		
		Строка.ДатаЗакрытияЧека = СтроковыеФункцииКлиентСервер.СтрокаВДату(ДатаЗакрытияЧека, ЧастиДаты.ДатаВремя);
		
	КонецЦикла;
	
	//удалить колонки	
	Колонка = ТаблицаЗначенийORACLE.Колонки.Найти("ДАТАОТКРЫТИЯЧЕКАСТРОКА"); 
	Если НЕ Колонка = Неопределено Тогда
		ТаблицаЗначенийORACLE.Колонки.Удалить(Колонка);
	КонецЕсли;
	
	Колонка = ТаблицаЗначенийORACLE.Колонки.Найти("ДАТАЗАКРЫТИЯЧЕКАСТРОКА"); 
	Если НЕ Колонка = Неопределено Тогда
		ТаблицаЗначенийORACLE.Колонки.Удалить(Колонка);
	КонецЕсли;
	
	// Отсортировать таблицу так, чтобы строки одного чека шли подряд
	ТаблицаЗначенийORACLE.Сортировать("ДатаОткрытияЧека, НОМЕРЧЕКА, НОМЕРТОЧКИПРОДАЖ, КОЛИЧЕСТВОТОВАРА Убыв");
		
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
				|	ТаблицаORACLE.ДатаЗакрытияЧека КАК ДатаЗакрытияЧека,
				|	ТаблицаORACLE.ДатаОткрытияЧека КАК ДатаОткрытияЧека,
				|	ТаблицаORACLE.ДатаГруппировка КАК ДатаГруппировка,
				|	ТаблицаORACLE.КОДТОВАРА КАК КОДТОВАРА,
				|	ТаблицаORACLE.КОЛИЧЕСТВОТОВАРА КАК КОЛИЧЕСТВОТОВАРА,
				|	ТаблицаORACLE.НАЗВАНИЕТОВАРА КАК НАЗВАНИЕТОВАРА,
				|	ТаблицаORACLE.НАИМЕНОВАНИЕТОЧКИПРОДАЖ КАК НАИМЕНОВАНИЕТОЧКИПРОДАЖ,
				|	ТаблицаORACLE.НОМЕРТОЧКИПРОДАЖ КАК НОМЕРТОЧКИПРОДАЖ,
				|	ТаблицаORACLE.НОМЕРЧЕКА КАК НОМЕРЧЕКА,
				|	ТаблицаORACLE.СУММАСКИДКИЧЕКА КАК СУММАСКИДКИЧЕКА,
				|	ТаблицаORACLE.СУММАСКИДКИСТРОКИ КАК СУММАСКИДКИСТРОКИ,
				|	ТаблицаORACLE.СУММАТОВАРА КАК СУММАТОВАРА,
				|	ТаблицаORACLE.СТОИМОСТЬЧЕКА КАК СТОИМОСТЬЧЕКА,
				|	ТаблицаORACLE.ЦЕНАТОВАРА КАК ЦЕНАТОВАРА,
				|	ТаблицаORACLE.КодСтавкиНДС КАК КодСтавкиНДС,
				|	ТаблицаORACLE.СтавкаНДССтрокой КАК СтавкаНДССтрокой,
				|	ТаблицаORACLE.НАИМЕНОВАНИЕСКИДКИЧЕКА КАК НАИМЕНОВАНИЕСКИДКИЧЕКА,
				|	ТаблицаORACLE.НОМЕРМЕТОДАОПЛАТЫ КАК НОМЕРМЕТОДАОПЛАТЫ,
				|	ТаблицаORACLE.НОМЕРКАССЫ КАК НОМЕРКАССЫ,
				|	ТаблицаORACLE.НомерПозицииВЧеке КАК НомерПозицииВЧеке
				|ПОМЕСТИТЬ ТаблицаORACLE
				|ИЗ
				|	&ТаблицаORACLE КАК ТаблицаORACLE
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ТаблицаORACLE.ДатаЗакрытияЧека КАК ДатаЗакрытияЧека,
				|	ТаблицаORACLE.ДатаОткрытияЧека КАК ДатаОткрытияЧека,
				|	ТаблицаORACLE.ДатаГруппировка КАК ДатаГруппировка,
				|	ТаблицаORACLE.КОДТОВАРА КАК КОДТОВАРА,
				|	ВЫБОР
				|		КОГДА Номенклатура.Объект ЕСТЬ NULL
				|			ТОГДА ТаблицаORACLE.КОЛИЧЕСТВОТОВАРА
				|		ИНАЧЕ ВЫБОР
				|				КОГДА Номенклатура.Количество * ТаблицаORACLE.КОЛИЧЕСТВОТОВАРА = 0
				|					ТОГДА ТаблицаORACLE.КОЛИЧЕСТВОТОВАРА
				|				ИНАЧЕ Номенклатура.Количество * ТаблицаORACLE.КОЛИЧЕСТВОТОВАРА
				|			КОНЕЦ
				|	КОНЕЦ КАК КОЛИЧЕСТВОТОВАРА,
				|	ТаблицаORACLE.НАЗВАНИЕТОВАРА КАК НАЗВАНИЕТОВАРА,
				|	ТаблицаORACLE.НАИМЕНОВАНИЕТОЧКИПРОДАЖ КАК НАИМЕНОВАНИЕТОЧКИПРОДАЖ,
				|	ТаблицаORACLE.НОМЕРТОЧКИПРОДАЖ КАК НОМЕРТОЧКИПРОДАЖ,
				|	ТаблицаORACLE.НОМЕРЧЕКА КАК НОМЕРЧЕКА,
				|	ТаблицаORACLE.СУММАСКИДКИЧЕКА КАК СУММАСКИДКИЧЕКА,
				|	ТаблицаORACLE.СУММАСКИДКИСТРОКИ КАК СУММАСКИДКИСТРОКИ,
				|	ТаблицаORACLE.СУММАТОВАРА КАК СУММАТОВАРА,
				|	ТаблицаORACLE.СТОИМОСТЬЧЕКА КАК СТОИМОСТЬЧЕКА,
				|	ТаблицаORACLE.ЦЕНАТОВАРА КАК ЦЕНАТОВАРА,
				|	ТаблицаORACLE.КодСтавкиНДС КАК КодСтавкиНДС,
				|	ТаблицаORACLE.СтавкаНДССтрокой КАК СтавкаНДССтрокой,
				|	ТаблицаORACLE.НАИМЕНОВАНИЕСКИДКИЧЕКА КАК НАИМЕНОВАНИЕСКИДКИЧЕКА,
				|	ТаблицаORACLE.НОМЕРМЕТОДАОПЛАТЫ КАК НОМЕРМЕТОДАОПЛАТЫ,
				|	ТаблицаORACLE.НОМЕРКАССЫ КАК НОМЕРКАССЫ,
				|	ТаблицаORACLE.НомерПозицииВЧеке КАК НомерПозицииВЧеке,
				|	Кассы.ФронтСистема КАК ФронтСистема,
				|	ЕСТЬNULL(Кассы.Объект, ЗНАЧЕНИЕ(Справочник.КассыККМ.ПустаяСсылка)) КАК КассаККМ,
				|	ЕСТЬNULL(Кассы.Объект.Владелец, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК Организация,
				|	ЕСТЬNULL(Кассы.Объект.Склад, ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)) КАК Склад,
				|	ЕСТЬNULL(Кассы.Объект.Подразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)) КАК Подразделение,
				|	ВЫБОР
				|		КОГДА НЕ Номенклатура.НоменклатураАлкоголь = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
				|			ТОГДА Номенклатура.НоменклатураАлкоголь
				|		ИНАЧЕ Номенклатура.Объект
				|	КОНЕЦ КАК Номенклатура,
				|	ЕСТЬNULL(Кассы.Объект.питКассовыйУзел, ЗНАЧЕНИЕ(ПланОбмена.питУдаленныеКассы.ПустаяСсылка)) КАК КассовыйУзел,
				|	ВЫРАЗИТЬ(Номенклатура.Объект КАК Справочник.Номенклатура).питПродажаПоСвободнойЦене КАК ПродажаПоСвободнойЦене,
				|	ВЫРАЗИТЬ(Номенклатура.Объект КАК Справочник.Номенклатура).ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры) КАК ИспользованиеХарактеристик,
				|	ЕСТЬNULL(Номенклатура.НеВлияетНаУчетТМЦ, ЛОЖЬ) КАК НеВлияетНаУчетТМЦ,
				|	питВидыОплатОрганизаций.Ссылка КАК МетодОплаты
				|ИЗ
				|	ТаблицаORACLE КАК ТаблицаORACLE
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПЛ_СоответствиеСФронтСистемами КАК Кассы
				|		ПО (ПОДСТРОКА(ТаблицаORACLE.НОМЕРТОЧКИПРОДАЖ, 1, 20) = ПОДСТРОКА(Кассы.Код, 1, 20))
				|			И (Кассы.ФронтСистема = &ФронтСистема)
				|			И (Кассы.ТипОбъекта = &ТипОбъектаКасса)
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПЛ_СоответствиеСФронтСистемами КАК Номенклатура
				|		ПО (ПОДСТРОКА(ТаблицаORACLE.КОДТОВАРА, 1, 20) = ПОДСТРОКА(Номенклатура.Код, 1, 20))
				|			И (Номенклатура.ФронтСистема = &ФронтСистема)
				|			И (Номенклатура.ТипОбъекта = &ТипОбъектаНоменклатура)
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.MRS_МетодыОплатФронтСистем КАК MRS_МетодыОплатФронтСистем
				|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.питВидыОплатОрганизаций КАК питВидыОплатОрганизаций
				|			ПО (MRS_МетодыОплатФронтСистем.ТипОплаты = питВидыОплатОрганизаций.ТипОплаты)
				|		ПО (ТаблицаORACLE.НОМЕРМЕТОДАОПЛАТЫ = MRS_МетодыОплатФронтСистем.НомерМетодаОплаты
				|				И MRS_МетодыОплатФронтСистем.ФронтСистема = &ФронтСистема)";
	
	// Установка параметров.
	ТипОбъектаКасса = ПланыВидовХарактеристик.ПЛ_ТипыОбъектовФронтСистем.КассаККМ; 
	ТипОбъектаНоменклатура = ПланыВидовХарактеристик.ПЛ_ТипыОбъектовФронтСистем.Номенклатура; 
	Запрос.УстановитьПараметр("ТипОбъектаКасса", ТипОбъектаКасса);
	Запрос.УстановитьПараметр("ТипОбъектаНоменклатура", ТипОбъектаНоменклатура);
   	Запрос.УстановитьПараметр("ФронтСистема", ПараметрыВыборки.ФронтСистема);
	Запрос.УстановитьПараметр("ТаблицаORACLE", ТаблицаЗначенийORACLE);
	
	ТаблицаЗначенийORACLE = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаЗначенийORACLE;
	
КонецФункции

//получение других данных из micros
Процедура ПолучениеВспомогательныхДанныхORACLE(ФронтСистема) Экспорт
	
	Попытка
		
		Соединение = Новый COMОбъект("ADODB.Connection");
		
		СтруктураПараметров = ПолучитьПараметрыПодключения(ФронтСистема);
	    
	    СтрокаПодключения = "Provider=OraOLEDB.Oracle;Data Source=(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=" + СтруктураПараметров.Сервер + ")(PORT=" + СтруктураПараметров.Порт + "))(CONNECT_DATA=(SID=" + СтруктураПараметров.SID + ")));User Id=" + СтруктураПараметров.Пользователь + ";Password=" + СтруктураПараметров.Пароль + ";";

	    Соединение.Open(СтрокаПодключения);

	Исключение
		СтрокаСообщенияОбОшибке = НСтр("ru = 'Ошибка подключения к базе данных Micros: 
				|Описание ошибки: %1'");
		СтрокаСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщенияОбОшибке,
								ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
					
		ЗаписьЖурналаРегистрацииОбмена("Загрузка вспомогательных данных Micros", СтрокаСообщенияОбОшибке, Истина);

	КонецПопытки;

	//выборка через RecordSet
	RecordSet  = Новый COMОбъект("ADODB.RecordSet");
	RecordSet.ActiveConnection = Соединение;
	RecordSet.CursorType = 3;
	RecordSet.LockType = 2; 
		
	CommandText = "select 
				|	tm.OBJECTNUMBER as НомерМетодаОплаты,
				|	tm.RPTGRPOBJNUM as НомерТипаОплаты,
				|	s1.stringtext as НаименованиеТипаОплаты
				|from 
				|	transdb.tender_media tm 
				|	left join transdb.string_table s1 on s1.stringnumberid = tm.nameid and s1.langid = 1";	
	
	Попытка
		
		RecordSet.Open(CommandText, Соединение); 
		
	Исключение
		
        Соединение.Close();
		
		СтрокаСообщенияОбОшибке = НСтр("ru = 'Ошибка выборки RECORDSET в данных Micros: 
				|Описание ошибки: %1'");
		СтрокаСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщенияОбОшибке,
								ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
					
		ЗаписьЖурналаРегистрацииОбмена("Загрузка вспомогательных данных Micros", СтрокаСообщенияОбОшибке, Истина);

	КонецПопытки;		
	
	Если RecordSet.EOF() = Истина Тогда
		
		RecordSet.Close();
		
		Соединение.Close();
		
		ЗаписьЖурналаРегистрацииОбмена("Загрузка вспомогательных данных Micros", "Данных нет.", Истина);
		
		ВызватьИсключение "Загрузка вспомогательных данных Micros. Данных нет.";
		
	КонецЕсли;
	
	// Создаем новую пустую таблицу значений
	ТаблицаЗначенийORACLE = Новый ТаблицаЗначений;

	 //Добавляем колонки в таблицу значений
	Для Каждого Колонка Из RecordSet.Fields Цикл
	    ИмяКолонки = Колонка.Name;
	    ТипДанных = ТипЗнч(Колонка.Value);
		
	    // Определяем тип данных для колонок таблицы значений
		Если ИмяКолонки = "НомерМетодаОплаты" Тогда //может быть null
			ТипКолонки = Новый ОписаниеТипов("Число");
		ИначеЕсли ИмяКолонки = "НомерТипаОплаты" Тогда
			ТипКолонки = Новый ОписаниеТипов("Число");
		ИначеЕсли ИмяКолонки = "НаименованиеТипаОплаты" Тогда
			ТипКолонки = Новый ОписаниеТипов("Строка");
		ИначеЕсли ТипДанных = Тип("Число") Тогда
	        ТипКолонки = Новый ОписаниеТипов("Число");
	    ИначеЕсли ТипДанных = Тип("Дата") Тогда
	        ТипКолонки = Новый ОписаниеТипов("Дата");
	    ИначеЕсли ТипДанных = Тип("Строка") Тогда
	        ТипКолонки = Новый ОписаниеТипов("Строка");
		КонецЕсли;
	
	    ТаблицаЗначенийORACLE.Колонки.Добавить(ИмяКолонки, ТипКолонки);
	  
	КонецЦикла;
	
		
	// Заполняем строки таблицы значений данными из RecordSet
	Пока RecordSet.EOF() = Ложь Цикл
		
		НоваяСтрока = ТаблицаЗначенийORACLE.Добавить();

	Для Каждого Колонка Из RecordSet.Fields Цикл
		
		ИмяКолонки = Колонка.Name;
	    ЗначениеКолонки = Колонка.Value;
	    
	    // Устанавливаем значение в соответствующую колонку новой строки
	    НоваяСтрока[ИмяКолонки] = ЗначениеКолонки;
		
	КонецЦикла;

		RecordSet.MoveNext(); // Переходим к следующей записи в RecordSet
		
	КонецЦикла;
	
	Попытка
		
		RecordSet.Close();

    	Соединение.Close(); 
		
	Исключение
	//соединение может быть уже закрыто	
	КонецПопытки;
	
	ЗаписатьМетодыОплат(ФронтСистема, ТаблицаЗначенийORACLE);
		
КонецПроцедуры

Процедура ЗаписатьМетодыОплат(ФронтСистема, ТаблицаЗначенийORACLE)
	
	Попытка
		
		Для Каждого Строка из ТаблицаЗначенийORACLE Цикл
			
			ТипОплаты = Неопределено;
    
		    Если Строка.НомерТипаОплаты = 2 Тогда
		        ТипОплаты = Перечисления.питТипыОплат.Наличные;
		    Иначе
		        ТипОплаты = Перечисления.питТипыОплат.ПлатежнаяКарта;
		    КонецЕсли;
		    
		    // Проверяем наличие записи в регистре
		    НаборЗаписей = РегистрыСведений.MRS_МетодыОплатФронтСистем.СоздатьНаборЗаписей();
		    НаборЗаписей.Отбор.ФронтСистема.Установить(ФронтСистема);
		    НаборЗаписей.Отбор.НомерМетодаОплаты.Установить(Строка.НомерМетодаОплаты);
		    НаборЗаписей.Прочитать();
		    
		    // Если запись существует, пропускаем
		    Если НаборЗаписей.Количество() > 0 Тогда
		        Продолжить; 
		    КонецЕсли;
		    
		    // Создаём новую запись, если не найдена существующая
		    НоваяЗапись = НаборЗаписей.Добавить();
		    НоваяЗапись.ФронтСистема = ФронтСистема; 
		    НоваяЗапись.НомерМетодаОплаты = Строка.НомерМетодаОплаты;
		    НоваяЗапись.НомерТипаОплаты = Строка.НомерТипаОплаты;
		    НоваяЗапись.НаименованиеТипаОплаты = Строка.НаименованиеТипаОплаты;    
		    НоваяЗапись.ТипОплаты = ТипОплаты;
		    
		    НаборЗаписей.Записать(Истина);
							        			
		КонецЦикла;
			
	Исключение
			
		СтрокаСообщенияОбОшибке = НСтр("ru = 'Загрузка вспомогательных данных Micros. Ошибка записи в регистр типов оплат: 
				|Описание ошибки: %1'");
		СтрокаСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщенияОбОшибке,
								ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
					
		ЗаписьЖурналаРегистрацииОбмена("Загрузка вспомогательных данных Micros.", СтрокаСообщенияОбОшибке, Истина);	
		
	КонецПопытки;	
	
КонецПроцедуры
		
Функция ПолучитьДанныеДляСверкиОФД(ФронтСистема, ДатаНачала, ДатаОкончания, КодТочкиПродаж, КассаККМ) Экспорт
	
	Попытка
		
		Соединение = Новый COMОбъект("ADODB.Connection");
		
		СтруктураПараметров = ПолучитьПараметрыПодключения(ФронтСистема);
	    
	    СтрокаПодключения = "Provider=OraOLEDB.Oracle;Data Source=(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=" + СтруктураПараметров.Сервер + ")(PORT=" + СтруктураПараметров.Порт + "))(CONNECT_DATA=(SID=" + СтруктураПараметров.SID + ")));User Id=" + СтруктураПараметров.Пользователь + ";Password=" + СтруктураПараметров.Пароль + ";";

	    Соединение.Open(СтрокаПодключения);

	Исключение
		СтрокаСообщенияОбОшибке = НСтр("ru = 'Ошибка подключения к базе данных Micros: 
				|Описание ошибки: %1'");
		СтрокаСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщенияОбОшибке,
								ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
					
		ЗаписьЖурналаРегистрацииОбмена("Загрузка чеков Micros", СтрокаСообщенияОбОшибке, Истина);

	КонецПопытки;

	//выборка через RecordSet
	RecordSet  = Новый COMОбъект("ADODB.RecordSet");
	RecordSet.ActiveConnection = Соединение;
	RecordSet.CursorType = 3;
	RecordSet.LockType = 2; 
	
	ДатаЗапретаПодключенияНачало = Формат(ДатаНачала, "ДФ='yyyy-MM-dd HH:mm:ss'");   
	ДатаЗапретаПодключенияКонец = Формат(ДатаОкончания, "ДФ='yyyy-MM-dd HH:mm:ss'"); 
	
	#Область ЗапросСвернуто
	
	УсловиеДатаЗагрузки = "cc.checkclose BETWEEN TO_TIMESTAMP('" + ДатаЗапретаПодключенияНачало + "','YYYY-MM-DD HH24:MI:SS') AND TO_TIMESTAMP('" + ДатаЗапретаПодключенияКонец + "','YYYY-MM-DD HH24:MI:SS')";
	
	УсловиеТочкиПродаж =  "AND rc.objectnumber in (" + КодТочкиПродаж + ")";
		
	CommandText = "WITH TenderData AS (
			|    SELECT 
			|        c.checkid,
			|        MAX(tm.objectnumber) AS tendernum 
			|    FROM transdb.check_detail c
			|    INNER JOIN transdb.checks cc ON c.checkid = cc.checkid
			|    INNER JOIN transdb.tender_media_detail t ON c.checkdetailid = t.checkdetailid
			|    INNER JOIN transdb.tender_media tm ON tm.tendmedid = t.tendmedid
			|    INNER JOIN transdb.revenue_center rc ON rc.revctrid = c.revctrid
			|    WHERE" + Символы.ПС + УсловиеДатаЗагрузки + Символы.ПС + УсловиеТочкиПродаж + "
			|        AND c.detailtype = 4
			|        AND SUBSTR(cc.STATUS, 23, 1) = '0'
			|        AND SUBSTR(cc.STATUS, 18, 1) = '0'
			|        AND cc.reopenedtochecknum IS NULL
			|        AND cc.ADDEDTOCHECKNUM IS NULL
			|        AND SUBSTR(c.status, 10, 1) = '0'
			|    GROUP BY c.checkid
			|),
			|DiscountData AS (
			|    SELECT 
			|        c.checkid,
			|        SUM(c.total) AS misum
			|    FROM transdb.check_detail c
			|    INNER JOIN transdb.discount_detail d ON c.checkdetailid = d.checkdetailid
			|    INNER JOIN transdb.checks cc ON c.checkid = cc.checkid
			|    INNER JOIN transdb.revenue_center rc ON rc.revctrid = c.revctrid  
			|    WHERE" + Символы.ПС + УсловиеДатаЗагрузки + Символы.ПС + УсловиеТочкиПродаж + "
			|        AND c.detailtype = 2
			|        AND SUBSTR(cc.STATUS, 23, 1) = '0'
			|        AND SUBSTR(cc.STATUS, 18, 1) = '0'
			|        AND cc.reopenedtochecknum IS NULL
			|        AND cc.ADDEDTOCHECKNUM IS NULL
			|        AND SUBSTR(c.status, 10, 1) = '0'
			|    GROUP BY c.checkid
			|),
			|ChecksDetail AS (
			|    SELECT
			|        d.checkid,
			|        TO_CHAR(rc.objectnumber) AS НомерТочкиПродаж,
			|        MAX(s5.stringtext) AS НаименованиеТочкиПродаж,
			|        MAX(ws.objectnumber) AS НомерКассы,
			|        TRUNC(cc.checkclose) AS Дата,
			|        SUM(SUM(ROUND(d.numerator / d.denominator, 2)) * ROUND(SUM(d.total) / SUM(d.numerator / d.denominator), 2)) OVER (PARTITION BY d.checkid) AS total_sales_per_check
			|    FROM transdb.menu_item_detail m
			|    LEFT JOIN transdb.check_detail d ON d.checkdetailid = m.checkdetailid
			|    LEFT JOIN transdb.checks cc ON cc.checkid = d.checkid
			|    LEFT JOIN transdb.revenue_center rc ON rc.revctrid = d.revctrid
			|    LEFT JOIN transdb.hierarchy_unit hu ON hu.revctrid = d.revctrid
			|    LEFT JOIN transdb.hierarchy_structure hs ON hs.hierunitid = hu.hierunitid
			|    LEFT JOIN transdb.string_table s5 ON s5.stringnumberid = hu.nameid AND s5.langid = 1
			|    LEFT JOIN (
			|        SELECT ttls.checkid, MAX(ttls.workstationid) AS workstationid
			|        FROM transdb.totals ttls
			|        INNER JOIN (SELECT checkid, MAX(transactiontime) maxtime FROM transdb.totals GROUP BY checkid) ttls1 
			|        ON ttls.checkid = ttls1.checkid AND ttls.transactiontime = ttls1.maxtime
			|        GROUP BY ttls.checkid
			|    ) ttl ON cc.checkid = ttl.checkid
			|    LEFT JOIN transdb.workstation ws ON ttl.workstationid = ws.workstationid
			|    WHERE" + Символы.ПС + УсловиеДатаЗагрузки + Символы.ПС + УсловиеТочкиПродаж + "
			|        AND SUBSTR(cc.STATUS, 23, 1) = '0'
			|        AND SUBSTR(cc.STATUS, 18, 1) = '0'
			|        AND d.detailtype = 1
			|        AND cc.reopenedtochecknum IS NULL
			|        AND cc.ADDEDTOCHECKNUM IS NULL
			|        AND hs.hierid = 1
			|    GROUP BY d.checkid, TO_CHAR(rc.objectnumber), TRUNC(cc.checkclose)
			|    HAVING SUM(ROUND(d.numerator / d.denominator, 2)) > 0
			|)
			|SELECT
			|    cd.Дата,
			|    cd.НомерТочкиПродаж,
			|    cd.НаименованиеТочкиПродаж,
			|    SUM(CASE WHEN td.tendernum IN (3, 6, 16, 18, 100, 101, 111, 120, 121, 122, 777)
			|             THEN cd.total_sales_per_check - NVL(-dd.misum, 0)
			|             ELSE 0 END) AS Фискализированные,
			|    SUM(CASE WHEN td.tendernum NOT IN (3, 6, 16, 18, 100, 101, 111, 120, 121, 122, 777)
			|             THEN cd.total_sales_per_check - NVL(-dd.misum, 0)
			|             ELSE 0 END) AS Не_фискализируемые
			|FROM ChecksDetail cd
			|LEFT JOIN TenderData td ON cd.checkid = td.checkid
			|LEFT JOIN DiscountData dd ON cd.checkid = dd.checkid
			|GROUP BY 
			|    cd.Дата,
			|    cd.НомерТочкиПродаж,
			|    cd.НаименованиеТочкиПродаж
			|ORDER BY 
			|    cd.Дата,
			|    cd.НомерТочкиПродаж";	
#КонецОбласти
	
	Попытка
		
		RecordSet.Open(CommandText, Соединение); 
		
	Исключение
		
        Соединение.Close();
		
		СтрокаСообщенияОбОшибке = НСтр("ru = 'Ошибка выборки RECORDSET в данных Micros: 
				|Описание ошибки: %1'");
		СтрокаСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщенияОбОшибке,
								ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
					
		ЗаписьЖурналаРегистрацииОбмена("Загрузка чеков Micros", СтрокаСообщенияОбОшибке, Истина);

	КонецПопытки;		
	
	Если RecordSet.EOF() = Истина Тогда
		
		RecordSet.Close();
		
		Соединение.Close();
		
		ЗаписьЖурналаРегистрацииОбмена("Загрузка чеков Micros", "Данных нет. Не обязательно ошибка. Проверить наличие чеков.");
		
		ВызватьИсключение "Данных нет. Не обязательно ошибка. Проверить наличие чеков.";
		
	КонецЕсли;
	
	// Создаем новую пустую таблицу значений
	ТаблицаЗначенийORACLE = Новый ТаблицаЗначений;

	 //Добавляем колонки в таблицу значений
	Для Каждого Колонка Из RecordSet.Fields Цикл
	    ИмяКолонки = Колонка.Name;
	    ТипДанных = ТипЗнч(Колонка.Value);
	    
	    // Определяем тип данных для колонок таблицы значений
	    Если ТипДанных = Тип("Число") Тогда
	        ТипКолонки = Новый ОписаниеТипов("Число");
	    ИначеЕсли ТипДанных = Тип("Дата") Тогда
	        ТипКолонки = Новый ОписаниеТипов("Дата");
	    ИначеЕсли ТипДанных = Тип("Строка") Тогда
	        ТипКолонки = Новый ОписаниеТипов("Строка");
		ИначеЕсли ИмяКолонки = "НОМЕРМЕТОДАОПЛАТЫ" Тогда
			ТипКолонки = Новый ОписаниеТипов("Число");
		КонецЕсли;
	
	    ТаблицаЗначенийORACLE.Колонки.Добавить(ИмяКолонки, ТипКолонки);
	  
	КонецЦикла;
	
	// Заполняем строки таблицы значений данными из RecordSet
	Пока RecordSet.EOF() = Ложь Цикл
		
		НоваяСтрока = ТаблицаЗначенийORACLE.Добавить();

	Для Каждого Колонка Из RecordSet.Fields Цикл
		
		ИмяКолонки = Колонка.Name;
	    ЗначениеКолонки = Колонка.Value;
	    
	    // Устанавливаем значение в соответствующую колонку новой строки
	    НоваяСтрока[ИмяКолонки] = ЗначениеКолонки;
		
	КонецЦикла;

		RecordSet.MoveNext(); // Переходим к следующей записи в RecordSet
		
	КонецЦикла;
	
	Попытка
		
		RecordSet.Close();

    	Соединение.Close(); 
		
	Исключение
	//соединение может быть уже закрыто	
	КонецПопытки;
			
	Возврат ТаблицаЗначенийORACLE;
	
КонецФункции

Процедура СдвинутьДатуЗапрета(ПараметрыВыборки)
	
	Попытка
		
		Набор = РегистрыСведений.MRS_НастройкиПодключенияКФронтСистемам.СоздатьНаборЗаписей();
		Набор.Отбор.ФронтСистема.Установить(ПараметрыВыборки.ФронтСистема);
		Набор.Прочитать();
		
		Для Каждого Запись из Набор Цикл
			
			Запись.ДатаЗапретаПодключения = ТекущаяДатаСеанса();
			
		КонецЦикла;
		
		Набор.Записать();                                                                                                 
			
	Исключение
			
		СтрокаСообщенияОбОшибке = НСтр("ru = 'Не удалось сдвинуть дату запрета подключения к Micros: 
				|Описание ошибки: %1'");
		СтрокаСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщенияОбОшибке,
								ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
					
		ЗаписьЖурналаРегистрацииОбмена("Загрузка чеков Micros", СтрокаСообщенияОбОшибке, Истина);	
		
	КонецПопытки;
		
КонецПроцедуры

Процедура ЗаписьЖурналаРегистрацииОбмена(Событие, Комментарий, ЭтоОшибка = Ложь) Экспорт
	
	Уровень = ?(ЭтоОшибка, УровеньЖурналаРегистрации.Ошибка, УровеньЖурналаРегистрации.Информация);
	
	ЗаписьЖурналаРегистрации(Событие, Уровень,,, Комментарий);

КонецПроцедуры

//++ MRS-225
Функция ПолучитьАкцизныеМарки(ПараметрыВыборки, Пользователь)
	
	Возврат MRS_ЗагрузкаЕГАИСФронт.ПолучитьИОбработатьАкцизныеМаркиИзФронта(ПараметрыВыборки, Пользователь);
	
КонецФункции
//-- MRS-225
#КонецОбласти

