#Область СобытияФормы

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ЗаполнитьТаблицаКодирования();
КонецПроцедуры

&НаКлиенте
Процедура табПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура табПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура табПриАктивизацииСтроки(Элемент)
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		Элементы.ТаблицаКодирования.ТекущаяСтрока = Элемент.ТекущиеДанные.СтрокаТаблицыКодирования;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКодированияПриАктивизацииСтроки(Элемент)
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		Элементы.таб.ТекущаяСтрока = Элемент.ТекущиеДанные.СтрокаДерева;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура табДействиеПриИзменении(Элемент)
	Если НЕ ЗначениеЗаполнено(Элемент.Родитель.ТекущиеДанные.ИмяСУБД) Тогда
		Элемент.Родитель.ТекущиеДанные.Действие = "";
	Иначе
		Элемент.Родитель.ТекущиеДанные.Кодировать = НЕ ПустаяСтрока(Элемент.Родитель.ТекущиеДанные.Действие);
	КонецЕсли;
	ОбновитьСтрокуТаблицыКодирования(Элемент.Родитель.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура табДействиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если НЕ ЗначениеЗаполнено(Элемент.Родитель.ТекущиеДанные.ИмяСУБД) Тогда
		Элементы.табДействие.СписокВыбора.Очистить();
	ИначеЕсли Элемент.Родитель.ТекущиеДанные.ЭтоТаблица Тогда
		Элементы.табДействие.СписокВыбора.Очистить();
		Элементы.табДействие.СписокВыбора.Добавить("Очистить всю таблицу");
	Иначе
		Элементы.табДействие.СписокВыбора.Очистить();
		Если Лев(Элемент.Родитель.ТекущиеДанные.ПолноеИмяМД, 7) <> "Регистр" Тогда
			Элементы.табДействие.СписокВыбора.Добавить("ГУИД в поле");
		КонецЕсли;
		Элементы.табДействие.СписокВыбора.Добавить("Очистить поле");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура табКодироватьПриИзменении(Элемент)
	Если Элемент.Родитель.ТекущиеДанные.Кодировать Тогда
		Если НЕ ЗначениеЗаполнено(Элемент.Родитель.ТекущиеДанные.ИмяСУБД) Тогда
			Элемент.Родитель.ТекущиеДанные.Кодировать = "";
		ИначеЕсли Элемент.Родитель.ТекущиеДанные.ЭтоТаблица Тогда
			Элемент.Родитель.ТекущиеДанные.Действие = "Очистить всю таблицу";
		Иначе
			Если Элемент.Родитель.ТекущиеДанные.ИмяМД = "Наименование" Тогда
				Элемент.Родитель.ТекущиеДанные.Действие = "ГУИД в поле"; 
			Иначе
				Элемент.Родитель.ТекущиеДанные.Действие = "Очистить поле";
			КонецЕсли;
		КонецЕсли;
	Иначе
		Элемент.Родитель.ТекущиеДанные.Действие = "";
	КонецЕсли;
	ОбновитьСтрокуТаблицыКодирования(Элемент.Родитель.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьНастройки(Команда)
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогОткрытияФайла.Заголовок = "Выберите каталог и имя файла";
	ДиалогОткрытияФайла.Расширение = "txt";
	ДиалогОткрытияФайла.Фильтр = "Text(*.txt)";
	
	ДиалогОткрытияФайла.Показать(Новый ОписаниеОповещения("ПослеВосстановитьНастройки", ЭтотОбъект));
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	ЗаполнитьНаСервере();
	ЗаполнитьТаблицаКодирования();
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройкиВФайл(Команда)
	ДиалогСохраненияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогСохраненияФайла.Заголовок = "Выберите каталог и имя файла";
	ДиалогСохраненияФайла.Расширение = "txt";
	ДиалогСохраненияФайла.Фильтр = "Text(*.txt)";
	
	ДиалогСохраненияФайла.Показать(Новый ОписаниеОповещения("ПослеСохранитьНастройкиВФайл", ЭтотОбъект));
КонецПроцедуры

&НаКлиенте
Процедура Сформировать(Команда)
	ЗаполнитьТаблицаКодирования();
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ЗаполнитьНаСервере()
	Дерево = РеквизитФормыВЗначение("ДеревоОбъектов");
	Дерево.Строки.Очистить();
	тб = ПолучитьСтруктуруХраненияБазыДанных(, Истина);
	Для Каждого Итератор1 Из тб Цикл
		Если СтрНайти(Итератор1.ИмяТаблицы, ".") > 0 Тогда
			МассивИмени = СтрРазделить(Итератор1.ИмяТаблицы,".");
			Если МассивИмени[0] = "Документ" ИЛИ
				МассивИмени[0] = "Справочник" ИЛИ
				МассивИмени[0] = "ПланВидовХарактеристик" ИЛИ
				МассивИмени[0] = "РегистрСведений" ИЛИ
				МассивИмени[0] = "РегистрБухгалтерии" ИЛИ
				МассивИмени[0] = "РегистрНакопления" Тогда
				Если МассивИмени[0] = "Документ" Тогда
					Мета = Метаданные.Документы;
				ИначеЕсли МассивИмени[0] = "Справочник" Тогда
					Мета = Метаданные.Справочники;
				ИначеЕсли МассивИмени[0] = "ПланВидовХарактеристик" Тогда
					Мета = Метаданные.ПланыВидовХарактеристик;
				ИначеЕсли МассивИмени[0] = "РегистрСведений" Тогда
					Мета = Метаданные.РегистрыСведений;
				ИначеЕсли МассивИмени[0] = "РегистрБухгалтерии" Тогда
					Мета = Метаданные.РегистрыБухгалтерии;
				ИначеЕсли МассивИмени[0] = "РегистрНакопления" Тогда
					Мета = Метаданные.РегистрыНакопления;
				КонецЕсли;
				ТекСтрока = Дерево;
				ТекПолноеИмя = "";
				Для Каждого Итератор2 Из МассивИмени Цикл
					НС = ТекСтрока.Строки.Найти(Итератор2, "ИмяМД");
					ТекПолноеИмя = ТекПолноеИмя + ?(ЗначениеЗаполнено(ТекПолноеИмя), ".", "") + Итератор2;
					Если НС = Неопределено Тогда
						ТекСтрока = ТекСтрока.Строки.Добавить();
						ТекСтрока.ИмяМД = Итератор2;
						ТекСтрока.ПолноеИмяМД = ТекПолноеИмя;
					Иначе
						ТекСтрока = НС;
					КонецЕсли;
					НОМ = Неопределено;
					Попытка
						НОМ = Мета.Найти(ТекСтрока.ИмяМД);
					Исключение
					КонецПопытки;
					Если НОМ = Неопределено Тогда
						Попытка
							НОМ = Мета.ТабличныеЧасти.Найти(ТекСтрока.ИмяМД);
						Исключение
						КонецПопытки;
					КонецЕсли;
					Если НОМ <> Неопределено Тогда
						Мета = Ном;
					КонецЕсли;
				КонецЦикла;
				ТекСтрока.ЭтоТаблица = Истина;
				ТекСтрока.ИмяСУБД = Итератор1.ИмяТаблицыХранения;
				Для Каждого Итератор3 Из Итератор1.Поля Цикл
					
					НОМ = Неопределено;
					Попытка
						Если Итератор3.ИмяПоля = "Наименование" Тогда
							НОМ = Мета.СтандартныеРеквизиты.Наименование;
						ИначеЕсли Итератор3.ИмяПоля = "Код" Тогда
							НОМ = Мета.СтандартныеРеквизиты.Код;
						ИначеЕсли Итератор3.ИмяПоля = "Номер" Тогда
							НОМ = Мета.СтандартныеРеквизиты.Номер;
						ИначеЕсли Итератор3.ИмяПоля = "Дата" Тогда
							НОМ = Мета.СтандартныеРеквизиты.Дата;
						КонецЕсли;
					Исключение
					КонецПопытки;
					Если НОМ = Неопределено Тогда
						Попытка
							НОМ = Мета.Реквизиты.Найти(Итератор3.ИмяПоля);
						Исключение
						КонецПопытки;
						Если НОМ = Неопределено Тогда
							Попытка
								НОМ = Мета.Измерения.Найти(Итератор3.ИмяПоля);
							Исключение
							КонецПопытки;
						КонецЕсли;
						Если НОМ = Неопределено Тогда
							Попытка
								НОМ = Мета.Ресурсы.Найти(Итератор3.ИмяПоля);
							Исключение
							КонецПопытки;
						КонецЕсли;
					КонецЕсли;
					Если НОМ <> Неопределено Тогда
						Если Ном.Тип.СодержитТип(Тип("Строка")) Тогда
							НС = ТекСтрока.Строки.Добавить();
							НС.ИмяМД = Итератор3.ИмяПоля;
							НС.ИмяСУБД = Итератор3.ИмяПоляХранения;
							НС.ПолноеИмяМД = Итератор1.ИмяТаблицы + "." + НС.ИмяМД;
							Если Ном.Тип.СодержитТип(Тип("Строка")) Тогда
								НС.ДлинаСтроки = Ном.Тип.КвалификаторыСтроки.Длина;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Итератор Из ТаблицаКодирования Цикл
		НС = Дерево.Строки.Найти(Итератор.ПолноеИмяМД, "ПолноеИмяМД", Истина);
		Если НС <> Неопределено Тогда
			НС.Кодировать = Истина;
			НС.Действие = Итератор.Действие;
		КонецЕсли;
	КонецЦикла;
	ЗначениеВРеквизитФормы(Дерево, "ДеревоОбъектов");
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицаКодирования()
	ТаблицаКодирования.Очистить();
	Для Каждого Итератор1 Из ДеревоОбъектов.ПолучитьЭлементы() Цикл
		ОбъектМД = Итератор1.ИмяМД;
		Для Каждого Итератор2 Из Итератор1.ПолучитьЭлементы() Цикл
			Если Итератор2.Кодировать И Итератор2.Действие = "Очистить всю таблицу" Тогда
				НС = ТаблицаКодирования.Добавить();
				НС.ИмяТаблицы = Итератор2.ПолноеИмяМД;
				НС.ПолноеИмяМД = Итератор2.ПолноеИмяМД;
				НС.ИмяТаблицыСУБД = Итератор2.ИмяСУБД;
				НС.Действие = Итератор2.Действие;
				НС.СтрокаДерева = Итератор2.ПолучитьИдентификатор();
				Итератор2.СтрокаТаблицыКодирования = НС.ПолучитьИдентификатор();
			КонецЕсли;
			Для Каждого Итератор3 Из Итератор2.ПолучитьЭлементы() Цикл
				//реквизиты основные
				Если Итератор3.Кодировать Тогда
					Если Итератор3.Действие = "Очистить всю таблицу" Тогда
						НС = ТаблицаКодирования.Добавить();
						НС.ИмяТаблицы = Итератор3.ПолноеИмяМД;
						НС.ПолноеИмяМД = Итератор3.ПолноеИмяМД;
						НС.ИмяТаблицыСУБД = Итератор3.ИмяСУБД;
						НС.Действие = Итератор3.Действие;
						НС.СтрокаДерева = Итератор3.ПолучитьИдентификатор();
						Итератор3.СтрокаТаблицыКодирования = НС.ПолучитьИдентификатор();
					Иначе
						НС = ТаблицаКодирования.Добавить();
						НС.ИмяТаблицы = Итератор2.ПолноеИмяМД;
						НС.ПолноеИмяМД = Итератор3.ПолноеИмяМД;
						НС.ИмяТаблицыСУБД = Итератор2.ИмяСУБД;
						НС.ИмяРеквизитаСУБД = Итератор3.ИмяСУБД;
						НС.Действие = Итератор3.Действие;
						НС.ДлинаСтроки = Итератор3.ДлинаСтроки;
						НС.СтрокаДерева = Итератор3.ПолучитьИдентификатор();
						Итератор3.СтрокаТаблицыКодирования = НС.ПолучитьИдентификатор();
					КонецЕсли;
				КонецЕсли;
				Для Каждого Итератор4 Из Итератор3.ПолучитьЭлементы() Цикл
					//реквизиты табличной части
					Если Итератор4.Кодировать Тогда
						НС = ТаблицаКодирования.Добавить();
						НС.ИмяТаблицы = Итератор3.ПолноеИмяМД;
						НС.ПолноеИмяМД = Итератор4.ПолноеИмяМД;
						НС.ИмяТаблицыСУБД = Итератор3.ИмяСУБД;
						НС.ИмяРеквизитаСУБД = Итератор4.ИмяСУБД;
						НС.Действие = Итератор4.Действие;
						НС.ДлинаСтроки = Итератор4.ДлинаСтроки;
						НС.СтрокаДерева = Итератор4.ПолучитьИдентификатор();
						Итератор4.СтрокаТаблицыКодирования = НС.ПолучитьИдентификатор();
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	ЗаполнитьТекстЗапросаНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТекстЗапросаНаСервере()
	
	ТекстЗапроса = "";
	
	МассивИменТаблицСУБД = Новый Массив;
	
	Для Каждого Итератор1 Из ТаблицаКодирования Цикл
		Если МассивИменТаблицСУБД.Найти(Итератор1.ИмяТаблицыСУБД) = Неопределено Тогда
			МассивИменТаблицСУБД.Добавить(Итератор1.ИмяТаблицыСУБД);
		Иначе
			Продолжить;
		КонецЕсли;;
		НС = ТаблицаКодирования.НайтиСтроки(Новый Структура("ИмяТаблицыСУБД", Итератор1.ИмяТаблицыСУБД));
		ТекстЗапросаUPDATE = "";
		ТекстЗапросаTRUNCATE = "";

		ДобавитьЗапятую = Ложь;
		Для Каждого Итератор2 Из НС Цикл
			Если ДобавитьЗапятую Тогда
				ТекстЗапросаUPDATE = ТекстЗапросаUPDATE + ",";
			КонецЕсли;
			Если Итератор2.Действие = "ГУИД в поле" Тогда
				Если Итератор2.ДлинаСтроки > 0 Тогда
					ТекстЗапросаUPDATE = ТекстЗапросаUPDATE + "
					|["+ Итератор2.ИмяРеквизитаСУБД+"] = left(replace(convert(char(36),cast([_IDRRef] as uniqueidentifier)),'-',''), " + Итератор2.ДлинаСтроки + ")";
				Иначе
					ТекстЗапросаUPDATE = ТекстЗапросаUPDATE + "
					|["+ Итератор2.ИмяРеквизитаСУБД+"] = replace(convert(char(36),cast([_IDRRef] as uniqueidentifier)),'-','')";
				КонецЕсли;
			ИначеЕсли Итератор2.Действие = "Очистить поле" Тогда
				ТекстЗапросаUPDATE = ТекстЗапросаUPDATE + "
				|["+ Итератор2.ИмяРеквизитаСУБД+"] = ''";
			ИначеЕсли Итератор2.Действие = "Очистить всю таблицу" Тогда
				ТекстЗапросаTRUNCATE = "
				|--  обезличивание  " + Итератор1.ИмяТаблицы + "
				|TRUNCATE TABLE ["+ Итератор2.ИмяТаблицыСУБД+"]";
			КонецЕсли;
			ДобавитьЗапятую = Истина;
		КонецЦикла;
		Если ЗначениеЗаполнено(ТекстЗапросаTRUNCATE) Тогда
			ТекстЗапроса = ТекстЗапроса + ТекстЗапросаTRUNCATE + ";";
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекстЗапросаUPDATE) Тогда
			ТекстЗапроса = ТекстЗапроса  + "  
					|--  обезличивание  " + Итератор1.ИмяТаблицы + "
					| UPDATE " + Итератор1.ИмяТаблицыСУБД+" 
					| SET " + ТекстЗапросаUPDATE + ";";
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтрокуТаблицыКодирования(СтрокаДерева)
	Если СтрокаДерева.ПолучитьРодителя() = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СтруктураСтроки = Новый Структура();
	Если СтрокаДерева.ЭтоТаблица Тогда
		СтруктураСтроки.Вставить("ИмяТаблицы", СтрокаДерева.ПолноеИмяМД);
		СтруктураСтроки.Вставить("ИмяТаблицыСУБД", СтрокаДерева.ИмяСУБД);
		СтруктураСтроки.Вставить("ИмяРеквизитаСУБД", "");
		СтруктураСтроки.Вставить("ИмяРеквизита", "");
	Иначе
		СтруктураСтроки.Вставить("ИмяТаблицы", СтрокаДерева.ПолучитьРодителя().ПолноеИмяМД);
		СтруктураСтроки.Вставить("ИмяТаблицыСУБД", СтрокаДерева.ПолучитьРодителя().ИмяСУБД);
		СтруктураСтроки.Вставить("ИмяРеквизитаСУБД", СтрокаДерева.ИмяСУБД);
		СтруктураСтроки.Вставить("ИмяРеквизита", СтрокаДерева.ИмяМД);
	КонецЕсли;
	СтруктураСтроки.Вставить("ПолноеИмяМД", СтрокаДерева.ПолноеИмяМД);
	СтруктураСтроки.Вставить("Кодировать", СтрокаДерева.Кодировать);
	СтруктураСтроки.Вставить("Действие", СтрокаДерева.Действие);
	СтруктураСтроки.Вставить("ДлинаСтроки", СтрокаДерева.ДлинаСтроки);
	СтруктураСтроки.Вставить("СтрокаДерева", Элементы.таб.ТекущаяСтрока);
	
	МассивСтрок = ТаблицаКодирования.НайтиСтроки(Новый Структура("ИмяТаблицыСУБД, ИмяРеквизитаСУБД", СтруктураСтроки.ИмяТаблицыСУБД, СтруктураСтроки.ИмяРеквизитаСУБД));
	Если СтрокаДерева.Кодировать И ЗначениеЗаполнено(СтрокаДерева.Действие) Тогда
		Если МассивСтрок.Количество() = 0 Тогда
			СтрокаТаблицыКодирования = ТаблицаКодирования.Добавить();
		Иначе
			СтрокаТаблицыКодирования = МассивСтрок[0];
		Конецесли;
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыКодирования, СтруктураСтроки);
		СтрокаДерева.СтрокаТаблицыКодирования = СтрокаТаблицыКодирования.ПолучитьИдентификатор();
	Иначе
		Для Каждого Итератор Из МассивСтрок Цикл
			ТаблицаКодирования.Удалить(Итератор);
		КонецЦикла;
	Конецесли;
	ЗаполнитьТекстЗапросаНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохранитьНастройкиВФайл(ИмяФайла, Параметры) Экспорт
	Если ИмяФайла <> Неопределено Тогда
		ТД = Новый ТекстовыйДокумент;
		ТД.ДобавитьСтроку(ВернутьЗначениеВСтрокуВнутр());
		ТД.Записать(ИмяФайла[0]);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ВернутьЗначениеВСтрокуВнутр()
	ОбъектСериализации = РеквизитФормыВЗначение("ТаблицаКодирования");
	Возврат ЗначениеВСтрокуВнутр(ОбъектСериализации);
КонецФункции

&НаКлиенте
Процедура ПослеВосстановитьНастройки(ИмяФайла, Параметры) Экспорт
	Если ИмяФайла <> Неопределено Тогда
		ТД = Новый ТекстовыйДокумент;
		ТД.Прочитать(ИмяФайла[0]);
		Если ОбработатьЗначениеИзСтрокиВнутр(ТД.ПолучитьТекст()) Тогда
			ЗаполнитьТаблицаКодирования();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ОбработатьЗначениеИзСтрокиВнутр(Строка)
	Попытка
		ОбъектСериализации = ЗначениеИзСтрокиВнутр(Строка);
		Дерево = РеквизитФормыВЗначение("ДеревоОбъектов");
		Для Каждого Итератор Из ОбъектСериализации Цикл
			НС = Дерево.Строки.Найти(Итератор.ПолноеИмяМД, "ПолноеИмяМД", Истина);
			Если НС <> Неопределено Тогда
				НС.Кодировать = Истина;
				НС.Действие = Итератор.Действие;
			КонецЕсли;
		КонецЦикла;
		ЗначениеВРеквизитФормы(Дерево,  "ДеревоОбъектов");
	Исключение
		Возврат Ложь;
	КонецПопытки;
	Возврат Истина;
КонецФункции
