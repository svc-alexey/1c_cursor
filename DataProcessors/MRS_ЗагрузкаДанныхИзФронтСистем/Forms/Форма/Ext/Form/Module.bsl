#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных
	Перем мЕдиницаИзмерения; 
	Перем мСтавкаНДС;
	Перем мТаблицаСтавокНДС;
	Перем мТокен;
#КонецОбласти

#Область ПрограммныйИнтерфейс

Процедура ВыполнитьЗагрузкуДанных() Экспорт
	
	Если ФронтСистема = Перечисления.ПЛ_ТипыФронтСистем.TNG Тогда
		
		MRS_МенеджерОбменаTNG.ВыполнитьЗагрузкуДанныхTNG(ФронтСистема, НачалоПериода, КонецПериода, ПараметрыКасс, НомерЧека);
		
	Иначе
		
		MRS_МенеджерОбменаMicros.ВыполнитьЗагрузкуДанныхMicros(ФронтСистема, НачалоПериода, КонецПериода, НомерЧека, ПараметрыКасс);	
		
	КонецЕсли;	
	
	
КонецПроцедуры 

Процедура ПолучитьОтчетСверки(СтруктураОтбора) Экспорт
	
	Отчет = Отчеты.MRS_ПродажиФронтСистем.Создать();
	
	Если ФронтСистема = Перечисления.ПЛ_ТипыФронтСистем.TNG Тогда
		
		СхемаКомпоновкиДанных = Отчет.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных"); //для TNG
		
		ТаблицаДанных = MRS_МенеджерОбменаTNG.ВыполнитьПолучениеДанныхTNG(ФронтСистема, НачалоПериода, КонецПериода, ПараметрыКасс, НомерЧека);
		
		ВнешнийНаборДанных = Новый Структура("ТаблицаЗначений", ТаблицаДанных);
		
		Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
		
		ДобавитьОтборыВОтчет(Настройки, СтруктураОтбора, ФронтСистема);
		
	Иначе
		
		СхемаКомпоновкиДанных = Отчет.ПолучитьМакет("СхемаКомпоновкиMicros");
		
		ТаблицаЗначенийMicros = MRS_МенеджерОбменаMicros.ВыполнитьПолучениеДанныхMicros(ФронтСистема, НачалоПериода, КонецПериода, НомерЧека, ПараметрыКасс);
		
		ВнешнийНаборДанных = Новый Структура("ТаблицаЗначенийMicros", ТаблицаЗначенийMicros);
		
		Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
		
		ДобавитьОтборыВОтчет(Настройки, СтруктураОтбора, ФронтСистема);
		
	КонецЕсли;
	
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных; 
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных; 
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешнийНаборДанных, ДанныеРасшифровки);
	
	ОтчетСверка.Очистить();
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент; 
	ПроцессорВывода.УстановитьДокумент(ОтчетСверка); 
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
КонецПроцедуры

Процедура ДобавитьОтборыВОтчет(Настройки, СтруктураОтбора, ФронтСистема)

	// Если есть хоть один активный отбор, создаем группу "ИЛИ" (или "И" — см. ниже)
		Если СтруктураОтбора.ВсеОтклонения Или СтруктураОтбора.ЧекНеНайден Или СтруктураОтбора.ЧекиАлкоголь Или СтруктураОтбора.ОтклоненияПоСумме Или СтруктураОтбора.НоменклатураНеЗаполнена Тогда
			
			// Создаем группу с типом "ИЛИ" для комбинирования условий
			ГруппаОтбора = Настройки.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
			ГруппаОтбора.Использование = Истина;

			// Все отклонения (комбинация всех условий)
			Если СтруктураОтбора.ВсеОтклонения Тогда
				// Нет чека общепита
				ЭлементОтбораКасса = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбораКасса.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЧекОбщепита");
				ЭлементОтбораКасса.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
				ЭлементОтбораКасса.Использование = Истина;

				// Не заполнена номенклатура
				ЭлементОтбораЧек = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбораЧек.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НоменклатураЧекОбщепита");
				ЭлементОтбораЧек.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
				ЭлементОтбораЧек.Использование = Истина;
				
				Если ФронтСистема <> Перечисления.ПЛ_ТипыФронтСистем.TNG Тогда 
					// Чеки с алкоголем 
					ЭлементОтбораАлкоголь = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					ЭлементОтбораАлкоголь.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НоменклатураАлкогольВЛитрах");
					ЭлементОтбораАлкоголь.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
					ЭлементОтбораАлкоголь.ПравоеЗначение = Истина;
					ЭлементОтбораАлкоголь.Использование = Истина;
				КонецЕсли;
				
				// Отклонения по сумме
				ЭлементОтбораСумма = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбораСумма.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РазницаСумм");
				ЭлементОтбораСумма.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
				ЭлементОтбораСумма.ПравоеЗначение = 0;
				ЭлементОтбораСумма.Использование = Истина;
			Иначе
				// Индивидуальные отборы
				Если СтруктураОтбора.ЧекНеНайден Тогда
					ЭлементОтбораКасса = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					ЭлементОтбораКасса.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЧекОбщепита");
					ЭлементОтбораКасса.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
					ЭлементОтбораКасса.Использование = Истина;
				КонецЕсли;

				Если СтруктураОтбора.ЧекиАлкоголь и ФронтСистема <> Перечисления.ПЛ_ТипыФронтСистем.TNG Тогда
					ЭлементОтбораАлкоголь = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					ЭлементОтбораАлкоголь.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НоменклатураАлкогольВЛитрах");
					ЭлементОтбораАлкоголь.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
					ЭлементОтбораАлкоголь.ПравоеЗначение = Истина;
					ЭлементОтбораАлкоголь.Использование = Истина;
				КонецЕсли;

				Если СтруктураОтбора.ОтклоненияПоСумме Тогда
					ЭлементОтбораСумма = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					ЭлементОтбораСумма.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РазницаСумм");
					ЭлементОтбораСумма.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
					ЭлементОтбораСумма.ПравоеЗначение = 0;
					ЭлементОтбораСумма.Использование = Истина;
				КонецЕсли;

				Если СтруктураОтбора.НоменклатураНеЗаполнена Тогда
					ЭлементОтбораЧек = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					ЭлементОтбораЧек.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НоменклатураЧекОбщепита");
					ЭлементОтбораЧек.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
					ЭлементОтбораЧек.Использование = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	
КонецПроцедуры

// Загружает в ТЧ обработки кассы ККМ кассовых узлов
Процедура ЗагрузитьПараметрыФормы() Экспорт
	
	ПараметрыКасс.Очистить();
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КассыККМ.Ссылка КАК Ссылка,
	|	ПЛ_СоответствиеСФронтСистемами.ФронтСистема КАК ФронтСистема,
	|	ПЛ_СоответствиеСФронтСистемами.Код КАК Код,
	|	ПЛ_СоответствиеСФронтСистемами.НаименованиеКнопки КАК НаименованиеКнопки
	|ПОМЕСТИТЬ ВременнаяТаблица
	|ИЗ
	|	Справочник.КассыККМ КАК КассыККМ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПЛ_СоответствиеСФронтСистемами КАК ПЛ_СоответствиеСФронтСистемами
	|		ПО КассыККМ.Ссылка = ПЛ_СоответствиеСФронтСистемами.Объект.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЛОЖЬ КАК Использовать,
	|	ВременнаяТаблица.Ссылка КАК КассаККМ,
	|	ВременнаяТаблица.ФронтСистема КАК ФронтСистема,
	|	ВременнаяТаблица.Код КАК КодТочкиПродаж,
	|	ВременнаяТаблица.НаименованиеКнопки КАК НаименованиеТочкиПродаж
	|ИЗ
	|	ВременнаяТаблица КАК ВременнаяТаблица
	|ГДЕ
	|	ВременнаяТаблица.ФронтСистема В(&ФронтСистема)
	|
	|УПОРЯДОЧИТЬ ПО
	|	КассаККМ";
	
	ФронтСистемаМассив = Новый Массив;
	ФронтСистемаМассив.Добавить(Перечисления.ПЛ_ТипыФронтСистем.TNG); // TNG
	ФронтСистемаМассив.Добавить(Перечисления.ПЛ_ТипыФронтСистем.Micros);
	
	Если ЗначениеЗаполнено(ФронтСистема) Тогда
		
		Запрос.УстановитьПараметр("ФронтСистема", ФронтСистема);
		
	Иначе
		
		Запрос.УстановитьПараметр("ФронтСистема", ФронтСистемаМассив);
		
	КонецЕсли;
	
	ПараметрыКасс.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

Функция ВосстановитьОбщиеНастройки() Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);

	СтурктураИзХранилища = Новый Структура;
	СтурктураИзХранилища.Вставить("КлючОбъекта", "MRS_ЗагрузкаДанныхИзФронтСистем");
	СтурктураИзХранилища.Вставить("КлючНастроек", "ОбщиеНастройкиОбработки_ОФД");
	
	ДанныеИзХранилища = ВосстановитьНастройкиИзХранилища(СтурктураИзХранилища); 
	
	СтруктураВозврата = Новый Структура;
	
	Если ДанныеИзХранилища <> Неопределено Тогда 
		Для Каждого Настройка из ДанныеИзХранилища Цикл
			СтруктураВозврата.Вставить("Токен", 						Настройка.Соответствие.Получить("Токен"));
			СтруктураВозврата.Вставить("Организация", 					ПолучитьXMLЗначениеСтроки(Тип("СправочникСсылка.Организации"),	Настройка.Соответствие.Получить("Организация")));
			СтруктураВозврата.Вставить("Склад", 						ПолучитьXMLЗначениеСтроки(Тип("СправочникСсылка.Склады"),		Настройка.Соответствие.Получить("Склад")));
			СтруктураВозврата.Вставить("ВариантЗагрузкиЧеков", 			Настройка.Соответствие.Получить("ВариантЗагрузкиЧеков"));
			СтруктураВозврата.Вставить("СворачиватьСтрокиВОдну", 		ПолучитьЗначениеНастройки("СворачиватьСтрокиВОдну",Настройка,Ложь));
		КонецЦикла;
	КонецЕсли;                        

	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция ПолучитьXMLЗначениеСтроки(Тип,Значение, ИмяРеквизита="")
	Если Значение = Неопределено Тогда
		Если ИмяРеквизита = "СчетКасса" Тогда
			Возврат ПланыСчетов.Хозрасчетный.НайтиПоКоду("50.01");
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Возврат XMLЗначение(Тип,Значение);
	КонецЕсли;
КонецФункции // ПолучитьXMLЗначениеСтроки()

Функция ВосстановитьНастройкиИзХранилища(СтруктураДанных) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	КлючОбъекта  = СтруктураДанных.КлючОбъекта;
	КлючНастроек = СтруктураДанных.КлючНастроек;
	
	ДанныеJson = Неопределено;
	Попытка
		Настройка = ХранилищеОбщихНастроек.Загрузить(КлючОбъекта,КлючНастроек,,ИмяПользователя());
		Если Настройка <> Неопределено Тогда 
			ДанныеJson = ПолучитьСтрокуИзДвоичныхДанных(Настройка,КодировкаТекста.UTF8);
		КонецЕсли;
	Исключение
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;
	
	Если ДанныеJson <> Неопределено Тогда 
		ЧтениеJSON = Новый ЧтениеJSON();
		ЧтениеДанных = Новый ЧтениеДанных(Настройка);
		ЧтениеJSON.ОткрытьПоток(ЧтениеДанных.ИсходныйПоток());
		СтруктураНастроек = ПрочитатьJSON(ЧтениеJSON,Истина);
		
		Массив = Новый Массив;
		Для каждого Настройка из СтруктураНастроек Цикл  
			Для каждого СтрокаНастройки из Настройка Цикл
				Массив.Добавить(Новый Структура(СтрокаНастройки.Ключ,СтрокаНастройки.Значение));
			КонецЦикла; 
		КонецЦикла;  
		
		Возврат Массив; 
		
	КонецЕсли;           
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Неопределено;	 
	
КонецФункции

Функция ВосстановитьНастройкиКасс() Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтурктураИзХранилища = Новый Структура;
	СтурктураИзХранилища.Вставить("КлючОбъекта", "MRS_ЗагрузкаДанныхИзФронтСистем");   
	СтурктураИзХранилища.Вставить("КлючНастроек", "НастройкиКасс_LKK");
		
	ДанныеИзХранилища = ВосстановитьНастройкиИзХранилища(СтурктураИзХранилища); 
	
	Если ДанныеИзХранилища <> Неопределено Тогда
		СоответствиеНастроекПоКассам = Новый Соответствие;
		Для Каждого Настройка из ДанныеИзХранилища Цикл 
			Структура = Новый Структура;
			Структура.Вставить("РегИмя",						Настройка.Соответствие.Получить("РегИмя"));
			Структура.Вставить("РегНомер",						Настройка.Соответствие.Получить("РегНомер"));
			Структура.Вставить("Организация",					ПолучитьXMLЗначениеСтроки(Тип("СправочникСсылка.Организации"),	Настройка.Соответствие.Получить("Организация")));
			Структура.Вставить("Токен", 						Настройка.Соответствие.Получить("Токен"));
			
			//склад
			СкладНастройки = ПолучитьXMLЗначениеСтроки(Тип("СправочникСсылка.Склады"),		Настройка.Соответствие.Получить("Склад"));
			Структура.Вставить("Склад",							СкладНастройки);
			
			СоответствиеФронтаКассы = ПолучитьСоответсвиеКассыСкладу(СкладНастройки);
			
			Структура.Вставить("КассаККМ", СоответствиеФронтаКассы.КассаККМ);
			Структура.Вставить("СкладККМ", СоответствиеФронтаКассы.СкладККМ);
			Структура.Вставить("ФронтСистема", СоответствиеФронтаКассы.ФронтСистема);
			Структура.Вставить("КодТочкиПродаж", СоответствиеФронтаКассы.КодТочкиПродаж);
			Структура.Вставить("НаименованиеТочкиПродаж", СоответствиеФронтаКассы.НаименованиеТочкиПродаж);
			
			СоответствиеНастроекПоКассам.Вставить(Настройка.Соответствие.Получить("РегНомер"),Структура);
		КонецЦикла;
	КонецЕсли;   
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат СоответствиеНастроекПоКассам;
	
КонецФункции

Функция ПолучитьСоответсвиеКассыСкладу(Склад)
	
	СтруктураВозврата = Новый Структура;
	
		лТекст = "
		|ВЫБРАТЬ
		|	КассыККМ.Ссылка КАК Ссылка,
		|	ПЛ_СоответствиеСФронтСистемами.ФронтСистема КАК ФронтСистема,
		|	ПЛ_СоответствиеСФронтСистемами.Код КАК Код,
		|	ПЛ_СоответствиеСФронтСистемами.НаименованиеКнопки КАК НаименованиеКнопки
		|ПОМЕСТИТЬ ВременнаяТаблица
		|ИЗ
		|	Справочник.КассыККМ КАК КассыККМ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПЛ_СоответствиеСФронтСистемами КАК ПЛ_СоответствиеСФронтСистемами
		|		ПО (КассыККМ.Ссылка = ПЛ_СоответствиеСФронтСистемами.Объект.Ссылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблица.Ссылка КАК КассаККМ,
		|	ВременнаяТаблица.Ссылка.Склад КАК СкладККМ,
		|	ВременнаяТаблица.ФронтСистема КАК ФронтСистема,
		|	ВременнаяТаблица.Код КАК КодТочкиПродаж,
		|	ВременнаяТаблица.НаименованиеКнопки КАК НаименованиеТочкиПродаж
		|ИЗ
		|	ВременнаяТаблица КАК ВременнаяТаблица
		|ГДЕ
		|	ВременнаяТаблица.Ссылка.Склад = &Склад
		|";

	лЗапрос = Новый Запрос(лТекст);
	лЗапрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	// Установка параметров.
	лЗапрос.УстановитьПараметр("Склад", Склад);

	лВыборка = лЗапрос.Выполнить().Выбрать();

	Пока лВыборка.Следующий() Цикл
		
		СтруктураВозврата.Вставить("КассаККМ", лВыборка.КассаККМ);
		СтруктураВозврата.Вставить("СкладККМ", лВыборка.СкладККМ);
		СтруктураВозврата.Вставить("ФронтСистема", лВыборка.ФронтСистема);
		СтруктураВозврата.Вставить("КодТочкиПродаж", лВыборка.КодТочкиПродаж);
		СтруктураВозврата.Вставить("НаименованиеТочкиПродаж", лВыборка.НаименованиеТочкиПродаж);

	КонецЦикла;
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция ПолучитьЗначениеНастройки(ИмяПеременной,Настройка,ЗначениеЕслиНеопределено)
	Значение = Настройка.Соответствие.Получить(ИмяПеременной);
	Если Значение = Неопределено Тогда 
		Возврат ЗначениеЕслиНеопределено;
	Иначе
		Возврат Значение;
	КонецЕсли;
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

 
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

 

#КонецОбласти

#КонецЕсли

Функция ПолучитьДерево()
	
	Дерево = Новый ДеревоЗначений;
	Таблица = ЭтотОбъект.ТаблицаДокументов.Выгрузить();
	ОписаниеТипаСписка = Новый ОписаниеТипов("СписокЗначений");
	Для каждого Колонка из Таблица.Колонки Цикл 
		Дерево.Колонки.Добавить(Колонка.Имя,?(Колонка.Имя = "Документы",ОписаниеТипаСписка,Колонка.ТипЗначения));
	КонецЦикла;                                                  
	
	Возврат Дерево;
	
КонецФункции     

////////////////////////////////////////////////////////////////////////////////

Процедура СформироватьДвоичныеДанныеПодменJSON(СтруктураДанных) Экспорт 

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, СтруктураДанных.МассивСтруктурДляСохранения);     
	
    КлючОбъекта  = СтруктураДанных.КлючОбъекта;
    КлючНастроек = СтруктураДанных.КлючНастроек; 
	
	Настройка = ПолучитьДвоичныеДанныеИзСтроки(ЗаписьJSON.Закрыть(),КодировкаТекста.UTF8);
	
	ХранилищеОбщихНастроек.Сохранить(КлючОбъекта,КлючНастроек,Настройка); 
		
КонецПроцедуры      



//&НаКлиенте
//ClientKkts - Получение списка ККТ
//	GET https://ofv-api-v0-1-1.evotor.ru/v1/client/kkts
//	Token: {TOKEN}        
Функция ClientKkts() Экспорт

	ПараметрыЗапроса = ПолучитьШаблонПараметровЗапроса();
	
	СтрокаЗапроса = "/v1/client/kkts";
			
	СтруктураОтвета = ПолучитьШаблонСтруктурыОтвета();
	
	Запрос = Новый HTTPЗапрос(СтрокаЗапроса, ПараметрыЗапроса.Заголовки);    	
	
	Ответ = ПараметрыЗапроса.Соединение.Получить(Запрос);
	СтруктураОтвета = ОбработатьОтвет(Ответ, СтруктураОтвета); 
	
	Возврат СтруктураОтвета;     

КонецФункции

//GetAllDocs - Получение всех видов документов за период
//	GET https://ofv-api-v0-1-1.evotor.ru/v1/client/{KKT_REG_ID}/all-documents?dateFrom={DATE_FROM}&dateTo={DATE_TO}
//	Token: {TOKEN}
//		*период в запросе - не ограничено
//		*максимальная дата документа: 5 лет для всех док-в (кроме чеков);  2 года для чеков
//		*максимальное кол-во док-в в ответе - не ограничено
Функция GetAllDocs(РегистрационныйНомерККТ,ДатаНачала,ДатаОкончания) Экспорт

	СтруктураОтвета = ПолучитьДанныеПоДокументам("all-documents",РегистрационныйНомерККТ,ДатаНачала,ДатаОкончания);
	
	Возврат СтруктураОтвета;     

КонецФункции

//GetZReports - Получение списка Z-отчетов за период
//	GET https://ofv-api-v0-1-1.evotor.ru/v1/client/{KKT_REG_ID}/z-reports?dateFrom={DATE_FROM}&dateTo={DATE_TO}
//	Token: {TOKEN} 
//		*период в запросе 30 дней
//		*максимальная дата документа - за все время
//		*макс док-в в ответе - не ограничено
Функция GetZReports(РегистрационныйНомерККТ,Знач ДатаНачала,Знач ДатаОкончания) Экспорт
	
	СтруктураОтвета = ПолучитьДанныеПоДокументам("z-reports",РегистрационныйНомерККТ,ДатаНачала,КонецДня(ДатаОкончания+1));
	
	Возврат СтруктураОтвета;     

КонецФункции

//GetReceipts - Получение чеков за период; Получение чеков за период по дате их поступления в ОФД    
//	GET https://ofv-api-v0-1-1.evotor.ru/v1/client/{KKT_REG_ID}/receipts?dateFrom={DATE_FROM}&dateTo={DATE_TO}
//	Token: {TOKEN}   
//	Получение чеков за период
//		*период в запросе 7 дней
//		*максимальная дата документа: 2 года от текущей даты
//		*максимальное кол-во док-в в ответе 5000 шт
//	Получение чеков за период по дате их поступления в ОФД
//		*период в запросе 7 дней
//		*максимальная дата документа: 2 года от текущей базы
//		*макс док-в в ответе 5000 шт
Функция GetReceipts(РегистрационныйНомерККТ,ДатаНачала,ДатаОкончания) Экспорт

	СтруктураОтвета = ПолучитьДанныеПоДокументам("receipts",РегистрационныйНомерККТ,ДатаНачала,ДатаОкончания);
	
	Возврат СтруктураОтвета;     

КонецФункции

Функция ПолучитьДанныеПоДокументам(Команда,РегистрационныйНомерККТ = Неопределено,ДатаНачала,ДатаОкончания)

	ПараметрыЗапроса = ПолучитьШаблонПараметровЗапроса();
	
	СтрокаЗапроса = "/v1/client/" + РегистрационныйНомерККТ + "/" + Команда;
	
	dateFrom = Формат(ДатаНачала, 		"ДФ=yyyy-MM-dd%20ЧЧ:мм:сс");//ЗаписатьДатуJSON(ДатаНачала, ФорматДатыJSON.ISO, ВариантЗаписиДатыJSON.УниверсальнаяДата);
	dateTo   = Формат(ДатаОкончания, 	"ДФ=yyyy-MM-dd%20ЧЧ:мм:сс");//ЗаписатьДатуJSON(ДатаОкончания, ФорматДатыJSON.ISO, ВариантЗаписиДатыJSON.УниверсальнаяДата); 
	
	ПараметрыЗапроса.Параметры.Вставить("dateFrom",	dateFrom);
	ПараметрыЗапроса.Параметры.Вставить("dateTo",	dateTo);

	Счетчик = 1;
	Для Каждого ПараметрЗапроса из ПараметрыЗапроса.Параметры Цикл
		Если НЕ ПараметрЗапроса.Значение = Неопределено И НЕ ПараметрЗапроса.Значение = Null И НЕ ПараметрЗапроса.Значение = "null" И НЕ ПараметрЗапроса.Значение = "Null" Тогда
			СтрокаЗапроса = СтрокаЗапроса + ?(Счетчик = 1, "?", ?(Счетчик = ПараметрыЗапроса.Количество(), "", "&")) + СтрЗаменить(СтрЗаменить(ПараметрЗапроса.Ключ, ">", ""), "<", "") + "=" +ПараметрЗапроса.Ключ + "~chng~;";
		КонецЕсли;	
		Счетчик = Счетчик + 1;
	КонецЦикла;
	
	СтрокаЗапроса = ЗаполнитьПараметрыВЗапросе(СтрокаЗапроса, ПараметрыЗапроса.Параметры);

	СтруктураОтвета = ПолучитьШаблонСтруктурыОтвета();
	
	Запрос = Новый HTTPЗапрос(СтрокаЗапроса, ПараметрыЗапроса.Заголовки);    	
	
	Ответ = ПараметрыЗапроса.Соединение.Получить(Запрос);
	СтруктураОтвета = ОбработатьОтвет(Ответ, СтруктураОтвета); 

	Возврат СтруктураОтвета;     

КонецФункции 

Функция ЗаполнитьПараметрыВЗапросе(СтрокаЗапроса, Параметры) Экспорт
	
	Для Каждого Параметр из Параметры Цикл
		
		СтрокаЗапроса = СтрЗаменить(СтрокаЗапроса, Параметр.Ключ + "~chng~", Параметр.Значение);
		
	КонецЦикла;	
	
	Возврат СтрокаЗапроса;
	
КонецФункции

// Функция подготавливает шаблон параметров запроса
//&НаКлиенте
Функция ПолучитьШаблонПараметровЗапроса() Экспорт
	
	Структура = Новый Структура;
	
	Структура.Вставить("Соединение", 	ПолучитьСоединение());
	Структура.Вставить("Заголовки", 	ПолучитьЗаголовки());
	Структура.Вставить("Параметры", 	Новый Соответствие);
	
	Возврат Структура;
	
КонецФункции

Функция ПолучитьЗаголовки()
	
    КлючОбъекта  = "MRS_ЗагрузкаДанныхИзФронтСистем";
    КлючНастроек = "Token_LKK";
	
	Если мТокен = Неопределено Тогда 
		Токен = ХранилищеОбщихНастроек.Загрузить(КлючОбъекта,КлючНастроек,,ИмяПользователя());
	Иначе 
		Токен = мТокен;
	КонецЕсли;  
	
	Заголовки = Новый Соответствие;     
	Заголовки.Вставить("Token", Токен);
	
	Возврат Заголовки;
	
КонецФункции

Функция ПолучитьСоединение()
	
	ssl = Новый ЗащищенноеСоединениеOpenSSL(Неопределено, Новый СертификатыУдостоверяющихЦентровОС()); 		
	
	Соединение  =  Новый HTTPСоединение("ofv-api-v0-1-1.evotor.ru", //сервер
		,		//порт
		,		//логин
		,		//пароль
		,		//прокси
		60,		//таймаут
		ssl,
		);	//защищенное HTTPS соединение
	
	Возврат Соединение;
	
КонецФункции

// Функция подготавливает шаблон структуры ответа
//&НаКлиенте
Функция ПолучитьШаблонСтруктурыОтвета()
	
	Структура = Новый Структура();
	
	Структура.Вставить("Результат", 	Неопределено);
	Структура.Вставить("Ошибка", 		Ложь);
	Структура.Вставить("Описание", 		""); 
	Структура.Вставить("КодСостояния",	"");
	
	Возврат Структура;
	
КонецФункции // ПолучитьШаблонСтруктурыОтвета()

// Функция обрабатывает ответ запроса по коду состояния
//&НаКлиенте
Функция ОбработатьОтвет(Ответ, СтруктураОтвета, ЭтоФайл = Ложь) Экспорт 

	СтруктураОтвета.КодСостояния = Ответ.КодСостояния;
	ОтветОбработан = Ложь;
	Тело = Ответ.ПолучитьТелоКакСтроку();	
	Тело = СтрЗаменить(Тело,"z-reports","zreports");
	ТекущаяДата = Строка(ТекущаяДата());
	
	Если СтруктураОтвета.КодСостояния = 200 Тогда
		
		Если Тело = "[]" или Тело = "" Тогда
			СтруктураОтвета.Описание 		= ТекущаяДата + " Пустой ответ.";
		Иначе 
			ЧтениеJSON = Новый ЧтениеJSON();
			ЧтениеJSON.УстановитьСтроку(Тело); 
			СтруктураОтвета.Результат = ПрочитатьJSON(ЧтениеJSON);			
			ЧтениеJSON.Закрыть(); 
		КонецЕсли;
		
		Возврат СтруктураОтвета;
		
	КонецЕсли;
		
	Если СтруктураОтвета.КодСостояния = 400 Тогда
		СтруктураОтвета.Ошибка 		= Истина;
		СтруктураОтвета.Описание 	= ТекущаяДата + " Error 400. Ошибка выгружаемых данных.";// (" + Тело + ")"; 	
		Возврат СтруктураОтвета; 	
	КонецЕсли;
	
	Если СтруктураОтвета.КодСостояния = 401 Тогда
		СтруктураОтвета.Ошибка 		= Истина;
		СтруктураОтвета.Описание 	= ТекущаяДата + " Error 401. Ошибка авторизации. Неверный токен или срок действия токена истек.";// (" + Тело + ")";		
		Возврат СтруктураОтвета;	
	КонецЕсли;	
		
	Если СтруктураОтвета.КодСостояния = 403 Тогда
		СтруктураОтвета.Ошибка 		= Истина;
		СтруктураОтвета.Описание 	= ТекущаяДата + " Error 403. Лицензия на ККТ не оплачена.";//(" + Тело + ")";		
		Возврат СтруктураОтвета;		
	КонецЕсли;
	
	Если СтруктураОтвета.КодСостояния = 404 Тогда
		СтруктураОтвета.Ошибка 		= Истина;
		СтруктураОтвета.Описание 	= ТекущаяДата + " Error 404.";// (" + Тело + ")";		
		Возврат СтруктураОтвета;		
	КонецЕсли;
	
	Если СтруктураОтвета.КодСостояния = 500 Тогда
		СтруктураОтвета.Ошибка 		= Истина;
		СтруктураОтвета.Описание 	= ТекущаяДата + " Error 500. Сервис недоступен. Повторите запрос позднее.";// (" + Тело + ")"; 		
		Возврат СтруктураОтвета; 		
	КонецЕсли;
	
	Если СтруктураОтвета.КодСостояния = 503 Тогда
		СтруктураОтвета.Ошибка 		= Истина;
		Если Тело = "[]" или Тело = "" Тогда
			СтруктураОтвета.Описание 		= "Error 503. " + ТекущаяДата + " Пустой ответ от сервера.";
		ИначеЕсли СтрНайти(Тело,"503-01") > 0 Тогда 
			СтруктураОтвета.Описание = ТекущаяДата + " Error 503-01. За последний день периода обработаны еще не все документы, попробуйте повторить запрос позднее.";// (" + Тело + ")"; 		
		Иначе
			СтруктураОтвета.Описание 	= ТекущаяДата + " Error 503. Сервер перегружен. Повторите запрос позднее.";// (" + Тело + ")"; 		
		КонецЕсли;
		Возврат СтруктураОтвета; 		
	КонецЕсли;
		
	СтруктураОтвета.Ошибка 		= Истина;
	СтруктураОтвета.Описание 	= ТекущаяДата + " Error " + СтруктураОтвета.КодСостояния + ". Неизвестная ошибка сервиса.";// (" + Тело + ")"; 
	
	Возврат СтруктураОтвета;
	
КонецФункции

Функция ПроверитьРезультатНаОшибки(СтруктураОтвета,МассивСообщений)

	Если СтруктураОтвета.Ошибка Тогда
		МассивСообщений.Добавить("При выполнении задания произошла ошибка: " + СтруктураОтвета.Описание);
		//Сообщение = Новый СообщениеПользователю();
		//Сообщение.Текст = "При выполнении задания произошла ошибка: " + СтруктураОтвета.Описание;
		//Сообщение.Сообщить();
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;

КонецФункции

//Получаем чеки
Функция ПолучитьДанныеПоЧекам(Параметры,АдресХранилища,Фон = Ложь) Экспорт
		
	Период		 = Параметры.Период;
	СписокКасс	 = Параметры.СписокКасс;
	МассивСообщений = Параметры.МассивСообщений;
	
	СоответсвиеКасс = ВосстановитьНастройкиКасс();
	
	Для каждого Касса из СписокКасс Цикл
		
		Соответсвие = СоответсвиеКасс.Получить(Касса.Значение);
		
		Если Соответсвие.ФронтСистема = Перечисления.ПЛ_ТипыФронтСистем.TNG и ЗначениеЗаполнено(Соответсвие.КодТочкиПродаж) Тогда
		
			//ТаблицаДанныхФронт = MRS_МенеджерОбменаTNG.ВыполнитьПолучениеДанныхTNG(Соответсвие.ФронтСистема, Период.ДатаНачала, Период.ДатаОкончания, Соответсвие.КодТочкиПродаж);
								
		ИначеЕсли Соответсвие.ФронтСистема = Перечисления.ПЛ_ТипыФронтСистем.Micros и ЗначениеЗаполнено(Соответсвие.КодТочкиПродаж) тогда
		
						
			ТаблицаДанныхФронт = MRS_МенеджерОбменаMicros.ПолучитьДанныеДляСверкиОФД(Соответсвие.ФронтСистема, Период.ДатаНачала, Период.ДатаОкончания, Соответсвие.КодТочкиПродаж, Соответсвие.КассаККМ);
								
		КонецЕсли;

		ТаблицаПоЧекам = ПолучитьСуммуПоЧекам(Соответсвие.КассаККМ, Период.ДатаНачала, Период.ДатаОкончания);
		
		Неделя = 604800;//604800 секунд в неделе
		КоличествоНедель	 = (Период.ДатаОкончания - Период.ДатаНачала)/Неделя; 
		КоличествоЗапросов	 = Цел(КоличествоНедель) + ?((КоличествоНедель - Цел(КоличествоНедель)) > 0,1,0);
		
		ДатаНачала    = НачалоДня(Период.ДатаНачала - Неделя);
		ДатаОкончания = Период.ДатаНачала - 1;
		
		// Создаём таблицу значений для хранения Z-отчётов
		ТаблицаZОтчетов = Новый ТаблицаЗначений;
		ТаблицаZОтчетов.Колонки.Добавить("ПриходНаличными", Новый ОписаниеТипов("Число")); 
		ТаблицаZОтчетов.Колонки.Добавить("ПриходБезналичными", Новый ОписаниеТипов("Число"));
		ТаблицаZОтчетов.Колонки.Добавить("ПриходПостоплатами_Кредит", Новый ОписаниеТипов("Число"));
		ТаблицаZОтчетов.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число")); 
		ТаблицаZОтчетов.Колонки.Добавить("НаименованиеКассы", Новый ОписаниеТипов("Строка"));
        ТаблицаZОтчетов.Колонки.Добавить("НомерККТ", Новый ОписаниеТипов("Строка"));
        ТаблицаZОтчетов.Колонки.Добавить("РегистрационныйНомерККТ", Новый ОписаниеТипов("Строка"));
        ТаблицаZОтчетов.Колонки.Добавить("НомерФН", Новый ОписаниеТипов("Строка"));
		ТаблицаZОтчетов.Колонки.Добавить("СсылкаНаОтчет", Новый ОписаниеТипов("Строка"));
        ТаблицаZОтчетов.Колонки.Добавить("ДатаОткрытия", Новый ОписаниеТипов("Строка"));
		ТаблицаZОтчетов.Колонки.Добавить("ДатаЗакрытия", Новый ОписаниеТипов("Строка"));
		ТаблицаZОтчетов.Колонки.Добавить("Склад");

		
		Для Сч = 1 По КоличествоЗапросов Цикл    
			
			ДатаНачала    = ДатаНачала + Неделя;
			ДатаОкончания = ДатаОкончания + Неделя;
			
			Если Сч = КоличествоЗапросов Тогда 
				ДатаОкончания = Период.ДатаОкончания;	
			КонецЕсли;
			
			СтруктураОтветаПоОтчетам = GetZReports(Касса.Значение,ДатаНачала,ДатаОкончания);
			Если ПроверитьРезультатНаОшибки(СтруктураОтветаПоОтчетам,МассивСообщений) Тогда 
				Перейти ~Конец;	
			КонецЕсли;
			
			Если СтруктураОтветаПоОтчетам.Результат.Свойство("zreports") Тогда
				
			// Получаем массив Z-отчётов
			ZReports = СтруктураОтветаПоОтчетам.Результат.zreports;

			// Проверяем, что массив не пустой
			Если ZReports.Количество() > 0 Тогда
			    // Определяем количество элементов для обработки (все, кроме последнего, если больше одной строки)
			    КоличествоДляОбработки = ?(ZReports.Количество() = 1, 1, ZReports.Количество() - 1);
			    
			    // Обрабатываем элементы массива
			    Для Индекс = 0 По КоличествоДляОбработки - 1 Цикл
			        ZReport = ZReports[Индекс];
			        
			        НоваяСтрока = ТаблицаZОтчетов.Добавить();
			        НоваяСтрока.ПриходНаличными 			= ZReport.incomeCashSumm; 
			        НоваяСтрока.ПриходБезналичными          = ZReport.incomeCreditSumm;
			        НоваяСтрока.ПриходПостоплатами_Кредит   = ZReport.incomeElectroSumm;
			        НоваяСтрока.Сумма                       = ZReport.incomeSumm;
			        НоваяСтрока.НаименованиеКассы           = ZReport.kktName;
			        НоваяСтрока.НомерККТ                    = ZReport.kktNumber;
			        НоваяСтрока.РегистрационныйНомерККТ     = ZReport.kktRegNumber;
			        НоваяСтрока.НомерФН                     = ZReport.kktFN;
			        НоваяСтрока.СсылкаНаОтчет               = ZReport.documentLink;
			        
			        ДатаОткрытия 							= ПолучитьДату(ZReport.shiftOpenDate);
			        ДатаЗакрытия		 					= ПолучитьДату(ZReport.shiftCloseDate);
			        
			        НоваяСтрока.ДатаОткрытия                = ДатаОткрытия;
			        НоваяСтрока.ДатаЗакрытия                = ДатаЗакрытия;
			        
			        НоваяСтрока.Склад                    	= Соответсвие.Склад;
			    КонецЦикла;
			Иначе
			   // Сообщить("Массив Z-отчётов пустой.");
			КонецЕсли;
				
			КонецЕсли;
			
			ДлительныеОперации.СообщитьПрогресс(Формат(Сч/КоличествоЗапросов * 100,"ЧДЦ=0"), "Выполнено операций " + Строка(Сч) + " из " + Строка(КоличествоЗапросов));
		КонецЦикла;  
		~Конец:
	КонецЦикла;  
	
	ОбъединеннаяТаблица = ОбъеденитьРезультатыТаблиц(ТаблицаZОтчетов, ТаблицаДанныхФронт, ТаблицаПоЧекам);
	
	ДлительныеОперации.СообщитьПрогресс(100,"Готово!");
	
	// Помещаем таблицу во временное хранилище
	Если ЗначениеЗаполнено(АдресХранилища) Тогда
		ПоместитьВоВременноеХранилище(ОбъединеннаяТаблица, АдресХранилища);
	КонецЕсли;
	
	// Обновляем массив сообщений в параметрах
	Параметры.МассивСообщений = МассивСообщений;
	
	Возврат ОбъединеннаяТаблица;
	
КонецФункции  

Функция ПолучитьСуммуПоЧекам(КассаККМ, ДатаНачала, ДатаОкончания)
	
		лТекст = "
		|ВЫБРАТЬ
		|	питДанныеПродажФронта.КассаККМ КАК КассаККМ,
		|	питДанныеПродажФронта.ПЛ_КодТочкиПродажи КАК ПЛ_КодТочкиПродажи,
		|	СУММА(питДанныеПродажФронта.СуммаДокумента) КАК СуммаДокумента,
		|	НАЧАЛОПЕРИОДА(питДанныеПродажФронта.Дата, ДЕНЬ) КАК День
		|ПОМЕСТИТЬ ВТ_Фискализированы
		|ИЗ
		|	Документ.питДанныеПродажФронта КАК питДанныеПродажФронта
		|ГДЕ
		|	питДанныеПродажФронта.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И питДанныеПродажФронта.КассаККМ = &КассаККМ
		|	И питДанныеПродажФронта.MRS_Фискализирован
		|
		|СГРУППИРОВАТЬ ПО
		|	питДанныеПродажФронта.КассаККМ,
		|	питДанныеПродажФронта.ПЛ_КодТочкиПродажи,
		|	НАЧАЛОПЕРИОДА(питДанныеПродажФронта.Дата, ДЕНЬ)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	питДанныеПродажФронта.КассаККМ КАК КассаККМ,
		|	питДанныеПродажФронта.ПЛ_КодТочкиПродажи КАК ПЛ_КодТочкиПродажи,
		|	СУММА(питДанныеПродажФронта.СуммаДокумента) КАК СуммаДокумента,
		|	НАЧАЛОПЕРИОДА(питДанныеПродажФронта.Дата, ДЕНЬ) КАК День
		|ПОМЕСТИТЬ ВТ_НЕФискализированы
		|ИЗ
		|	Документ.питДанныеПродажФронта КАК питДанныеПродажФронта
		|ГДЕ
		|	питДанныеПродажФронта.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И питДанныеПродажФронта.КассаККМ = &КассаККМ
		|	И НЕ питДанныеПродажФронта.MRS_Фискализирован
		|
		|СГРУППИРОВАТЬ ПО
		|	питДанныеПродажФронта.КассаККМ,
		|	питДанныеПродажФронта.ПЛ_КодТочкиПродажи,
		|	НАЧАЛОПЕРИОДА(питДанныеПродажФронта.Дата, ДЕНЬ)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Фискализированы.КассаККМ КАК КассаККМ,
		|	ВТ_Фискализированы.ПЛ_КодТочкиПродажи КАК ПЛ_КодТочкиПродажи,
		|	ВТ_Фискализированы.СуммаДокумента КАК ИтогФискализированы,
		|	ВТ_НЕФискализированы.СуммаДокумента КАК ИтогНеФискализированы,
		|	ВТ_Фискализированы.День КАК День
		|ИЗ
		|	ВТ_Фискализированы КАК ВТ_Фискализированы
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НЕФискализированы КАК ВТ_НЕФискализированы
		|		ПО (ВТ_Фискализированы.КассаККМ = ВТ_НЕФискализированы.КассаККМ
		|				И ВТ_Фискализированы.День = ВТ_НЕФискализированы.День)
		|";
		
	лЗапрос = Новый Запрос(лТекст);

	// Установка параметров.
	лЗапрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	лЗапрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	лЗапрос.УстановитьПараметр("КассаККМ", КассаККМ);

	Возврат  лЗапрос.Выполнить().Выгрузить();

КонецФункции

Функция ОбъеденитьРезультатыТаблиц(ТаблицаZОтчетов, ТаблицаДанныхФронт, ТаблицаПоЧекам)

	// Создаем результирующую таблицу
	Результат = Новый ТаблицаЗначений;

	// Добавляем все колонки из всех таблиц
	Для Каждого Колонка Из ТаблицаZОтчетов.Колонки Цикл
	    Результат.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
	КонецЦикла;
	Для Каждого Колонка Из ТаблицаДанныхФронт.Колонки Цикл
	    Если Результат.Колонки.Найти(Колонка.Имя) = Неопределено Тогда
	        Результат.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
	    КонецЕсли;
	КонецЦикла;
	Для Каждого Колонка Из ТаблицаПоЧекам.Колонки Цикл
	    Если Результат.Колонки.Найти(Колонка.Имя) = Неопределено Тогда
	        Результат.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
	    КонецЕсли;
	КонецЦикла;

	// Определяем максимальное количество строк
	МаксСтрок = Макс(ТаблицаZОтчетов.Количество(), ТаблицаДанныхФронт.Количество(), ТаблицаПоЧекам.Количество());

	// Заполняем результат
	Для НомерСтроки = 0 По МаксСтрок - 1 Цикл
	    НоваяСтрока = Результат.Добавить();
	    
	    // Заполняем данные из Таблица1
	    Если НомерСтроки < ТаблицаZОтчетов.Количество() Тогда
	        ЗаполнитьЗначенияСвойств(НоваяСтрока, ТаблицаZОтчетов[НомерСтроки]);
	    КонецЕсли;
	    
	    // Заполняем данные из Таблица2
	    Если НомерСтроки < ТаблицаДанныхФронт.Количество() Тогда
	        ЗаполнитьЗначенияСвойств(НоваяСтрока, ТаблицаДанныхФронт[НомерСтроки]);
	    КонецЕсли;
	    
	    // Заполняем данные из Таблица3
	    Если НомерСтроки < ТаблицаПоЧекам.Количество() Тогда
	        ЗаполнитьЗначенияСвойств(НоваяСтрока, ТаблицаПоЧекам[НомерСтроки]);
	    КонецЕсли;
	КонецЦикла;

	// Результат будет содержать все колонки и максимальное количество строк
	// Незаполненные ячейки останутся со значениями по умолчанию (пустые)
	Возврат Результат;
	
КонецФункции



// Функция преобразует Массив из структур в ТаблицуЗначений.
Функция ПреобразоватьМассивВТаблицуЗначений(МассивДанные) 
    
    ДанныеТабЗначений = Новый ТаблицаЗначений;
    
    Для Каждого ЭлементМассива Из МассивДанные Цикл
        // Добавим колонки в таблицу значений
		Для Каждого ЗначениеСтруктуры Из ЭлементМассива Цикл
        	Если ДанныеТабЗначений.Колонки.Найти(ЗначениеСтруктуры.Ключ) = Неопределено Тогда
                ДанныеТабЗначений.Колонки.Добавить(ЗначениеСтруктуры.Ключ);
        	КонецЕсли;
		КонецЦикла;
    КонецЦикла;
    
    Для Каждого ЭлементМассива Из МассивДанные Цикл
        // Добавляем данные в таблицу значений
        НоваяСтрока = ДанныеТабЗначений.Добавить();
		Для Каждого ЗначениеСтруктуры Из ЭлементМассива Цикл 
            НоваяСтрока[ЗначениеСтруктуры.Ключ] = ЗначениеСтруктуры.Значение;
        КонецЦикла;
    КонецЦикла;
	
    Возврат ДанныеТабЗначений;
    
КонецФункции 

Процедура ЗаполнитьТаблицуФормыДокументов(Массив,Знач Касса,Знач Период,ТаблицаДляЗаполнения,СтруктураОтветаПоОтчетам,МассивНеВошедшихВПериод,МассивСообщений)
	
	ОбщиеНастройки = ВосстановитьОбщиеНастройки();
	НастройкиКасс = ВосстановитьНастройкиКасс();

	НастройкаТекущейКассы = НастройкиКасс.Получить(Касса.Значение);
	Если НастройкаТекущейКассы = Неопределено Тогда 
		НастройкаТекущейКассы = ОбщиеНастройки;
	КонецЕсли;
	
	ТаблицаЗначений = ПреобразоватьМассивВТаблицуЗначений(Массив); 
	ТаблицаНеВошедшихВПериод = ПреобразоватьМассивВТаблицуЗначений(МассивНеВошедшихВПериод);
	
	Если ТаблицаЗначений.Колонки.Найти("bsoCode") = Неопределено Тогда 
		ТаблицаЗначений.Колонки.Добавить("bsoCode");	
	КонецЕсли;
	Если ТаблицаЗначений.Колонки.Найти("receiptCode") = Неопределено Тогда 
		ТаблицаЗначений.Колонки.Добавить("receiptCode");	
	КонецЕсли;
	Если ТаблицаЗначений.Колонки.Найти("creditSum") = Неопределено Тогда 
		ТаблицаЗначений.Колонки.Добавить("creditSum");	
	КонецЕсли;
	Если ТаблицаЗначений.Колонки.Найти("operator") = Неопределено Тогда 
		ТаблицаЗначений.Колонки.Добавить("operator");	
	КонецЕсли;
	
	ZОтчетыЗаПериод = ТаблицаЗначений.Скопировать(,"shiftNumber,operator");
	ZОтчетыЗаПериод.Свернуть("shiftNumber,operator");
	
	
	 
	
	СоответствиеСтавок = ПолучитьСоответствиеСтавок();

	Галка 		= Истина;
	ВидыФД		= ПолучитьВидыФД(); 
	ВидыСНО 	= ПолучитьСистемыНалогообложения();
	Для каждого ZОтчет из ZОтчетыЗаПериод Цикл
		Отчет = Неопределено;
		Если НЕ СтруктураОтветаПоОтчетам.Ошибка Тогда 
			Для каждого Смена из СтруктураОтветаПоОтчетам.Результат.zreports Цикл  
				Если Смена.shiftNumber = ZОтчет.shiftNumber Тогда 
					Отчет = Смена;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		СписокЧековОтчета = ТаблицаЗначений.НайтиСтроки(Новый Структура("shiftNumber",ZОтчет.shiftNumber));
		Если ТаблицаНеВошедшихВПериод.Количество() Тогда 
			СписокЧековНеВошедшихВПериод = ТаблицаНеВошедшихВПериод.НайтиСтроки(Новый Структура("shiftNumber",ZОтчет.shiftNumber));
			Для каждого ЧекНеВошедший из СписокЧековНеВошедшихВПериод Цикл 
				СписокЧековОтчета.Добавить(ЧекНеВошедший);
			КонецЦикла;
		КонецЕсли;
		
		Если Смена = Неопределено Тогда 
			ЗначениеДаты = НачалоДня(ПолучитьДату(СписокЧековОтчета[0].receiptDate));  
		Иначе
			ЗначениеДаты = НачалоДня(ПолучитьДату(Смена.shiftCloseDate));  
		КонецЕсли;
		
		//НоваяДата = ТаблицаДляЗаполнения.Строки.Найти(ЗначениеДаты);
		НоваяДата = ТаблицаДляЗаполнения.Строки.НайтиСтроки(Новый Структура("Дата",ЗначениеДаты));
		Если НоваяДата.Количество() = 0 Тогда 
			НоваяДата = ТаблицаДляЗаполнения.Строки.Добавить();	
		Иначе
			НоваяДата = НоваяДата[0];
		КонецЕсли;	
		НоваяДата.Дата = ЗначениеДаты;  
		НоваяДата.Отметка = Галка;
		
		//НоваяКасса = НоваяДата.Строки.Найти(Касса.Представление);
		НоваяКасса = НоваяДата.Строки.НайтиСтроки(Новый Структура("Касса",Касса.Представление));
		Если НоваяКасса.Количество() = 0 Тогда 
			НоваяКасса = НоваяДата.Строки.Добавить();
		Иначе
			НоваяКасса = НоваяКасса[0];
		КонецЕсли;	
		НоваяКасса.Касса		 = Касса.Представление;
		НоваяКасса.КассаРегНомер = Касса.Значение; 
		НоваяКасса.ЧекКассаКартинка = 1;
		НоваяКасса.Отметка		 = Галка;
		
		//НоваяСмена = НоваяКасса.Строки.Найти(ZОтчет.shiftNumber);
		НоваяСмена = НоваяКасса.Строки.НайтиСтроки(Новый Структура("НомерСмены",ZОтчет.shiftNumber));
		Если НоваяСмена.Количество() = 0 Тогда 
			НоваяСмена = НоваяКасса.Строки.Добавить();
		Иначе
			НоваяСмена = НоваяСмена[0];
		КонецЕсли;	
		НоваяСмена.НомерСмены		 = ZОтчет.shiftNumber;
		НоваяСмена.ЧекКассаКартинка	 = ?(Отчет = Неопределено,3,2); 
		НоваяСмена.Информация		 = ?(Отчет = Неопределено,"смена не закрыта","");
		НоваяСмена.СменаЗакрыта		 = ?(Отчет = Неопределено,Ложь,Истина);
		НоваяСмена.Отметка			 = Галка;
		
		Если Смена = Неопределено ИЛИ НЕ НоваяСмена.СменаЗакрыта Тогда 
			НоваяСмена.ДатаСменыС		 = ПолучитьДату(СписокЧековОтчета[0].receiptDate);
			НоваяСмена.Отметка			 = Ложь; 
		Иначе
			НоваяСмена.ДатаСменыС		 = ПолучитьДату(Смена.shiftOpenDate);
			НоваяСмена.ДатаСменыПо		 = ПолучитьДату(Смена.shiftCloseDate);
		КонецЕсли;   
		
		НоваяСмена.Кассир			 = ZОтчет.operator;
		НоваяСмена.ПриложениеКДокументу = "Касса: " + Касса.Представление + "; Смена: №" + НоваяСмена.НомерСмены + " с " + Формат(НоваяСмена.ДатаСменыС,"ДФ=ЧЧ.мм") + " по " + Формат(НоваяСмена.ДатаСменыПо,"ДФ=ЧЧ.мм");
		СистемаНалогообложения = Неопределено;
		Для каждого СтрокаЧеков из СписокЧековОтчета Цикл
			ВидФискальныхДанных = ?(СтрокаЧеков.receiptCode = Неопределено,СтрокаЧеков.bsoCode,СтрокаЧеков.receiptCode);
			Если ВидФискальныхДанных = 31 ИЛИ ВидФискальныхДанных = 41 Тогда //Чек коррекции приходит с пустыми строками 
				Продолжить;
			КонецЕсли;
			Если НастройкаТекущейКассы.ВариантЗагрузкиЧеков = 1 Тогда //Если стоит настройка загружать только чеки с Наличной оплатой
			    Если СтрокаЧеков.cashTotalSum = 0 Тогда 
					Продолжить;
				КонецЕсли; 
			ИначеЕсли НастройкаТекущейКассы.ВариантЗагрузкиЧеков = 2 Тогда //Если стоит настройка загружать только чеки с Безаличной оплатой
			    Если СтрокаЧеков.ecashTotalSum = 0 Тогда 
					Продолжить;
				КонецЕсли; 
			КонецЕсли;
			
			ЧекСуществует = НоваяСмена.Строки.НайтиСтроки(Новый Структура("УникальныйНомерЧека",Формат(СтрокаЧеков.rqId,"ЧГ=0")));
			Если ЧекСуществует.Количество() Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаЧека = НоваяСмена.Строки.Добавить();                                
			СтрокаЧека.Дата				 = ПолучитьДату(СтрокаЧеков.receiptDate);
			СтрокаЧека.Отметка			 = НоваяСмена.СменаЗакрыта;
			СтрокаЧека.НомерЧека		 = Формат(СтрокаЧеков.requestNumber,"ЧГ=0");	
			СтрокаЧека.УникальныйНомерЧека = Формат(СтрокаЧеков.rqId,"ЧГ=0");	
			СтрокаЧека.НомерСмены		 = СтрокаЧеков.shiftNumber; 
			СтрокаЧека.ЧекКассаКартинка	 = НоваяСмена.ЧекКассаКартинка; 
			СтрокаЧека.Информация		 = НоваяСмена.Информация; 
			
			СтрокаЧека.Возврат			 = СтрокаЧеков.operationType > 1;	
			СтрокаЧека.СуммаНаличные	 = СтрокаЧеков.cashTotalSum/100 * ?(СтрокаЧека.Возврат,-1,1);	
			СтрокаЧека.СуммаБезналичные	 = СтрокаЧеков.ecashTotalSum/100 * ?(СтрокаЧека.Возврат,-1,1);	
			СтрокаЧека.АвансПогашение	 = СтрокаЧеков.prepaidSum/100;
			
			Если СтрокаЧеков.creditSum <> Неопределено Тогда
				СтрокаЧека.СуммаКредита = СтрокаЧеков.creditSum/100;
			КонецЕсли; 

			СтрокаЧека.КодВидаФД		 = ВидФискальныхДанных;	//3  — Кассовый чек; 31 — Кассовый чек коррекции; 4  — БСО; 41 — БСО коррекции;
			СтрокаЧека.ВидФД			 = ВидыФД.Получить(СтрокаЧека.КодВидаФД);
			СтрокаЧека.СистемаНалогообложения = ВидыСНО.Получить(СтрокаЧеков.taxationType); 
			
			Если СистемаНалогообложения <> СтрокаЧека.СистемаНалогообложения Тогда 
				СистемаНалогообложения = СтрокаЧека.СистемаНалогообложения;
				Если НастройкаТекущейКассы.РазделятьОтчетыПоНО Тогда
					
				КонецЕсли;
			КонецЕсли;
			
			//Проверка дублирования табличной части +
			СуммаТабличнойЧасти = ПолучитьСуммуТабличнойЧасти(СтрокаЧеков.items);
			Если Цел(СуммаТабличнойЧасти/100) <> Цел(СтрокаЧеков.TotalSum/100) Тогда
				МассивСообщений.Добавить("Сумма позиций в чеке " + СтрокаЧека.НомерЧека + " не совпадает с суммой чека. Загрузка документов не корректна. Обратитесь в службу поддержки Платформа ОФД (info@platformaofd.ru)");
			КонецЕсли; 
			//-
			
			СчетчикСтрок = 0;
			Для каждого Товар из СтрокаЧеков.items Цикл
				СчетчикСтрок = СчетчикСтрок + 1;
				НоваяСтрока = СтрокаЧека.Строки.Добавить();
				НоваяСтрока.Отметка			 = НоваяСмена.СменаЗакрыта;
				НоваяСтрока.СчетчикСтрок	 = СчетчикСтрок;
				
				НоваяСтрока.ТипОплаты		 = Товар.paymentType;
				
				//НДС +
				ДанныеНДС = ПолучитьСтавкуНДС(Товар,СоответствиеСтавок);
				НоваяСтрока.СтавкаНДС		 = ДанныеНДС.СтавкаНДС;  
				НоваяСтрока.СуммаНДС		 = ДанныеНДС.СуммаНДС / 100; //Сумма приходит в копейках
				//-
				
				НоваяСтрока.ЕдиницаИзмерение = "шт." ;
				Если Товар.Свойство("Name") Тогда 
					НоваяСтрока.НаименованиеЛКК	 = Товар.Name;
					Если НайтиНедопустимыеСимволыXML(Товар.Name) > 0 Тогда 
						СимволДляЗамены = Сред(НоваяСтрока.НаименованиеЛКК,НайтиНедопустимыеСимволыXML(Товар.Name),1);
						ЗаменаСимвола = "&#" + КодСимвола(СимволДляЗамены) + ";";
						НоваяСтрока.НаименованиеЛКК = СтрЗаменить(НоваяСтрока.НаименованиеЛКК,СимволДляЗамены,ЗаменаСимвола);		
					КонецЕсли;
				Иначе
					НоваяСтрока.НаименованиеЛКК	 = "БЕЗ НАИМЕНОВАНИЯ В ЧЕКЕ"; 
				КонецЕсли;
				
				НоваяСтрока.Количество		 = Товар.quantity;
				НоваяСтрока.Цена			 = Товар.price/100; //Цена приходит в копейках
				Если Товар.Sum = 0 Тогда //В АПИ почему-то в некоторые периоды сумма приходит нулеваая, так что это затычка
					НоваяСтрока.Сумма			 = НоваяСтрока.Цена * НоваяСтрока.Количество;
				Иначе
					НоваяСтрока.Сумма			 = Товар.Sum/100; //Сумма приходит в копейках
				КонецЕсли;
				
				Если НоваяСтрока.ТипОплаты < 4 И НоваяСтрока.ТипОплаты > 0 Тогда
					НоваяСтрока.АвансНачисление = НоваяСтрока.Сумма;
				КонецЕсли;

				Если (НоваяСтрока.Количество * НоваяСтрока.Цена) <> 0 Тогда
					НоваяСтрока.Скидка = (НоваяСтрока.Цена * НоваяСтрока.Количество - НоваяСтрока.Сумма) / (НоваяСтрока.Количество * НоваяСтрока.Цена) * 100;
				КонецЕсли;   
				
				Если СтрокаЧека.Возврат Тогда 
					НоваяСтрока.Количество			 = НоваяСтрока.Количество * -1;
					НоваяСтрока.Сумма				 = НоваяСтрока.Сумма * -1;
					НоваяСтрока.СуммаНДС			 = НоваяСтрока.СуммаНДС * -1;
					НоваяСтрока.СуммаНаличные		 = НоваяСтрока.СуммаНаличные * -1;
					НоваяСтрока.СуммаБезналичные	 = НоваяСтрока.СуммаБезналичные * -1;
				КонецЕсли;
				
				От = Найти(СтрокаЧеков.documentLink,"&date=") + 6;
				До = Найти(СтрокаЧеков.documentLink,"&fp=") - От;
				date = Сред(СтрокаЧеков.documentLink,От,До); 
				
				НоваяСтрока.НомерФН				 = Формат(date,"ЧДЦ=; ЧГ=");
				НоваяСтрока.ПризнакЧека			 = Формат(СтрокаЧеков.fiscalSign,"ЧДЦ=; ЧГ=");
				НоваяСтрока.ИдентификаторЧека	 = Формат(СтрокаЧеков.rqId,"ЧДЦ=; ЧГ=");
				
				Если Товар.Свойство("productType") Тогда 
					НоваяСтрока.ВидНоменклатуры		 = Товар.productType;
				КонецЕсли;
				
								
				
			КонецЦикла;
			СтрокаЧека.НомерФН			 = НоваяСтрока.НомерФН;
			СтрокаЧека.ПризнакЧека		 = НоваяСтрока.ПризнакЧека;
			СтрокаЧека.ИдентификаторЧека = НоваяСтрока.ИдентификаторЧека;    
			
			СтрокаЧека.Количество	 = СтрокаЧека.Строки.Итог("Количество");	
			СтрокаЧека.Сумма	     = СтрокаЧека.Строки.Итог("Сумма");
			СтрокаЧека.Скидка	     = СтрокаЧека.Строки.Итог("Скидка");
			СтрокаЧека.СуммаНДС		 = СтрокаЧека.Строки.Итог("СуммаНДС");	
			СтрокаЧека.АвансНачисление = СтрокаЧека.Строки.Итог("АвансНачисление");	
		КонецЦикла;
		
		//ИтогиСмены
		НоваяСмена.ЕдиницаИзмерение	 = "чеков" ;
		НоваяСмена.Количество		 = НоваяСмена.Строки.Количество();	
		НоваяСмена.Сумма	    	 = НоваяСмена.Строки.Итог("Сумма");
		НоваяСмена.Скидка	    	 = НоваяСмена.Строки.Итог("Скидка");
		НоваяСмена.СуммаНДС			 = НоваяСмена.Строки.Итог("СуммаНДС");    
		НоваяСмена.СуммаНаличные	 = НоваяСмена.Строки.Итог("СуммаНаличные");	
		НоваяСмена.СуммаБезналичные	 = НоваяСмена.Строки.Итог("СуммаБезналичные");
		НоваяСмена.АвансНачисление	 = НоваяСмена.Строки.Итог("АвансНачисление");	
		НоваяСмена.АвансПогашение	 = НоваяСмена.Строки.Итог("АвансПогашение");	
		
		//Швецов
		НоваяСмена.Строки.Очистить();
        //Швецов
		
		Если НастройкаТекущейКассы.РазделятьОтчетыПоСменам Тогда                                                                                                 
			
						
			Если ЗначениеЗаполнено(НоваяСмена.Документы) Тогда
				НоваяСмена.ДокументыКартинка = 1;
				ИзменитьГалочкиРекурсивно(Ложь,НоваяСмена);
			ИначеЕсли НоваяСмена.СменаЗакрыта Тогда 
				НоваяСмена.Отметка = Истина;
				ИзменитьГалочкиРекурсивно(НоваяСмена.Отметка,НоваяСмена);
			КонецЕсли;
		КонецЕсли; 

		//ИтогиКасса
		НоваяКасса.ЕдиницаИзмерение	 = "смен" ;
		НоваяКасса.Количество		 = НоваяКасса.Строки.Количество();	
		НоваяКасса.Сумма	    	 = НоваяКасса.Строки.Итог("Сумма");
		НоваяКасса.Скидка	    	 = НоваяКасса.Строки.Итог("Скидка");
		НоваяКасса.СуммаНДС			 = НоваяКасса.Строки.Итог("СуммаНДС");    
		НоваяКасса.СуммаНаличные	 = НоваяКасса.Строки.Итог("СуммаНаличные");	
		НоваяКасса.СуммаБезналичные	 = НоваяКасса.Строки.Итог("СуммаБезналичные");
		НоваяКасса.АвансНачисление	 = НоваяКасса.Строки.Итог("АвансНачисление");	
		НоваяКасса.АвансПогашение	 = НоваяКасса.Строки.Итог("АвансПогашение");	
		
		Если НастройкаТекущейКассы.РазделятьОтчетыПоСменам ИЛИ НастройкаТекущейКассы.РазделятьОтчетыПоНО Тогда
			Для каждого Док из НоваяСмена.Документы Цикл
				НоваяКасса.Документы.Добавить(Док.Значение);	
			КонецЦикла;
		Иначе
			
		КонецЕсли;
		Если ЗначениеЗаполнено(НоваяКасса.Документы) Тогда
			НоваяКасса.ДокументыКартинка = 1;
			Если НЕ НастройкаТекущейКассы.РазделятьОтчетыПоСменам Тогда
				НоваяКасса.Отметка = Ложь;
				ИзменитьГалочкиРекурсивно(Ложь,НоваяКасса);
			КонецЕсли;
		КонецЕсли;
		
		//ИтогиДата
		НоваяДата = ТаблицаДляЗаполнения.Строки.Найти(ЗначениеДаты);
		НоваяДата.ЕдиницаИзмерение	 = "касс" ;
		НоваяДата.Количество		 = НоваяДата.Строки.Количество();	
		НоваяДата.Сумма	    		 = НоваяДата.Строки.Итог("Сумма");
		НоваяДата.Скидка	    	 = НоваяДата.Строки.Итог("Скидка");
		НоваяДата.СуммаНДС			 = НоваяДата.Строки.Итог("СуммаНДС");    
		НоваяДата.СуммаНаличные		 = НоваяДата.Строки.Итог("СуммаНаличные");	
		НоваяДата.СуммаБезналичные	 = НоваяДата.Строки.Итог("СуммаБезналичные"); 
		НоваяДата.АвансНачисление	 = НоваяДата.Строки.Итог("АвансНачисление");	
		НоваяДата.АвансПогашение	 = НоваяДата.Строки.Итог("АвансПогашение");	
		
		Для каждого Док из НоваяКасса.Документы Цикл
			НоваяДата.Документы.Добавить(Док.Значение);	
		КонецЦикла;
		Если ЗначениеЗаполнено(НоваяДата.Документы) Тогда
			НоваяДата.ДокументыКартинка = 1;
		КонецЕсли;
	КонецЦикла;
	
	//Перезаполняем галки
	ПерезаполнитьГалкиТаблицы(ТаблицаДляЗаполнения.Строки);
	
	ТаблицаДляЗаполнения.Строки.Сортировать("Дата,Касса,НомерСмены,НомерЧека",Истина);
	
КонецПроцедуры

Функция ПолучитьСистемыНалогообложения() Экспорт   
	
	ВидыСНО = Новый Соответствие;
	ВидыСНО.Вставить(1,	Перечисления.ТипыСистемНалогообложенияККТ.ОСН);
	ВидыСНО.Вставить(2,	Перечисления.ТипыСистемНалогообложенияККТ.УСНДоход);
	ВидыСНО.Вставить(4,	Перечисления.ТипыСистемНалогообложенияККТ.УСНДоходРасход);
	ВидыСНО.Вставить(8,	Перечисления.ТипыСистемНалогообложенияККТ.ЕНВД);
	ВидыСНО.Вставить(16,Перечисления.ТипыСистемНалогообложенияККТ.ЕСН);
	ВидыСНО.Вставить(32,Перечисления.ТипыСистемНалогообложенияККТ.Патент);

	Возврат ВидыСНО;
	
КонецФункции 

Функция ПолучитьСуммуТабличнойЧасти(Массив)
	
	Сумма = 0;
	Для каждого Строка из Массив Цикл
		Сумма = Сумма + Строка.sum;	
	КонецЦикла;
	
	Возврат Сумма;
	
КонецФункции


Процедура ИзменитьГалочкиРекурсивно(Значение,КорневаяСтрока)
	
	Для каждого Строка из КорневаяСтрока.Строки Цикл
		Строка.Отметка = Значение;
		ИзменитьГалочкиРекурсивно(Значение,Строка);	
	КонецЦикла;	
	
КонецПроцедуры

Процедура ПерезаполнитьГалкиТаблицы(СтрокиДерева)
	Для каждого СтрокаДаты из СтрокиДерева Цикл
		ВсеГалкиСняты = Истина;
		Для каждого СтрокаКассы из СтрокаДаты.Строки Цикл
			Для каждого СтрокаСмены из СтрокаКассы.Строки Цикл
				Для каждого Строка из СтрокаСмены.Строки Цикл
					Если Строка.Отметка Тогда 
						ВсеГалкиСняты = Ложь;
					КонецЕсли;
				КонецЦикла;
				Если ВсеГалкиСняты Тогда 
					СтрокаСмены.Отметка = Ложь;	
				КонецЕсли;
			КонецЦикла;
			
			Для каждого Строка из СтрокаКассы.Строки Цикл
				Если Строка.Отметка Тогда 
					ВсеГалкиСняты = Ложь;
				КонецЕсли;
			КонецЦикла;
			Если ВсеГалкиСняты Тогда 
				СтрокаКассы.Отметка = Ложь;	
			КонецЕсли;
		КонецЦикла; 
		
		Для каждого Строка из СтрокаДаты.Строки Цикл
			Если Строка.Отметка Тогда 
				ВсеГалкиСняты = Ложь;
			КонецЕсли;
		КонецЦикла;
		Если ВсеГалкиСняты Тогда 
			СтрокаДаты.Отметка = Ложь;	
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ПолучитьИдентификаторОплатаПлатежнойКартой(КассаРегНомер,Дата,Смена)
	
	Возврат "ОплатаПлатежнойКартой~" + КассаРегНомер + "~" + Дата + ?(Смена = "" ИЛИ Смена = Неопределено,"","~" + Смена);
	
КонецФункции 
 
Функция ПолучитьИдентификаторЧекаККМ(ИДЧека,КассаРегНомер,Дата,Смена)
	
	Возврат "ЧекККМ~" + ИДЧека + КассаРегНомер + "~" + Дата + ?(Смена = "" ИЛИ Смена = Неопределено,"","~" + Смена);
	
КонецФункции 

Функция ПолучитьДату(Строка)
	Если СтрДлина(Строка) >= 10 Тогда 
		День	 = Сред(Строка,9,2);
		Месяц	 = Сред(Строка,6,2);
		Год		 = Лев(Строка,4); 
		Час      = Сред(Строка,12,2);
		Минута   = Сред(Строка,15,2);
		Секунда  = Сред(Строка,18,2);
		
		Возврат Дата(Год,Месяц,День,Час,Минута,Секунда);
	Иначе
		Возврат Дата("00010101");
	КонецЕсли;

КонецФункции // ПолучитьДату()

Функция ПолучитьВидыФД()
	
	ВидыФД = Новый Соответствие;
	ВидыФД.Вставить(3,	"Кассовый чек");
	ВидыФД.Вставить(31,	"Кассовый чек коррекции");
	ВидыФД.Вставить(4,	"БСО");
	ВидыФД.Вставить(41,	"БСО коррекции;");
	
	Возврат ВидыФД; 
	
КонецФункции    

Функция ПолучитьСтавкуНДС(СтрокаЧеков,СоответствиеСтавок)
	
	Значения = Новый Структура("СтавкаНДС,СуммаНДС",,0);

	Вариант = СоответствиеСтавок.Получить(СтрокаЧеков.nds_1199);

	Если Вариант <> Неопределено Тогда 
		Значения.СтавкаНДС	 = Вариант.СтавкаНДС;
		Если СтрокаЧеков.sum = 0 Тогда 
			Значения.СуммаНДС	 = (СтрокаЧеков.price * СтрокаЧеков.quantity) * Вариант.ЗначениеНДС / (Вариант.ЗначениеНДС + 100);
		Иначе 
			Значения.СуммаНДС	 = СтрокаЧеков.sum * Вариант.ЗначениеНДС / (Вариант.ЗначениеНДС + 100);
		КонецЕсли;
	КонецЕсли;

	Возврат Значения;
	
КонецФункции

Функция ПолучитьСоответствиеСтавок()
	
	Соответствие = Новый Соответствие;
	
	Соответствие.Вставить(0,Новый Структура("СтавкаНДС,Дробь,ЗначениеНДС",Перечисления.СтавкиНДС.БезНДС,	Ложь,0));
	Соответствие.Вставить(1,Новый Структура("СтавкаНДС,Дробь,ЗначениеНДС",Перечисления.СтавкиНДС.НДС20,		Ложь,20));
	Соответствие.Вставить(2,Новый Структура("СтавкаНДС,Дробь,ЗначениеНДС",Перечисления.СтавкиНДС.НДС10,		Ложь,10));
	Соответствие.Вставить(3,Новый Структура("СтавкаНДС,Дробь,ЗначениеНДС",Перечисления.СтавкиНДС.НДС20_120,	Истина,20));
	Соответствие.Вставить(4,Новый Структура("СтавкаНДС,Дробь,ЗначениеНДС",Перечисления.СтавкиНДС.НДС10_110,	Истина,10));
	Соответствие.Вставить(5,Новый Структура("СтавкаНДС,Дробь,ЗначениеНДС",Перечисления.СтавкиНДС.НДС0,		Ложь,0));
	Соответствие.Вставить(6,Новый Структура("СтавкаНДС,Дробь,ЗначениеНДС",Перечисления.СтавкиНДС.БезНДС,	Ложь,0));
	
	Возврат Соответствие;
	
КонецФункции

Процедура СнятьОтметки(КорневаяСтрока)
	КорневаяСтрока.Отметка = Ложь;
	Для Каждого Строка из КорневаяСтрока.Строки Цикл 
		Строка.Отметка = Ложь;
		СнятьОтметки(Строка);
	КонецЦикла;
КонецПроцедуры

Функция ПолучитьДанныеЗаполнения(Деревео) Экспорт
	
	ДанныеПоКассам = ВосстановитьНастройкиКасс();
	ОбщиеНастройки = ВосстановитьОбщиеНастройки();
	
	СписокКасс = Новый Соответствие;
	ПолучитьКассы(Деревео,СписокКасс,ДанныеПоКассам,ОбщиеНастройки);		
		
	Возврат СписокКасс;
	
КонецФункции

Функция ПолучитьКассы(КорневаяСтрока,СписокКасс,Знач ДанныеПоКассам,Знач ОбщиеНастройки)

	Для каждого Строка из КорневаяСтрока Цикл 
		Если Строка.Отметка И ЗначениеЗаполнено(Строка.КассаРегНомер) Тогда 
			Настройка = ДанныеПоКассам.Получить(Строка.КассаРегНомер); 
			Если Настройка = Неопределено Тогда
				ОбщиеНастройки.Вставить("РегНомер",Строка.КассаРегНомер);
				Настройка = ОбщиеНастройки;
			КонецЕсли;     
			
			СписокКасс.Вставить(Строка.КассаРегНомер,Настройка);
			
		ИначеЕсли Строка.Строки.Количество() Тогда 
			ПолучитьКассы(Строка.Строки,СписокКасс,ДанныеПоКассам,ОбщиеНастройки);	
		КонецЕсли;
	КонецЦикла;

КонецФункции

Функция ПолучитьДанныеЗаполненияДокумента(ДанныеЗаполненияКасс,Касса)
	
	СтруктураКассы = ДанныеЗаполненияКасс.Получить(Касса);
	
	ДанныеЗаполнения = Новый Структура;
	
	ДанныеЗаполнения.Вставить("ВалютаДокумента",			Константы.ВалютаРегламентированногоУчета.Получить());
	ДанныеЗаполнения.Вставить("КурсДокумента",				1);
	ДанныеЗаполнения.Вставить("КратностьДокумента",			1);
	ДанныеЗаполнения.Вставить("СуммаВключаетНДС",			Истина);
	ДанныеЗаполнения.Вставить("Ответственный",				ПараметрыСеанса.ТекущийПользователь);
	ДанныеЗаполнения.Вставить("РазделятьОтчетыПоСменам",	Ложь); //Создан автоматически при загрузке из ЛКК  
	
	Для каждого Настройка из СтруктураКассы Цикл 
		Если ДанныеЗаполнения.Свойство(Настройка.Ключ) Тогда 
        	ДанныеЗаполнения[Настройка.Ключ] = Настройка.Значение;
		Иначе
			ДанныеЗаполнения.Вставить(Настройка.Ключ,Настройка.Значение); 
		КонецЕсли;
	КонецЦикла;
		
	Возврат ДанныеЗаполнения;
	
КонецФункции // ПолучитьДанныеЗаполненияДокумента()

Функция ПолучитьУИН(Строка) 
	
	ХешДанных = Новый ХешированиеДанных(ХешФункция.MD5);
	ХешДанных.Добавить(Строка);
	ХешСтрокой = СтрЗаменить(Строка(ХешДанных.ХешСумма)," ","");
	
	УИН = Нрег(Лев(ХешСтрокой,8) + "-" + Сред(ХешСтрокой,9,4) + "-" + Сред(ХешСтрокой,13,4) + "-" + Сред(ХешСтрокой,17,4) + "-" + Сред(ХешСтрокой,21,12));
	
	Попытка 
		Возврат Новый УникальныйИдентификатор(УИН);
	Исключение
		Возврат Новый УникальныйИдентификатор();
	КонецПопытки;
	
КонецФункции


