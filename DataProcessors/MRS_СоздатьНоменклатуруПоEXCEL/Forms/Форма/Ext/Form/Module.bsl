#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Инициализация значений по умолчанию
	ТолькоБезСоответствий = Истина;
	ОбновитьДеревоРецептурНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Автоматически предзаполняем связи рецептур при открытии
	ПредзаполнитьСвязиРецептурНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПредзаполнитьСвязиРецептурНаСервере()
	
	// Ищем пары рецептур через дополнительные реквизиты
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтарыеРецептуры.Ссылка КАК СтараяРецептура,
	|	СтарыеРецептуры.Значение КАК НомерНовойРецептуры,
	|	СтарыеРецептуры.Ссылка.Наименование КАК НаименованиеСтарой,
	|	СтарыеРецептуры.Ссылка.Номер КАК НомерСтарой,
	|	СтарыеРецептуры.Ссылка.Подразделение КАК Подразделение
	|ИЗ
	|	Документ.питРецептура.ДополнительныеРеквизиты КАК СтарыеРецептуры
	|ГДЕ
	|	СтарыеРецептуры.Свойство.Наименование = ""MRS_НоваяРецептура""
	|	И НЕ СтарыеРецептуры.Ссылка.ПометкаУдаления
	|	И СтарыеРецептуры.Ссылка.ДатаКонца = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтарой";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	// Очищаем таблицу рецептур
	Рецептуры.Очистить();
	
	Пока Выборка.Следующий() Цикл
		
		СтрокаРецептуры = Рецептуры.Добавить();
		
		СтрокаРецептуры.РецептураСтарая = Выборка.СтараяРецептура;
		СтрокаРецептуры.НомерСтарой = Выборка.НомерСтарой;
		СтрокаРецептуры.Подразделение = Выборка.Подразделение;
		
		// Ищем новую рецептуру по номеру
		НоваяРецептура = Неопределено;
		НомерНовойРецептуры = СокрЛП(Выборка.НомерНовойРецептуры);
		
		Если НЕ ПустаяСтрока(НомерНовойРецептуры) Тогда
			ЗапросНовой = Новый Запрос;
			ЗапросНовой.Текст = 
				"ВЫБРАТЬ
				|	питРецептура.Ссылка КАК Ссылка,
				|	питРецептура.Наименование КАК Наименование,
				|	питРецептура.Номер КАК Номер
				|ИЗ
				|	Документ.питРецептура КАК питРецептура
				|ГДЕ
				|	питРецептура.Номер = &НомерНовойРецептуры
				|	И питРецептура.ДатаКонца = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
				|	И НЕ питРецептура.ПометкаУдаления";
			ЗапросНовой.УстановитьПараметр("НомерНовойРецептуры", НомерНовойРецептуры);
			
			РезультатЗапросаНовой = ЗапросНовой.Выполнить();
			ВыборкаНовой = РезультатЗапросаНовой.Выбрать();
			
			Если ВыборкаНовой.Следующий() Тогда
				НоваяРецептура = ВыборкаНовой.Ссылка;
			КонецЕсли;
		КонецЕсли;
		
		СтрокаРецептуры.РецептураНовая = НоваяРецептура;  
		Если ЗначениеЗаполнено(НоваяРецептура) Тогда
			СтрокаРецептуры.РецептураНоваяНомер = НоваяРецептура.Номер;
		Иначе
			СтрокаРецептуры.РецептураНоваяНомер = "";
		КонецЕсли;
		
		// Заполняем номенклатуру из старой рецептуры
		СписокСтаройНоменклатуры = Новый СписокЗначений;
		СписокСтаройНоменклатурыКод = Новый СписокЗначений;
		СписокНовойНоменклатуры = Новый СписокЗначений;
		СписокНовойНоменклатурыКод = Новый СписокЗначений;
		
		// Получаем ингредиенты старой рецептуры
		СтараяРецептураОбъект = Выборка.СтараяРецептура.ПолучитьОбъект();
		Для Каждого СтрокаИнгредиенты Из СтараяРецептураОбъект.Ингредиенты Цикл
			Если СтрокаИнгредиенты.Номенклатура.АлкогольнаяПродукция И СтрокаИнгредиенты.Номенклатура.АлкогольнаяПродукцияВоВскрытойТаре Тогда
				СписокСтаройНоменклатуры.Добавить(СтрокаИнгредиенты.Номенклатура);
				СписокСтаройНоменклатурыКод.Добавить(СтрокаИнгредиенты.Номенклатура.Код);
			КонецЕсли;
		КонецЦикла;
		
		// Получаем ингредиенты новой рецептуры
		Если ЗначениеЗаполнено(НоваяРецептура) Тогда
			НоваяРецептураОбъект = НоваяРецептура.ПолучитьОбъект();
			Для Каждого СтрокаИнгредиенты Из НоваяРецептураОбъект.Ингредиенты Цикл
				Если СтрокаИнгредиенты.Номенклатура.АлкогольнаяПродукция Тогда
					СписокНовойНоменклатуры.Добавить(СтрокаИнгредиенты.Номенклатура);
					СписокНовойНоменклатурыКод.Добавить(СтрокаИнгредиенты.Номенклатура.Код);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		СтрокаРецептуры.НоменклатураСтарая = СписокСтаройНоменклатуры;
		СтрокаРецептуры.НоменклатураСтараяКод = СписокСтаройНоменклатурыКод;
		СтрокаРецептуры.НоменклатураНовая = СписокНовойНоменклатуры;
		СтрокаРецептуры.НоваяНоменклатураКод = СписокНовойНоменклатурыКод;
		
		// Статус - пустой, ошибки заполним позже при необходимости
		СтрокаРецептуры.СтрокаОшибки = "";
		
	КонецЦикла;
	
	// Выводим информацию о предзаполнении
	Если Рецептуры.Количество() > 0 Тогда
		Сообщить("Предзаполнено связей рецептур: " + Рецептуры.Количество());
	Иначе
		Сообщить("Связи рецептур не найдены. Используйте кнопку ""Получить рецептуры"" для создания новых.");
	КонецЕсли;
	
	ОбновитьДеревоРецептурНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПредзаполнение(Команда)
	ПредзаполнитьСвязиРецептурНаСервере();
КонецПроцедуры

#КонецОбласти

#Область Загрузка_Excel
&НаКлиенте
Процедура ИмяФайлаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Режим = РежимДиалогаВыбораФайла.Открытие;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.ПолноеИмяФайла = "";
	Фильтр = НСтр("ru = 'XLSX'; en = 'XLSX'")
	+ "(*.XLSX)|*.XLSX";
	ДиалогОткрытияФайла.Фильтр = Фильтр;
	ДиалогОткрытияФайла.Заголовок = "Выберите файл";
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		Файл = ДиалогОткрытияФайла.ПолноеИмяФайла;   
		АдресВХ = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(Файл));
		
		ИмяФайлаПриИзмененииНаСервере(АдресВХ);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьФайл(Команда)  
	
	АдресВХ = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(Файл));
	ПрочитатьФайлНаСервере(АдресВХ);
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьФайлНаСервере(Знач АдресВХ)
	
	ДВД = ПолучитьИзВременногоХранилища(АдресВХ);
	ИмяВрФайла = ПолучитьИмяВременногоФайла("XLSX");
	ДВД.Записать(ИмяВрФайла);
	
	Данные.Очистить();
	// Вывод в табличный документ
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ТабличныйДокумент.Прочитать(ИмяВрФайла, СпособЧтенияЗначенийТабличногоДокумента.Значение);
	
	УдалитьФайлы(ИмяВрФайла);
	
	// вывод в таблицу значений
	
	ПЗ = Новый ПостроительЗапроса;
	
	ПЗ.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТабличныйДокумент.Область());

	ПЗ.ДобавлениеПредставлений = ТипДобавленияПредставлений.НеДобавлять;

	ПЗ.ЗаполнитьНастройки();

	ПЗ.Выполнить();
	
	ТаблицаРезультат = ПЗ.Результат.Выгрузить();
    
    // Создаем новую таблицу значений с колонками строкового типа
    ТаблицаЗначений = Новый ТаблицаЗначений;
    Для Каждого Колонка Из ТаблицаРезультат.Колонки Цикл
        ТаблицаЗначений.Колонки.Добавить(Колонка.Имя, Новый ОписаниеТипов("Строка"));
    КонецЦикла;
    
    // Заполняем новую таблицу, преобразуя все значения в строки
    Для Каждого Строка Из ТаблицаРезультат Цикл
        НоваяСтрока = ТаблицаЗначений.Добавить();
        Для Каждого Колонка Из ТаблицаРезультат.Колонки Цикл
            Значение = Строка[Колонка.Имя];
            НоваяСтрока[Колонка.Имя] = Строка(Формат(Значение, "ЧГ=")); // Преобразуем любое значение в строку
        КонецЦикла;
    КонецЦикла;

	// выгружаем из таблицы все СерийнаяНоменклатураКод, чтобы выполнить поиск номенклатуры в справочнике
	СерийнаяКод = ТаблицаЗначений.ВыгрузитьКолонку("СерийнаяКод"); 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Ссылка,
		|	Номенклатура.Код КАК СерийнаяКод
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Код В(&СерийнаяКод)";
	
	Запрос.УстановитьПараметр("СерийнаяКод", СерийнаяКод);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	// формируем соответствие "Код - Ссылка" по данным результата запроса
	ТоварыСерии = Новый Соответствие;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ТоварыСерии.Вставить(Выборка.СерийнаяКод, Выборка.Ссылка);	
	КонецЦикла; 
	
	НоменклатураВоВскрытойТареКод = ТаблицаЗначений.ВыгрузитьКолонку("НоменклатураВоВскрытойТареКод");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Ссылка,
		|	Номенклатура.Код КАК НоменклатураВоВскрытойТареКод
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Код В(&НоменклатураВоВскрытойТареКод)";
	
	Запрос.УстановитьПараметр("НоменклатураВоВскрытойТареКод", НоменклатураВоВскрытойТареКод);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	// формируем соответствие "Код - Ссылка" по данным результата запроса
	НоменклатураВоВскрытойТареСоответствие = Новый Соответствие;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		НоменклатураВоВскрытойТареСоответствие.Вставить(СокрЛП(Выборка.НоменклатураВоВскрытойТареКод), Выборка.Ссылка);	
	КонецЦикла; 
	
	
	// заполняем табличную часть документа данными из промежуточной таблицы значений
	Для каждого СтрокаТовары Из ТаблицаЗначений Цикл

		НоваяСтрока = Данные.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовары);
		
		// товар получаем из сформированного выше соответствия
		НоваяСтрока.СерийнаяНоменклатура = ТоварыСерии[СтрокаТовары.СерийнаяКод]; 
		
		// товар получаем из сформированного выше соответствия
		НоваяСтрока.ВскрытаяПродукция = НоменклатураВоВскрытойТареСоответствие[СтрокаТовары.НоменклатураВоВскрытойТареКод];
		
		Если НЕ ЗначениеЗаполнено(НоваяСтрока.СерийнаяНоменклатура) Тогда
			Сообщение = Новый СообщениеПользователь;                       
			Сообщение.Текст = СтрШаблон("Не найдена номенклатура по коду ""%1""", СтрокаТовары.СерийнаяКод);
			Сообщение.Сообщить();	
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ИмяФайлаПриИзмененииНаСервере(Знач АдресВХ)
	ДВД = ПолучитьИзВременногоХранилища(АдресВХ);
	ИмяВрФайла = ПолучитьИмяВременногоФайла("XLSX");
	ДВД.Записать(ИмяВрФайла);
	
	ТабличныйДокумент.Прочитать(ИмяВрФайла, СпособЧтенияЗначенийТабличногоДокумента.Текст);
	
	УдалитьФайлы(ИмяВрФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаПриИзменении(Элемент)
	
	АдресВХ = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(Файл));
	ИмяФайлаПриИзмененииНаСервере(АдресВХ);
	
КонецПроцедуры

&НаСервере
Процедура СоздатьНоменклатуруНаСервере()
	
	Запрос = Новый Запрос;

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПЛ_СоответствиеСФронтСистемами.Объект КАК НоменклатураВоВскрытойТаре,
	|	ПЛ_СоответствиеСФронтСистемами.Код КАК КодКнопки,
	|	ПЛ_СоответствиеСФронтСистемами.Объект.Код КАК НоменклатураВоВскрытойТареКОД
	|ПОМЕСТИТЬ ВТ_Вскрытая
	|ИЗ
	|	РегистрСведений.ПЛ_СоответствиеСФронтСистемами КАК ПЛ_СоответствиеСФронтСистемами
	|ГДЕ
	|	ПЛ_СоответствиеСФронтСистемами.ТипОбъекта = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ПЛ_ТипыОбъектовФронтСистем.Номенклатура)
	|	И ПЛ_СоответствиеСФронтСистемами.ФронтСистема В(&ФронтСистема)
	|	И ПЛ_СоответствиеСФронтСистемами.Объект.АлкогольнаяПродукцияВоВскрытойТаре
	|	И НЕ ПЛ_СоответствиеСФронтСистемами.Объект.ВидНоменклатуры В (&ВидНоменклатуры)
	|	И НЕ ПЛ_СоответствиеСФронтСистемами.Объект.ВидАлкогольнойПродукции.Наименование ПОДОБНО &Наименование
	|	И НЕ ПЛ_СоответствиеСФронтСистемами.Объект.Наименование ПОДОБНО &НаименованиеНеиспользовать
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК СерийнаяНоменклатура,
	|	Номенклатура.Код КАК СерийнаяНоменклатураКод,
	|	ВТ_Вскрытая.НоменклатураВоВскрытойТаре КАК НоменклатураВоВскрытойТаре,
	|	ВТ_Вскрытая.КодКнопки КАК КодКнопки,
	|	ВТ_Вскрытая.НоменклатураВоВскрытойТареКОД КАК НоменклатураВоВскрытойТареКОД
	|ПОМЕСТИТЬ ВТ_Серийная
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Вскрытая КАК ВТ_Вскрытая
	|		ПО Номенклатура.ПЛ_НоменклатураВоВскрытойТаре = ВТ_Вскрытая.НоменклатураВоВскрытойТаре
	|ГДЕ
	|	Номенклатура.АлкогольнаяПродукция
	|	И НЕ Номенклатура.АлкогольнаяПродукцияВоВскрытойТаре
	|	И Номенклатура.ВидАлкогольнойПродукции.ВидЛицензии <> &ВидЛицензии
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Серийная.КодКнопки КАК КодКнопки,
	|	ВТ_Серийная.НоменклатураВоВскрытойТаре КАК НоменклатураВоВскрытойТаре,
	|	ВТ_Серийная.НоменклатураВоВскрытойТареКОД КАК НоменклатураВоВскрытойТареКОД,
	|	ВТ_Серийная.НоменклатураВоВскрытойТаре.Наименование КАК ИмяВскрытой,
	|	ВТ_Серийная.СерийнаяНоменклатураКод КАК СерийнаяНоменклатураКод,
	|	ВТ_Серийная.СерийнаяНоменклатура КАК СерийнаяНоменклатура,
	|	ВТ_Серийная.СерийнаяНоменклатура.Наименование КАК СерийнаяНоменклатураНаименование,
	|	ВТ_Серийная.СерийнаяНоменклатура.ОбъемДАЛ КАК ОбъемДАЛ,
	|	ЕСТЬNULL(ТоварыНаСкладахОстатки.ВНаличииОстаток, 0) КАК ВНаличииОстаток
	|ИЗ
	|	ВТ_Серийная КАК ВТ_Серийная
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(&Дата) КАК ТоварыНаСкладахОстатки
	|		ПО (ВТ_Серийная.СерийнаяНоменклатура = ТоварыНаСкладахОстатки.Номенклатура)";

	// Установка значений параметров
	Запрос.УстановитьПараметр("ФронтСистема", Перечисления.ПЛ_ТипыФронтСистем.Micros);
	Запрос.УстановитьПараметр("НаименованиеНеиспользовать", "%не использовать%");
	Запрос.УстановитьПараметр("Наименование", "%ПИВ%");
	Запрос.УстановитьПараметр("Дата", ТекущаяДатаСеанса());
	// Параметр "ВидНоменклатуры" (Список значений)
	Параметр = Новый СписокЗначений;
	Параметр.Добавить(Справочники.ВидыНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор("D4C02896-4114-11F0-94CB-005056A5AE58")));// Готовая алкогольная продукция с ФСМ (помарочно) (Справочники.ВидыНоменклатуры)
	Параметр.Добавить(Справочники.ВидыНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор("AE40B1EF-7234-11ED-825B-000C29589659")));// Готовая алкогольная продукция с ФСМ (Справочники.ВидыНоменклатуры)
	Запрос.УстановитьПараметр("ВидНоменклатуры", Параметр);
	Запрос.УстановитьПараметр("ВидЛицензии", Перечисления.ВидыЛицензийАлкогольнойПродукции.Пиво);
	РезультатЗапроса = Запрос.Выполнить();
	
	ТЗДляГруппировки = Новый ТаблицаЗначений;
	ТЗДляГруппировки.Колонки.Добавить("Наименование");
	ТЗДляГруппировки.Колонки.Добавить("ОбъемДАЛ", Новый ОписаниеТипов("Число"));
	ТЗДляГруппировки.Колонки.Добавить("НовоеНаименование");
	ТЗДляГруппировки.Колонки.Добавить("КодыСтаройНоменклатуры", Новый ОписаниеТипов("Строка"));
	ТЗДляГруппировки.Колонки.Добавить("КодыВскрытойНоменклатуры", Новый ОписаниеТипов("Строка"));
	ТЗДляГруппировки.Колонки.Добавить("ЕстьОстаток", Новый ОписаниеТипов("Булево"));
	ТЗДляГруппировки.Колонки.Добавить("ОбъектДляКопирования", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	
	Индекс = Новый Соответствие;
	СоответствиеСтараяКВскрытой = Новый Соответствие;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	// Создаем дополнительную структуру для номенклатуры без остатков
	ТЗДляОбновления = Новый ТаблицаЗначений;
	ТЗДляОбновления.Колонки.Добавить("СерийнаяНоменклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТЗДляОбновления.Колонки.Добавить("НоменклатураВоВскрытойТаре", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));

	Пока Выборка.Следующий() Цикл
		
		СоответствиеСтараяКВскрытой.Вставить(Выборка.СерийнаяНоменклатура, Выборка.НоменклатураВоВскрытойТаре);
		
		// Если остатка нет, добавляем в таблицу для обновления
		Если Выборка.ВНаличииОстаток = 0 Тогда
			СтрокаДляОбновления = ТЗДляОбновления.Добавить();
			СтрокаДляОбновления.СерийнаяНоменклатура = Выборка.СерийнаяНоменклатура;
			СтрокаДляОбновления.НоменклатураВоВскрытойТаре = Выборка.НоменклатураВоВскрытойТаре;
		Иначе
			// Обрабатываем номенклатуру с остатками как было раньше
			Если Выборка.ИмяВскрытой = NULL Тогда
				ИсходноеНаименование = Выборка.СерийнаяНоменклатураНаименование;
			Иначе
				ИсходноеНаименование = Выборка.ИмяВскрытой;
			КонецЕсли;
			
			Добавка = " [mrs]";
			МаксДлина = 150;
			МаксДлинаОсновной = МаксДлина - СтрДлина(Добавка);
			
			Если СтрДлина(ИсходноеНаименование) > МаксДлинаОсновной Тогда
				ИсходноеНаименование = Лев(ИсходноеНаименование, МаксДлинаОсновной);
			КонецЕсли;
			
			НовоеНаименование = ИсходноеНаименование + Добавка;
			
			НайденнаяСтрока = Индекс[НовоеНаименование];
			
			Если НайденнаяСтрока = Неопределено Тогда
				НайденнаяСтрока = ТЗДляГруппировки.Добавить();
				НайденнаяСтрока.НовоеНаименование = НовоеНаименование;
				НайденнаяСтрока.ОбъемДАЛ = Выборка.ОбъемДАЛ;
				НайденнаяСтрока.КодыСтаройНоменклатуры = "";
				НайденнаяСтрока.КодыВскрытойНоменклатуры = "";
				НайденнаяСтрока.ЕстьОстаток = Ложь;
				НайденнаяСтрока.ОбъектДляКопирования = Выборка.СерийнаяНоменклатура;
				Индекс.Вставить(НовоеНаименование, НайденнаяСтрока);
			КонецЕсли;
			
			// Агрегируем данные
			Если СтрНайти(НайденнаяСтрока.КодыСтаройНоменклатуры, Выборка.СерийнаяНоменклатураКод) = 0 Тогда
				НайденнаяСтрока.КодыСтаройНоменклатуры = ?(ПустаяСтрока(НайденнаяСтрока.КодыСтаройНоменклатуры),
					Выборка.СерийнаяНоменклатураКод,
					НайденнаяСтрока.КодыСтаройНоменклатуры + ";" + Выборка.СерийнаяНоменклатураКод);
			КонецЕсли;
			
			Если Выборка.КодКнопки <> NULL И СтрНайти(НайденнаяСтрока.КодыВскрытойНоменклатуры, Выборка.КодКнопки) = 0 Тогда
				НайденнаяСтрока.КодыВскрытойНоменклатуры = ?(ПустаяСтрока(НайденнаяСтрока.КодыВскрытойНоменклатуры),
					Выборка.КодКнопки,
					НайденнаяСтрока.КодыВскрытойНоменклатуры + ";" + Выборка.КодКнопки);
			КонецЕсли;
			
			Если Выборка.ВНаличииОстаток > 0 Тогда
				НайденнаяСтрока.ЕстьОстаток = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;

	// Сначала скорректируем все наименования
	Для Каждого СтрокаГруппы Из ТЗДляГруппировки Цикл
		СтрокаГруппы.НовоеНаименование = СкорректироватьНаименованиеПоОбъему(СтрокаГруппы.НовоеНаименование, СтрокаГруппы.ОбъемДАЛ);
	КонецЦикла;

	ЕдиницаИзмеренияЛитр = питОбщегоНазначения.ПолучитьБазовуюЕдиницуИзмеренияПоКоду("112");
	ЕдиницаИзмеренияШтуки = питОбщегоНазначения.ПолучитьБазовуюЕдиницуИзмеренияПоКоду("796"); 
	ЕдиницаИзмеренияМиллиЛитр = питОбщегоНазначения.ПолучитьБазовуюЕдиницуИзмеренияПоКоду("111");
	
	// Оптимизация: одним запросом найдем всю существующую номенклатуру по наименованию
	МассивНовыхНаименований = ТЗДляГруппировки.ВыгрузитьКолонку("НовоеНаименование");
	
	ЗапросПоиска = Новый Запрос;
	ЗапросПоиска.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК НоменклатураНоваяСсылка,
		|	Номенклатура.Код КАК НоменклатураНоваяКод,
		|	Номенклатура.Наименование КАК Наименование
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Наименование В(&МассивНаименований)";
	ЗапросПоиска.УстановитьПараметр("МассивНаименований", МассивНовыхНаименований);
	ТаблицаСуществующих = ЗапросПоиска.Выполнить().Выгрузить();
	
	СоответствиеСуществующих = Новый Соответствие;
	Для Каждого Строка Из ТаблицаСуществующих Цикл
		СоответствиеСуществующих.Вставить(Строка.Наименование, Новый Структура("Ссылка, Код", Строка.НоменклатураНоваяСсылка, Строка.НоменклатураНоваяКод));
	КонецЦикла;
	
	// ДОПОЛНИТЕЛЬНО: поиск уже созданной номенклатуры с тегом [mrs] для избежания дубликатов
	ЗапросУжеСозданных = Новый Запрос;
	ЗапросУжеСозданных.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК НоменклатураНоваяСсылка,
		|	Номенклатура.Код КАК НоменклатураНоваяКод,
		|	Номенклатура.Наименование КАК Наименование
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Наименование ПОДОБНО ""%[mrs]%""";
	
	ТаблицаУжеСозданных = ЗапросУжеСозданных.Выполнить().Выгрузить();
	
	// Дополняем соответствие уже созданными номенклатурами
	Для Каждого Строка Из ТаблицаУжеСозданных Цикл
		Если СоответствиеСуществующих[Строка.Наименование] = Неопределено Тогда
			СоответствиеСуществующих.Вставить(Строка.Наименование, Новый Структура("Ссылка, Код", Строка.НоменклатураНоваяСсылка, Строка.НоменклатураНоваяКод));
		КонецЕсли;
	КонецЦикла;
	
	// Выводим информацию о найденной существующей номенклатуре
	КоличествоСуществующей = СоответствиеСуществующих.Количество();
	Если КоличествоСуществующей > 0 Тогда
		Сообщить("Найдено уже существующей номенклатуры: " + КоличествоСуществующей + " из " + ТЗДляГруппировки.Количество() + ". Она не будет создаваться повторно.");
	КонецЕсли;

    // Оптимизация: одним запросом получим ссылки на старую номенклатуру
	УникальныеСтарыеКоды = Новый Соответствие;
	Для Каждого СтрокаГруппы Из ТЗДляГруппировки Цикл
		МассивКодов = СтрРазделить(СтрокаГруппы.КодыСтаройНоменклатуры, ";");
		Для Каждого Код Из МассивКодов Цикл
			УникальныеСтарыеКоды.Вставить(Код, Истина);
		КонецЦикла;
	КонецЦикла;
	
	МассивКодовДляЗапроса = Новый Массив;
	Для Каждого Элемент Из УникальныеСтарыеКоды Цикл
		МассивКодовДляЗапроса.Добавить(Элемент.Ключ);
	КонецЦикла;
	
	ЗапросСтарыхСсылок = Новый Запрос("ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка,
	|	Номенклатура.Код КАК Код
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Код В (&Коды)");
	ЗапросСтарыхСсылок.УстановитьПараметр("Коды", МассивКодовДляЗапроса);
	ТаблицаСтарыхСсылок = ЗапросСтарыхСсылок.Выполнить().Выгрузить();
	
	СоответствиеСтарыхСсылок = Новый Соответствие;
	Для Каждого Строка Из ТаблицаСтарыхСсылок Цикл
		СоответствиеСтарыхСсылок.Вставить(Строка.Код, Строка.Ссылка);
	КонецЦикла;
	
	ТЗ_ЗаписиВРегистр = Новый ТаблицаЗначений;
	ТЗ_ЗаписиВРегистр.Колонки.Добавить("СтараяНоменклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТЗ_ЗаписиВРегистр.Колонки.Добавить("НоваяНоменклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТЗ_ЗаписиВРегистр.Колонки.Добавить("ВскрытаяНоменклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));	
	// Создаем номенклатуру небольшими пакетами для избежания блокировок
	РазмерПакета = 10; // Обрабатываем по 10 элементов за раз
	ВсегоСтрок = ТЗДляГруппировки.Количество();
	КоличествоПакетов = Цел(ВсегоСтрок / РазмерПакета) + ?(ВсегоСтрок % РазмерПакета = 0, 0, 1);
	
	Сообщить("Начинаем создание номенклатуры. Всего к обработке: " + ВсегоСтрок + " элементов в " + КоличествоПакетов + " пакетах.");
	
	ОбщееКоличествоСозданных = 0;
	ОбщееКоличествоПропущенных = 0;
	
	Для НомерПакета = 0 По КоличествоПакетов - 1 Цикл
		
		НачальныйИндекс = НомерПакета * РазмерПакета;
		КонечныйИндекс = Мин((НомерПакета + 1) * РазмерПакета - 1, ВсегоСтрок - 1);
		
		КоличествоСозданныхВПакете = 0;
		КоличествоПропущенныхВПакете = 0;
		
		// Таблица записей только для текущего пакета
		ТЗ_ЗаписиВРегистрПакет = ТЗ_ЗаписиВРегистр.СкопироватьКолонки();
		
		НачатьТранзакцию();
		
		Попытка
		
			Для Индекс = НачальныйИндекс По КонечныйИндекс Цикл
				
				СтрокаГруппы = ТЗДляГруппировки[Индекс];
				
				СуществующаяНоменклатура = СоответствиеСуществующих[СтрокаГруппы.НовоеНаименование];
			
				Если СуществующаяНоменклатура = Неопределено Тогда
					
					КоличествоСозданныхВПакете = КоличествоСозданныхВПакете + 1;
					
					ОбъектСтарая = СтрокаГруппы.ОбъектДляКопирования.ПолучитьОбъект();
					
					НоваяНоменклатураОбъект = Справочники.Номенклатура.СоздатьЭлемент();
					
					НоваяНоменклатураОбъект.ОбменДанными.Загрузка = Истина;
					
					ЗаполнитьЗначенияСвойств(НоваяНоменклатураОбъект, ОбъектСтарая,,"Владелец, питВыгружатьВРБК, Код");
					
					НоваяНоменклатураОбъект.Наименование = СтрокаГруппы.НовоеНаименование;
					НоваяНоменклатураОбъект.НаименованиеПолное = СтрокаГруппы.НовоеНаименование;
					НоваяНоменклатураОбъект.ЕдиницаИзмерения = ЕдиницаИзмеренияЛитр.Ссылка;
					НоваяНоменклатураОбъект.ИспользоватьУпаковки = Истина;
					НоваяНоменклатураОбъект.НаборУпаковок = Справочники.НаборыУпаковок.ИндивидуальныйДляНоменклатуры;
					НоваяНоменклатураОбъект.Записать();
					
					УпаковкаОбъект = Справочники.УпаковкиЕдиницыИзмерения.СоздатьЭлемент();
					УпаковкаОбъект.ЕдиницаИзмерения = ЕдиницаИзмеренияШтуки;
					УпаковкаОбъект.ТипИзмеряемойВеличины = Перечисления.ТипыИзмеряемыхВеличин.Упаковка;
					УпаковкаОбъект.ТипУпаковки = Перечисления.ТипыУпаковокНоменклатуры.Конечная;
					УпаковкаОбъект.Числитель = НоваяНоменклатураОбъект.ОбъемДАЛ * 10;
					УпаковкаОбъект.Знаменатель = 1;
					УпаковкаОбъект.Владелец = НоваяНоменклатураОбъект.Ссылка;
					УпаковкаОбъект.Наименование = ЕдиницаИзмеренияШтуки.Наименование + " (" + СТРОКА(НоваяНоменклатураОбъект.ОбъемДАЛ * 10) + " " + ЕдиницаИзмеренияЛитр.Наименование + ")";
					УпаковкаОбъект.ОбменДанными.Загрузка = Истина;
					УпаковкаОбъект.Записать();
					
					НоваяНоменклатураОбъектДляОбновления = НоваяНоменклатураОбъект.Ссылка.ПолучитьОбъект();
					НоваяНоменклатураОбъектДляОбновления.ОбменДанными.Загрузка = Истина;
					НоваяНоменклатураОбъектДляОбновления.ЕдиницаДляОтчетов = УпаковкаОбъект.Ссылка;
					НоваяНоменклатураОбъектДляОбновления.КоэффициентЕдиницыДляОтчетов = НоваяНоменклатураОбъект.ОбъемДАЛ *10;
					
					НоваяНоменклатураОбъектДляОбновления.Записать();
					
					ДанныеНоменклатуры = Новый Структура();
					ДанныеНоменклатуры.Вставить("Номенклатура",                        НоваяНоменклатураОбъект.Ссылка);
					ДанныеНоменклатуры.Вставить("ЕмкостьПотребительскойУпаковки",      НоваяНоменклатураОбъект.ОбъемДАЛ * 10000);
					ДанныеНоменклатуры.Вставить("КоличествоВПотребительскойУпаковке",  НоваяНоменклатураОбъект.ОбъемДАЛ * 10);
					ДанныеНоменклатуры.Вставить("ВариантЧастичногоВыбытия",            Перечисления.ВариантыУчетаЧастичногоВыбытияИС.ТекущаяНоменклатура);
					ДанныеНоменклатуры.Вставить("ВариантИспользованияЕдиницыХранения", Перечисления.ВариантыИспользованияЕдиницыХраненияИС.ЗаданУпаковками);
					ДанныеНоменклатуры.Вставить("ПотребительскаяУпаковка",             УпаковкаОбъект.Ссылка);
					ДанныеНоменклатуры.Вставить("УпаковкаЧастичногоВыбытия",           ЕдиницаИзмеренияМиллиЛитр);
			
					РегистрыСведений.ОписаниеНоменклатурыИС.УстановитьОписание(ДанныеНоменклатуры);
					
					МассивСтарыхКодов = СтрРазделить(СтрокаГруппы.КодыСтаройНоменклатуры, ";");

					Для Каждого Код Из МассивСтарыхКодов Цикл
						СсылкаНаСтарую = СоответствиеСтарыхСсылок[Код];
						Если СсылкаНаСтарую = Неопределено Тогда
							Продолжить;
						КонецЕсли;

						ВскрытаяСсылка = СоответствиеСтараяКВскрытой[СсылкаНаСтарую];
						
						НоваяСтрокаРегистра = ТЗ_ЗаписиВРегистрПакет.Добавить();
						НоваяСтрокаРегистра.СтараяНоменклатура = СсылкаНаСтарую;
						НоваяСтрокаРегистра.НоваяНоменклатура = НоваяНоменклатураОбъект.Ссылка;
						НоваяСтрокаРегистра.ВскрытаяНоменклатура = ВскрытаяСсылка;					
					КонецЦикла;
					 
				Иначе
					
					КоличествоПропущенныхВПакете = КоличествоПропущенныхВПакете + 1;
					
					СсылкаНаНовуюНоменклатуру = СуществующаяНоменклатура.Ссылка;
					
					ОбъектНовойНоменклатуры = СсылкаНаНовуюНоменклатуру.ПолучитьОбъект();
					ОбъектНовойНоменклатуры.ОбменДанными.Загрузка = Истина;
					
					ОбъектНовойНоменклатуры.Записать();
					
					МассивСтарыхКодов = СтрРазделить(СтрокаГруппы.КодыСтаройНоменклатуры, ";");
					Для Каждого Код Из МассивСтарыхКодов Цикл
						СсылкаНаСтарую = СоответствиеСтарыхСсылок[Код];
						Если СсылкаНаСтарую = Неопределено Тогда
							Продолжить;
						КонецЕсли;

						ВскрытаяСсылка = СоответствиеСтараяКВскрытой[СсылкаНаСтарую];
						
						НоваяСтрокаРегистра = ТЗ_ЗаписиВРегистрПакет.Добавить();
						НоваяСтрокаРегистра.СтараяНоменклатура = СсылкаНаСтарую;
						НоваяСтрокаРегистра.НоваяНоменклатура = СсылкаНаНовуюНоменклатуру;
						НоваяСтрокаРегистра.ВскрытаяНоменклатура = ВскрытаяСсылка;
						
					КонецЦикла;
				
				КонецЕсли;
			
			КонецЦикла;

			ЗафиксироватьТранзакцию();
		
		Исключение
			// В случае ошибки откатываем транзакцию
			ОтменитьТранзакцию();
			Сообщить("Ошибка при создании номенклатуры (пакет " + (НомерПакета + 1) + " из " + КоличествоПакетов + "): " + ОписаниеОшибки());
			ВызватьИсключение "Ошибка при создании номенклатуры: " + ОписаниеОшибки();
		КонецПопытки;
		
		// Промежуточная запись в регистр после каждого пакета для возможности восстановления
		Если ТЗ_ЗаписиВРегистрПакет.Количество() > 0 Тогда
			
			// Записываем каждую запись отдельно через МенеджерЗаписи (избегаем дубликатов)
			Для Каждого СтрокаПакета Из ТЗ_ЗаписиВРегистрПакет Цикл
				
				МенеджерЗаписи = РегистрыСведений.MRS_СоответствиеСтаройНовойНоменклатуры.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.СтараяНоменклатура = СтрокаПакета.СтараяНоменклатура;
				МенеджерЗаписи.НоваяНоменклатура = СтрокаПакета.НоваяНоменклатура;
				МенеджерЗаписи.ВскрытаяНоменклатура = СтрокаПакета.ВскрытаяНоменклатура; 
				МенеджерЗаписи.Записать();
				
			КонецЦикла;
			
			// Добавляем записи пакета в основную таблицу
			Для Каждого СтрокаПакета Из ТЗ_ЗаписиВРегистрПакет Цикл
				НоваяСтрокаОсновной = ТЗ_ЗаписиВРегистр.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаОсновной, СтрокаПакета);
			КонецЦикла;
			
		КонецЕсли;
		
		// Обновляем общую статистику
		ОбщееКоличествоСозданных = ОбщееКоличествоСозданных + КоличествоСозданныхВПакете;
		ОбщееКоличествоПропущенных = ОбщееКоличествоПропущенных + КоличествоПропущенныхВПакете;
		
		// Выводим детальный прогресс
		Процент = Окр((НомерПакета + 1) / КоличествоПакетов * 100, 0);
		СообщениеОПрогрессе = "Пакет " + (НомерПакета + 1) + "/" + КоличествоПакетов + " (" + Процент + "%): ";
		СообщениеОПрогрессе = СообщениеОПрогрессе + "создано " + КоличествоСозданныхВПакете + ", пропущено " + КоличествоПропущенныхВПакете;
		СообщениеОПрогрессе = СообщениеОПрогрессе + ". Итого: создано " + ОбщееКоличествоСозданных + ", пропущено " + ОбщееКоличествоПропущенных;
		Сообщить(СообщениеОПрогрессе);
		
	КонецЦикла;
	
	// Финальная проверка и запись оставшихся данных в регистр
	Сообщить("Итого записей в регистре соответствий будет записано: " + ТЗ_ЗаписиВРегистр.Количество());

	// Итоговое сообщение
	Сообщить("=== СОЗДАНИЕ НОМЕНКЛАТУРЫ ЗАВЕРШЕНО ===");
	Сообщить("Всего обработано: " + ВсегоСтрок + " элементов");
	Сообщить("Создано новых: " + ОбщееКоличествоСозданных);
	Сообщить("Пропущено (уже существовали): " + ОбщееКоличествоПропущенных);
	Сообщить("Записей в регистре соответствий: " + ТЗ_ЗаписиВРегистр.Количество());
	
	// Обработка номенклатуры без остатков - изменяем единицу хранения на литры и создаем упаковку
	Если ТЗДляОбновления.Количество() > 0 Тогда
		
		// Обрабатываем номенклатуру без остатков пакетами
		РазмерПакетаОбновления = 5; // Меньший размер пакета для операций обновления
		ВсегоСтрокОбновления = ТЗДляОбновления.Количество();
		КоличествоПакетовОбновления = Цел(ВсегоСтрокОбновления / РазмерПакетаОбновления) + ?(ВсегоСтрокОбновления % РазмерПакетаОбновления = 0, 0, 1);
		
		Для НомерПакетаОбновления = 0 По КоличествоПакетовОбновления - 1 Цикл
			
			НачальныйИндексОбновления = НомерПакетаОбновления * РазмерПакетаОбновления;
			КонечныйИндексОбновления = Мин((НомерПакетаОбновления + 1) * РазмерПакетаОбновления - 1, ВсегоСтрокОбновления - 1);
			
			НачатьТранзакцию();
			
			Попытка
				
				Для ИндексОбновления = НачальныйИндексОбновления По КонечныйИндексОбновления Цикл
					
					СтрокаДляОбновления = ТЗДляОбновления[ИндексОбновления];
					
					НоменклатураОбъект = СтрокаДляОбновления.СерийнаяНоменклатура.ПолучитьОбъект();
					
					// Изменяем единицу хранения остатков на литры
					НоменклатураОбъект.ЕдиницаХраненияОстатков = ЕдиницаИзмеренияЛитр.Ссылка;
					НоменклатураОбъект.ОбменДанными.Загрузка = Истина;
					// Записываем изменения
					НоменклатураОбъект.Записать();
					
					// Создаем упаковку
					УпаковкаОбъект = Справочники.УпаковкиЕдиницыИзмерения.СоздатьЭлемент();
					УпаковкаОбъект.ЕдиницаИзмерения = ЕдиницаИзмеренияШтуки;
					УпаковкаОбъект.ТипИзмеряемойВеличины = Перечисления.ТипыИзмеряемыхВеличин.Упаковка;
					УпаковкаОбъект.ТипУпаковки = Перечисления.ТипыУпаковокНоменклатуры.Конечная;
					УпаковкаОбъект.Числитель = НоменклатураОбъект.ОбъемДАЛ * 10;
					УпаковкаОбъект.Знаменатель = 1;
					УпаковкаОбъект.Владелец = НоменклатураОбъект.Ссылка;
					УпаковкаОбъект.Наименование = ЕдиницаИзмеренияШтуки.Наименование + " (" + СТРОКА(НоменклатураОбъект.ОбъемДАЛ * 10) + " " + ЕдиницаИзмеренияЛитр.Наименование + ")";
					УпаковкаОбъект.ОбменДанными.Загрузка = Истина;
					УпаковкаОбъект.Записать();
					
					// Обновляем номенклатуру с новой упаковкой
					НоменклатураОбъектДляОбновления = НоменклатураОбъект.Ссылка.ПолучитьОбъект();
					НоменклатураОбъектДляОбновления.ОбменДанными.Загрузка = Истина;
					НоменклатураОбъектДляОбновления.ЕдиницаДляОтчетов = УпаковкаОбъект.Ссылка;
					НоменклатураОбъектДляОбновления.КоэффициентЕдиницыДляОтчетов = НоменклатураОбъект.ОбъемДАЛ *10;
					НоменклатураОбъектДляОбновления.Записать();
					
					// Создаем описание для ИС
					ДанныеНоменклатуры = Новый Структура();
					ДанныеНоменклатуры.Вставить("Номенклатура", НоменклатураОбъект.Ссылка);
					ДанныеНоменклатуры.Вставить("ЕмкостьПотребительскойУпаковки", НоменклатураОбъект.ОбъемДАЛ * 10000);
					ДанныеНоменклатуры.Вставить("КоличествоВПотребительскойУпаковке", НоменклатураОбъект.ОбъемДАЛ * 10);
					ДанныеНоменклатуры.Вставить("ВариантЧастичногоВыбытия", Перечисления.ВариантыУчетаЧастичногоВыбытияИС.ТекущаяНоменклатура);
					ДанныеНоменклатуры.Вставить("ВариантИспользованияЕдиницыХранения", Перечисления.ВариантыИспользованияЕдиницыХраненияИС.ЗаданУпаковками);
					ДанныеНоменклатуры.Вставить("ПотребительскаяУпаковка", УпаковкаОбъект.Ссылка);
					ДанныеНоменклатуры.Вставить("УпаковкаЧастичногоВыбытия", ЕдиницаИзмеренияМиллиЛитр);
					
					РегистрыСведений.ОписаниеНоменклатурыИС.УстановитьОписание(ДанныеНоменклатуры);
					
				КонецЦикла;
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				// В случае ошибки откатываем транзакцию
				ОтменитьТранзакцию();
				Сообщить("Ошибка при обновлении номенклатуры без остатков (пакет " + (НомерПакетаОбновления + 1) + " из " + КоличествоПакетовОбновления + "): " + ОписаниеОшибки());
				ВызватьИсключение "Ошибка при обновлении номенклатуры без остатков: " + ОписаниеОшибки();
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНоменклатуру(Команда)
	СоздатьНоменклатуруНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПолучитьРецептурыНаСервере()
	
	// 1. Получаем рецепты, которые еще не были обработаны.
	СвойствоНоваяРецептура = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("MRS_НоваяРецептура");
	
	лТекст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		         |	питРецептураИнгредиенты.Ссылка КАК Ссылка
		         |ИЗ
		         |	Документ.питРецептура.Ингредиенты КАК питРецептураИнгредиенты
		         |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.питРецептура.ДополнительныеРеквизиты КАК ДопРеквизиты
		         |		ПО питРецептураИнгредиенты.Ссылка = ДопРеквизиты.Ссылка
		         |		И ДопРеквизиты.Свойство = &СвойствоНоваяРецептура
		         |ГДЕ
		         |	питРецептураИнгредиенты.Ссылка.ДатаКонца = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		         |	И НЕ питРецептураИнгредиенты.Ссылка.ПометкаУдаления
		         |	И питРецептураИнгредиенты.Номенклатура.АлкогольнаяПродукцияВоВскрытойТаре
		         |	И питРецептураИнгредиенты.Номенклатура.АлкогольнаяПродукция
		         |	И (ДопРеквизиты.Ссылка ЕСТЬ NULL ИЛИ ДопРеквизиты.Значение = """")";

	лЗапрос = Новый Запрос(лТекст);
	лЗапрос.УстановитьПараметр("СвойствоНоваяРецептура", СвойствоНоваяРецептура);

	ТаблицаРецептов = лЗапрос.Выполнить().Выгрузить();
	
	Если ТаблицаРецептов.Количество() = 0 Тогда
		Сообщить("Нет новых рецептур для обработки.");
		Возврат;
	КонецЕсли;
	
	Сообщить("Найдено " + ТаблицаРецептов.Количество() + " рецептур для обработки.");
	
	// 2. Обрабатываем рецепты пакетами
	РазмерПакета = 10;
	ВсегоСтрок = ТаблицаРецептов.Количество();
	КоличествоПакетов = Цел(ВсегоСтрок / РазмерПакета) + ?(ВсегоСтрок % РазмерПакета = 0, 0, 1);
	
	Для НомерПакета = 0 По КоличествоПакетов - 1 Цикл
		
		НачальныйИндекс = НомерПакета * РазмерПакета;
		КонечныйИндекс = Мин((НомерПакета + 1) * РазмерПакета - 1, ВсегоСтрок - 1);
		
		ОбработатьПакетРецептур(ТаблицаРецептов, НачальныйИндекс, КонечныйИндекс, СвойствоНоваяРецептура, НомерПакета, КоличествоПакетов);
		
	КонецЦикла;

	ОбновитьДеревоРецептурНаСервере();
	Сообщить("=== ОБРАБОТКА РЕЦЕПТУР ЗАВЕРШЕНА ===");
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПакетРецептур(ТаблицаРецептов, НачальныйИндекс, КонечныйИндекс, СвойствоНоваяРецептура, НомерПакета, КоличествоПакетов)
	
	СообщениеОПакете = "";
	
	НачатьТранзакцию();
	Попытка
		
		Для Индекс = НачальныйИндекс По КонечныйИндекс Цикл
			ТекущаяСтрока = ТаблицаРецептов[Индекс];
			ОбработатьОднуРецептуру(ТекущаяСтрока.Ссылка, СвойствоНоваяРецептура);
		КонецЦикла;
		
		СообщениеОПакете = "Обработан пакет " + (НомерПакета + 1) + " из " + КоличествоПакетов 
			+ ". Рецептур: " + (КонечныйИндекс - НачальныйИндекс + 1);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		Сообщить("Ошибка при обработке пакета " + (НомерПакета + 1) + ": " + ОписаниеОшибки());
		ВызватьИсключение "Ошибка при создании рецептур: " + ОписаниеОшибки();
	КонецПопытки;
	
	Если НЕ ПустаяСтрока(СообщениеОПакете) Тогда
		Сообщить(СообщениеОПакете);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьОднуРецептуру(СсылкаНаРецептуру, СвойствоНоваяРецептура)
	
	// Проверяем еще раз, вдруг рецептура была обработана в параллельном сеансе
	ЗначениеСвойства = УправлениеСвойствами.ЗначениеСвойства(СсылкаНаРецептуру, СвойствоНоваяРецептура);
	Если ЗначениеСвойства <> Неопределено И НЕ ПустаяСтрока(СокрЛП(ЗначениеСвойства)) Тогда
		Возврат;
	КонецЕсли;

	ТекРецептура = СсылкаНаРецептуру.ПолучитьОбъект();
	
	СтрокаРецептуры = Рецептуры.Добавить();	
	СтрокаРецептуры.РецептураСтарая = СсылкаНаРецептуру;
	СтрокаРецептуры.НомерСтарой    = ТекРецептура.Номер;
	
	СписокНоменклатуры = Новый СписокЗначений;
	СписокНоменклатурыКоды = Новый СписокЗначений;

	Для Каждого СтрокаИнгредиенты ИЗ ТекРецептура.Ингредиенты Цикл
		Если СтрокаИнгредиенты.Номенклатура.АлкогольнаяПродукция 
			И СтрокаИнгредиенты.Номенклатура.АлкогольнаяПродукцияВоВскрытойТаре Тогда
			СписокНоменклатуры.Добавить(СтрокаИнгредиенты.Номенклатура);	
			СписокНоменклатурыКоды.Добавить(СтрокаИнгредиенты.Номенклатура.Код);
		КонецЕсли;
	КонецЦикла;
	
	СтрокаРецептуры.НоменклатураСтарая = СписокНоменклатуры; 
	СтрокаРецептуры.НоменклатураСтараяКод = СписокНоменклатурыКоды;
	СтрокаРецептуры.Подразделение = ТекРецептура.Подразделение;
	
	СтруктураВозврата = НоваяРецептура(ТекРецептура);
	
	СтрокаРецептуры.НоменклатураНовая = СтруктураВозврата.СписокНовойНоменклатуры;
	СтрокаРецептуры.НоваяНоменклатураКод = СтруктураВозврата.СписокНовойНоменклатурыКод;
	СтрокаРецептуры.РецептураНовая    =  СтруктураВозврата.Документ;
	СтрокаРецептуры.РецептураНоваяНомер = СтруктураВозврата.НомерРецептуры;
	СтрокаРецептуры.СтрокаОшибки =  СтруктураВозврата.ТекстОшибки; 
		
КонецПроцедуры

&НаСервере
Функция НоваяРецептура(РецептураИсходная)
	
		СтруктураВозврата =  Новый Структура;
		СписокНовойНоменклатуры = Новый СписокЗначений;
		СписокНовойНоменклатурыКод = Новый СписокЗначений;
		НовДок = Неопределено;		
		ТекстОшибки = "";
		
		СвойствоДопРеквиз = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("MRS_НоваяРецептура");
		ЗначениеСвойства = СокрЛП(УправлениеСвойствами.ЗначениеСвойства(РецептураИсходная.Ссылка, СвойствоДопРеквиз));
		
		Запрос = Новый Запрос;
		Запрос.Текст = " ВЫБРАТЬ
		                |	питРецептура.Ссылка КАК Ссылка
		                |ИЗ
		                |	Документ.питРецептура КАК питРецептура
		                |ГДЕ
		                |	питРецептура.Номер = &Номер
		                |	И питРецептура.ДатаКонца = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		                |			И НЕ питРецептура.ПометкаУдаления";
		
		Запрос.УстановитьПараметр("Номер", ЗначениеСвойства);
		
		РезультатЗапроса = Запрос.Выполнить().Выбрать();
		
		Пока РезультатЗапроса.Следующий() Цикл
			
			НовДокСсылка = РезультатЗапроса.Ссылка;
			НовДок = НовДокСсылка.ПолучитьОбъект();	
			
		КонецЦикла;
		
		Если НовДок <> Неопределено Тогда
			// Новый документ уже найден, используем его
		Иначе
			
			НовДок = РецептураИсходная.Скопировать();    
			НовДок.Дата        = ТекущаяДатаСеанса();
			НовДок.ДатаНачала  =  Дата(2025, 12, 1);
			НовДок.ДатаКонца   =  Дата(2025, 12, 1);
			НовДок.Комментарий = РецептураИсходная.Комментарий + Символы.ПС + "Создан обработкой для перевода в серийный алкоголь";
			НовДок.Наименование = НовДок.Наименование + " [_mrs]";
	
		КонецЕсли;
			
		// Рекурсивно создадим или заполним уже созданными рецептурами
		// табчасть ингридиенты для вложенных рецептур
		Для Каждого СтрокаИнгредиенты ИЗ НовДок.Ингредиенты Цикл
			Если СтрокаИнгредиенты.Номенклатура.АлкогольнаяПродукция и СтрокаИнгредиенты.Номенклатура.АлкогольнаяПродукцияВоВскрытойТаре Тогда
				
				// Ищем новую номенклатуру в регистре соответствий по вскрытой номенклатуре
				Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ
					|	MRS_СоответствиеСтаройНовойНоменклатуры.НоваяНоменклатура КАК НоваяНоменклатура,
					|	MRS_СоответствиеСтаройНовойНоменклатуры.НоваяНоменклатура.Код КАК НоваяНоменклатураКод
					|ИЗ
					|	РегистрСведений.MRS_СоответствиеСтаройНовойНоменклатуры КАК MRS_СоответствиеСтаройНовойНоменклатуры
					|ГДЕ
					|	MRS_СоответствиеСтаройНовойНоменклатуры.ВскрытаяНоменклатура = &ВскрытаяНоменклатура";
				
				Запрос.УстановитьПараметр("ВскрытаяНоменклатура", СтрокаИнгредиенты.Номенклатура);
				
				РезультатЗапроса = Запрос.Выполнить().Выбрать();
				
				НайденоСоответствие = Ложь;
				Пока РезультатЗапроса.Следующий() Цикл
					
					СтрокаИнгредиенты.Номенклатура = РезультатЗапроса.НоваяНоменклатура;
					СписокНовойНоменклатуры.Добавить(РезультатЗапроса.НоваяНоменклатура);
					СписокНовойНоменклатурыКод.Добавить(РезультатЗапроса.НоваяНоменклатураКод);
					НайденоСоответствие = Истина;
					
				КонецЦикла;
				
				Если НайденоСоответствие Тогда

					Попытка 
						     						
						НовДок.Записать();
						СтруктураВозврата.Вставить("Документ", НовДок.Ссылка);
						СтруктураВозврата.Вставить("НомерРецептуры", НовДок.Номер); 
						
					Исключение
						
						СтрокаСообщенияОбОшибке = НСтр("ru = 'Не удалось записать новый документ по Рецептуре:%1.
						|Описание ошибки: %2'");
						
						ТекстОшибки = ТекстОшибки + Символы.ПС + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщенияОбОшибке,
								РецептураИсходная.Ссылка,
							КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
					КонецПопытки;

				Иначе
					
					СтрокаСообщенияОбОшибке = НСтр("ru = 'Не найдено соответствие в регистре MRS_СоответствиеСтаройНовойНоменклатуры для номенклатуры: %1 (Код: %2).
					|Исходная рецептура: %3'");
					
					ТекстОшибки = ТекстОшибки + Символы.ПС + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщенияОбОшибке,
							СтрокаИнгредиенты.Номенклатура,
							СтрокаИнгредиенты.Номенклатура.Код,
							РецептураИсходная.Ссылка);
          	        
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
	
		СтруктураВозврата.Вставить("СписокНовойНоменклатуры", СписокНовойНоменклатуры);
		СтруктураВозврата.Вставить("СписокНовойНоменклатурыКод", СписокНовойНоменклатурыКод);
		СтруктураВозврата.Вставить("ТекстОшибки", ТекстОшибки);
		
		Если СтруктураВозврата.Свойство("Документ") Тогда
		
		#Область MRS_РецептНовая
						
			ТЗ=Новый ТаблицаЗначений;
		    ТЗ.Колонки.Добавить("Свойство", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
		    ТЗ.Колонки.Добавить("Значение");
		    НовСтр=ТЗ.Добавить();
		    НовСтр.Свойство=ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("MRS_НоваяРецептура");
		    НовСтр.Значение = НовДок.Номер;
			УправлениеСвойствами.ЗаписатьСвойстваУОбъекта(РецептураИсходная.Ссылка,ТЗ);     
			
		#КонецОбласти
		
		#Область MRS_РецептСтарая
			
			ТЗ=Новый ТаблицаЗначений;
		    ТЗ.Колонки.Добавить("Свойство", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
		    ТЗ.Колонки.Добавить("Значение");
		    НовСтр=ТЗ.Добавить();
		    НовСтр.Свойство=ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("MRS_СтараяРецептура");
		    НовСтр.Значение = РецептураИсходная.Номер;
			УправлениеСвойствами.ЗаписатьСвойстваУОбъекта(НовДок.Ссылка,ТЗ);
			
		#КонецОбласти
		КонецЕсли;

		
		 Если НЕ СтруктураВозврата.Свойство("Документ") Тогда
			
			СтруктураВозврата.Вставить("Документ", Неопределено);
			
		КонецЕсли;
		
		Если НЕ СтруктураВозврата.Свойство("НомерРецептуры") Тогда
			
			СтруктураВозврата.Вставить("НомерРецептуры", Неопределено);	
			
		КонецЕсли;

			
		Возврат СтруктураВозврата;
		
КонецФункции

&НаКлиенте
Процедура ПолучитьРецептуры(Команда)
	ПолучитьРецептурыНаСервере();
КонецПроцедуры

&НаСервере
Процедура СоздатьсборкиНаСервере()
	
	/////////////////////////////////////////////////////////////
	// поиск замены
	лТекст = "
		|ВЫБРАТЬ
		|	НоменклатураДополнительныеРеквизиты.Свойство КАК Свойство,
		|	НоменклатураДополнительныеРеквизиты.Значение КАК Значение
		|ИЗ
		|	Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
		|ГДЕ
		|	НоменклатураДополнительныеРеквизиты.Свойство = &Свойство
		|	И НоменклатураДополнительныеРеквизиты.Ссылка = &Ссылка
		|";

	лЗапрос = Новый Запрос(лТекст);

	// Присвоение значений переменным параметров.
	Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("MRS_НоменклатураНовая"); // MRS_НоменклатураНовая ()

	// Установка параметров.
	лЗапрос.УстановитьПараметр("Свойство", Свойство);
	лЗапрос.УстановитьПараметр("Ссылка", Номенклатура);

	лВыборка = лЗапрос.Выполнить().Выбрать();

	Пока лВыборка.Следующий() Цикл

		ЗначениеДопРеквиз =  СтрЗаменить(лВыборка.Значение, ";","");
	
	КонецЦикла;

	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Ссылка,
		|	УпаковкиЕдиницыИзмерения.Ссылка КАК Упаковка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
		|		ПО (Номенклатура.Ссылка = УпаковкиЕдиницыИзмерения.Владелец)
		|ГДЕ
		|	Номенклатура.Код В (&Код)
		|";
	
	 
	Запрос.УстановитьПараметр("Код", ЗначениеДопРеквиз);
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		НоменклатураЗамены = Результат.Ссылка;
		УпаковкаНоменклатуры =  Результат.Упаковка;
		
	КонецЦикла;
	//////////////////////////////////////////////////////////////////////
	
	///////////////////////////////////////////////////////////////////////
	//Создаем комплектацию
		лТекст = "
		|ВЫБРАТЬ
		|	ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
		|	ТоварыНаСкладахОстатки.Серия КАК Серия,
		|	ТоварыНаСкладахОстатки.Серия.Номер КАК СерияНомер,
		|	ТоварыНаСкладахОстатки.Склад.ПЛ_Организация КАК Организация,
		|	ТоварыНаСкладахОстатки.Склад КАК Склад,
		|	ТоварыНаСкладахОстатки.ВНаличииОстаток КАК ВНаличииОстаток,
		|	ШтрихкодыУпаковокТоваров.Ссылка КАК Штрихкод
		|ИЗ
		|	РегистрНакопления.ТоварыНаСкладах.Остатки(&Дата, Номенклатура = &Номенклатура) КАК ТоварыНаСкладахОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
		|		ПО (ТоварыНаСкладахОстатки.Номенклатура = ШтрихкодыУпаковокТоваров.Номенклатура
		|				И ТоварыНаСкладахОстатки.Серия.Номер = ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода)
		|ИТОГИ
		|	СУММА(ВНаличииОстаток)
		|ПО
		|	Склад
		|";


	лЗапрос = Новый Запрос(лТекст);

	// Установка параметров.
	лЗапрос.УстановитьПараметр("Дата", Новый Граница(КонецДня(Период), ВидГраницы.Включая));
	лЗапрос.УстановитьПараметр("Номенклатура", Номенклатура);
	лЗапрос.УстановитьПараметр("Склад", Склад);
	
	ВыборкаСклад = лЗапрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаСклад.Следующий() Цикл
		
		Если ВыборкаСклад.ВНаличииОстаток > 0 Тогда
		
			ДокументСборки = Документы.СборкаТоваров.СоздатьДокумент();
		    ДокументСборки.Комментарий				= "#Документ создан обработкой комплектации в литражную номенклатуру.";
			ДокументСборки.Организация				= ?(ЗначениеЗаполнено(ВыборкаСклад.Организация), ВыборкаСклад.Организация, Справочники.Организации.ПустаяСсылка());
			ДокументСборки.Склад					= ВыборкаСклад.Склад;
			ДокументСборки.Дата						= ТекущаяДатаСеанса();
	        ДокументСборки.ХозяйственнаяОперация	= Перечисления.ХозяйственныеОперации.СборкаТоваров;
			ДокументСборки.Номенклатура				= НоменклатураЗамены;
			ДокументСборки.Ответственный			= ПараметрыСеанса.ТекущийПользователь;
			ДокументСборки.Статус					= Перечисления.СтатусыСборокТоваров.СобраноРазобрано;
			ДокументСборки.СборкаПодДеятельность	= Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
			ДокументСборки.ВариантПриемкиТоваров	= Перечисления.ВариантыПриемкиТоваров.РазделенаТолькоПоНакладным;
			ДокументСборки.КоличествоУпаковок		= ВыборкаСклад.ВНаличииОстаток;
			ДокументСборки.Упаковка					= УпаковкаНоменклатуры; 
			ДокументСборки.Количество				= ВыборкаСклад.ВНаличииОстаток;
			ДокументСборки.СтатусУказанияСерий		= 4;
			
			СтрокаТЧТовары = ДокументСборки.Товары.Добавить();
			
			СтрокаТЧТовары.Номенклатура				= Номенклатура;
			СтрокаТЧТовары.Количество				= ВыборкаСклад.ВНаличииОстаток;
			СтрокаТЧТовары.КоличествоУпаковок		= ВыборкаСклад.ВНаличииОстаток;
			СтрокаТЧТовары.СтатусУказанияСерий		= 4; 
			
			ВыборкаСерия = ВыборкаСклад.Выбрать();
			
			Пока ВыборкаСерия.Следующий() Цикл
				
				СтрокаСерии = ДокументСборки.Серии.Добавить();
				СтрокаСерии.Номенклатура	= ВыборкаСерия.Номенклатура;
				СтрокаСерии.Серия			= ВыборкаСерия.Серия;
				СтрокаСерии.Количество		= 1;
				
				СтрокаСерии	= ДокументСборки.Серии.Добавить();
				СтрокаСерии.Номенклатура	= НоменклатураЗамены;
				СтрокаСерии.Количество		= НоменклатураЗамены.ОбъемДАЛ * 10;
				СтрокаСерии.Серия			= ВыборкаСерия.Серия;
				
				ШтрихкодОбъект = ВыборкаСерия.Штрихкод.ПолучитьОбъект();
				ШтрихкодОбъект.Номенклатура = НоменклатураЗамены;
				ШтрихкодОбъект.Упаковка 	= УпаковкаНоменклатуры;
				ШтрихкодОбъект.Записать();
			КонецЦикла;
			
			ДокументСборки.Записать(РежимЗаписиДокумента.Запись);
			СтрокаДокументы = ТаблицаСборок.Добавить();
			СтрокаДокументы.ДокументыСборки = ДокументСборки.Ссылка;
			
		КонецЕсли;
		
	КонецЦикла;
	
	лТекст = "
	|ВЫБРАТЬ
	|	ПЛ_СоответствиеСФронтСистемами.Код КАК Код
	|ИЗ
	|	РегистрСведений.ПЛ_СоответствиеСФронтСистемами КАК ПЛ_СоответствиеСФронтСистемами
	|ГДЕ
	|	ПЛ_СоответствиеСФронтСистемами.Объект = &Объект
	|";

	лЗапрос = Новый Запрос(лТекст);

	// Установка параметров.
	лЗапрос.УстановитьПараметр("Объект", Номенклатура.ПЛ_НоменклатураВоВскрытойТаре.Ссылка);


	лВыборка = лЗапрос.Выполнить().Выбрать();

	Пока лВыборка.Следующий() Цикл
		
		Набор = РегистрыСведений.ПЛ_СоответствиеСФронтСистемами.СоздатьНаборЗаписей();
		Набор.Отбор.Код.Установить(лВыборка.Код);
		Набор.Прочитать();
		
		Для Каждого Запись из Набор Цикл
			
			Запись.НоменклатураАлкоголь = НоменклатураЗамены;
			
		КонецЦикла;
		
		Набор.Записать();
		
	КонецЦикла;
	
	
КонецПроцедуры

&НаКлиенте
Процедура Создатьсборки(Команда)
	СоздатьсборкиНаСервере();
КонецПроцедуры

#КонецОбласти

#Область Дерево_рецептур

&НаКлиенте
Процедура ОбновитьДеревоРецептур(Команда)
	ОбновитьДеревоРецептурНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОбновитьДеревоРецептурНаСервере()
	
	ДеревоРецептур.ПолучитьЭлементы().Очистить();
	
	Если Рецептуры.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// 1. Собираем все рецептуры для одного запроса
	ВсеРецептуры = Новый Массив;
	Для Каждого СтрокаПары Из Рецептуры Цикл
		Если ЗначениеЗаполнено(СтрокаПары.РецептураСтарая) Тогда
			ВсеРецептуры.Добавить(СтрокаПары.РецептураСтарая);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаПары.РецептураНовая) Тогда
			ВсеРецептуры.Добавить(СтрокаПары.РецептураНовая);
		КонецЕсли;
	КонецЦикла;
	
	Если ВсеРецептуры.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// 2. Получаем все данные одним запросом
	ТЗИнгредиентов = ПолучитьИнгредиентыДляДерева(ВсеРецептуры);
	
	// 3. Строим дерево
	Для Каждого СтрокаПары Из Рецептуры Цикл
		
		УзелПары = ДеревоРецептур.ПолучитьЭлементы().Добавить();
		УзелПары.ТипУзла = "ПараРецептур";
		УзелПары.РецептураСтарая = СтрокаПары.РецептураСтарая;
		УзелПары.РецептураНовая = ?(ЗначениеЗаполнено(СтрокаПары.РецептураНовая), СтрокаПары.РецептураНовая, Неопределено);
		
		ЗаполнитьУзелИнгредиентами(УзелПары, СтрокаПары.РецептураСтарая, СтрокаПары.РецептураНовая, ТЗИнгредиентов);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьИнгредиентыДляДерева(ВсеРецептуры)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Ингредиенты.Ссылка КАК Рецептура,
	|	Ингредиенты.Номенклатура КАК Номенклатура,
	|	Ингредиенты.Количество КАК Количество,
	|	Ингредиенты.Номенклатура.Наименование КАК НоменклатураНаименование
	|ПОМЕСТИТЬ ВТ_Ингредиенты
	|ИЗ
	|	Документ.питРецептура.Ингредиенты КАК Ингредиенты
	|ГДЕ
	|	Ингредиенты.Ссылка В(&ВсеРецептуры)
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Ингредиенты.Рецептура КАК Рецептура,
	|	ВТ_Ингредиенты.Номенклатура КАК Номенклатура,
	|	ВТ_Ингредиенты.Количество КАК Количество,
	|	ВТ_Ингредиенты.НоменклатураНаименование КАК Наименование,
	|	СоответствияИзРегистра.НоваяНоменклатура КАК НоваяНоменклатура,
	|	СоответствияИзРегистра.ВскрытаяНоменклатура КАК ВскрытаяНоменклатура,
	|	ВЫБОР
	|		КОГДА ВТ_Ингредиенты.Номенклатура.АлкогольнаяПродукцияВоВскрытойТаре
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоВскрытаяТара
	|ИЗ
	|	ВТ_Ингредиенты КАК ВТ_Ингредиенты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.MRS_СоответствиеСтаройНовойНоменклатуры КАК СоответствияИзРегистра
	|		ПО (ВТ_Ингредиенты.Номенклатура = СоответствияИзРегистра.ВскрытаяНоменклатура
	|				ИЛИ ВТ_Ингредиенты.Номенклатура = СоответствияИзРегистра.НоваяНоменклатура)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	Запрос.УстановитьПараметр("ВсеРецептуры", ВсеРецептуры);
	
	Результат = Запрос.Выполнить().Выгрузить();
	Результат.Индексы.Добавить("Рецептура");
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьУзелИнгредиентами(УзелПары, СсылкаНаСтарую, СсылкаНаНовую, ТЗИнгредиентов)
	
	// 1. Получаем ингредиенты для обеих рецептур
	ОтборСтарые = Новый Структура("Рецептура", СсылкаНаСтарую);
	НайденныеИнгредиентыСтарые = ТЗИнгредиентов.НайтиСтроки(ОтборСтарые);
	
	НайденныеИнгредиентыНовые = Новый Массив;
	Если ЗначениеЗаполнено(СсылкаНаНовую) Тогда
		ОтборНовые = Новый Структура("Рецептура", СсылкаНаНовую);
		НайденныеИнгредиентыНовые = ТЗИнгредиентов.НайтиСтроки(ОтборНовые);
	КонецЕсли;
	
	// 2. Создаем карту новых ингредиентов для быстрого поиска
	КартаНовыхИнгредиентов = Новый Соответствие;
	Для Каждого СтрокаНовогоИнгредиента Из НайденныеИнгредиентыНовые Цикл
		// Ключом будет вскрытая номенклатура, которая соответствует серийной в новой рецептуре
		Если ЗначениеЗаполнено(СтрокаНовогоИнгредиента.ВскрытаяНоменклатура) Тогда
			КартаНовыхИнгредиентов.Вставить(СтрокаНовогоИнгредиента.ВскрытаяНоменклатура, СтрокаНовогоИнгредиента);
		КонецЕсли;
	КонецЦикла;
	
	// 3. Итерируем старые ингредиенты и создаем строки в дереве
	Для Каждого СтрокаСтарогоИнгредиента Из НайденныеИнгредиентыСтарые Цикл
		УзелИнгредиента = УзелПары.ПолучитьЭлементы().Добавить();
		УзелИнгредиента.ТипУзла = "Ингредиент";
		
		// Заполняем данные по старому ингредиенту
		УзелИнгредиента.НоменклатураСтарая = СтрокаСтарогоИнгредиента.Номенклатура;
		УзелИнгредиента.КоличествоСтарое = СтрокаСтарогоИнгредиента.Количество;
		
		// Ищем соответствующий новый ингредиент
		СоответствующийНовый = КартаНовыхИнгредиентов[СтрокаСтарогоИнгредиента.Номенклатура];
		
		Если СоответствующийНовый <> Неопределено Тогда
			// Нашли, заполняем данные
			УзелИнгредиента.НоменклатураНовая = СоответствующийНовый.Номенклатура;
			УзелИнгредиента.КоличествоНовое = СоответствующийНовый.Количество;
			
			// Удаляем из карты, чтобы обработать оставшиеся
			КартаНовыхИнгредиентов.Удалить(СтрокаСтарогоИнгредиента.Номенклатура);
		КонецЕсли;
		
		// Определяем статус
		Если СтрокаСтарогоИнгредиента.ЭтоВскрытаяТара Тогда
			Если ЗначениеЗаполнено(УзелИнгредиента.НоменклатураНовая) ИЛИ ЗначениеЗаполнено(СтрокаСтарогоИнгредиента.НоваяНоменклатура) Тогда
				УзелИнгредиента.СтатусСоответствия = "Есть соответствие";
				Если НЕ ЗначениеЗаполнено(УзелИнгредиента.НоменклатураНовая) Тогда
					УзелИнгредиента.НоменклатураНовая = СтрокаСтарогоИнгредиента.НоваяНоменклатура;
				КонецЕсли;
			Иначе
				УзелИнгредиента.СтатусСоответствия = "Нет соответствия";
			КонецЕсли;
		Иначе
			УзелИнгредиента.СтатусСоответствия = "Не алкоголь";
		КонецЕсли;
		
	КонецЦикла;
	
	// 4. Добавляем оставшиеся новые ингредиенты, у которых не нашлось пары
	Для Каждого ЭлементКарты Из КартаНовыхИнгредиентов Цикл
		СтрокаНовогоИнгредиента = ЭлементКарты.Значение;
		
		УзелИнгредиента = УзелПары.ПолучитьЭлементы().Добавить();
		УзелИнгредиента.ТипУзла = "Ингредиент";
		
		УзелИнгредиента.НоменклатураНовая = СтрокаНовогоИнгредиента.Номенклатура;
		УзелИнгредиента.КоличествоНовое = СтрокаНовогоИнгредиента.Количество;
		УзелИнгредиента.СтатусСоответствия = "Новый";
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТолькоБезСоответствийПриИзменении(Элемент)
	ОбновитьДеревоРецептурНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРецептурНоваяНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоРецептур.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Обновляем статус соответствия
	Если ЗначениеЗаполнено(ТекущиеДанные.НоменклатураНовая) Тогда
		ТекущиеДанные.СтатусСоответствия = "Есть соответствие";
	Иначе
		ТекущиеДанные.СтатусСоответствия = "Нет соответствия";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьИзмененияВРецептурах(Команда)
	
	СохранитьИзмененияВРецептурахНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СохранитьИзмененияВРецептурахНаСервере()
	
	// Собираем все изменения из дерева
	ТаблицаИзменений = Новый ТаблицаЗначений;
	ТаблицаИзменений.Колонки.Добавить("ВскрытаяНоменклатура");
	ТаблицаИзменений.Колонки.Добавить("НоваяНоменклатура");
	ТаблицаИзменений.Колонки.Добавить("РецептураСсылка");
	
	Для Каждого УзелПары Из ДеревоРецептур.ПолучитьЭлементы() Цикл
		
		Для Каждого УзелИнгредиента Из УзелПары.ПолучитьЭлементы() Цикл
			
			Если ЗначениеЗаполнено(УзелИнгредиента.НоменклатураНовая) 
				И УзелИнгредиента.ТипУзла = "Ингредиент" И ЗначениеЗаполнено(УзелИнгредиента.НоменклатураСтарая) Тогда
				
				СтрокаИзменения = ТаблицаИзменений.Добавить();
				СтрокаИзменения.ВскрытаяНоменклатура = УзелИнгредиента.НоменклатураСтарая;
				СтрокаИзменения.НоваяНоменклатура = УзелИнгредиента.НоменклатураНовая;
				СтрокаИзменения.РецептураСсылка = УзелПары.РецептураСтарая;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ТаблицаИзменений.Количество() = 0 Тогда
		Сообщить("Нет изменений для сохранения");
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		КоличествоОбновленных = 0;
		КоличествоСозданных = 0;
		
		// Сохраняем соответствия в регистр сведений
		Для Каждого СтрокаИзменения Из ТаблицаИзменений Цикл
			
			МенеджерЗаписи = РегистрыСведений.MRS_СоответствиеСтаройНовойНоменклатуры.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ВскрытаяНоменклатура = СтрокаИзменения.ВскрытаяНоменклатура;
			МенеджерЗаписи.Прочитать();
			
			Если МенеджерЗаписи.Выбран() Тогда
				МенеджерЗаписи.НоваяНоменклатура = СтрокаИзменения.НоваяНоменклатура;
				МенеджерЗаписи.Записать();
				КоличествоОбновленных = КоличествоОбновленных + 1;
			Иначе
				// Если записи нет, создадим новую (но это маловероятно)
				МенеджерЗаписи.ВскрытаяНоменклатура = СтрокаИзменения.ВскрытаяНоменклатура;
				МенеджерЗаписи.НоваяНоменклатура = СтрокаИзменения.НоваяНоменклатура;
				МенеджерЗаписи.Записать();
				КоличествоСозданных = КоличествоСозданных + 1;
			КонецЕсли;
			
		КонецЦикла;
		
		// Теперь обновляем существующие рецептуры
		Для Каждого СтрокаИзменения Из ТаблицаИзменений Цикл
			
			РецептураОбъект = СтрокаИзменения.РецептураСсылка.ПолучитьОбъект();
			
			Для Каждого СтрокаИнгредиента Из РецептураОбъект.Ингредиенты Цикл
				
				Если СтрокаИнгредиента.Номенклатура = СтрокаИзменения.ВскрытаяНоменклатура Тогда
					СтрокаИнгредиента.Номенклатура = СтрокаИзменения.НоваяНоменклатура;
				КонецЕсли;
				
			КонецЦикла;
			
			РецептураОбъект.Записать();
			
		КонецЦикла;
		
		Сообщить("Изменения сохранены успешно! Обновлено соответствий: " + КоличествоОбновленных + ", создано: " + КоличествоСозданных);
		
		// Обновляем дерево
		ОбновитьДеревоРецептурНаСервере();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		Сообщить("Ошибка при сохранении изменений: " + ОписаниеОшибки());
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

&НаСервереБезКонтекста
Функция СкорректироватьНаименованиеПоОбъему(Наименование, ОбъемДАЛ)
	
	// 1. Проверяем, есть ли уже объем в наименовании.
	// Используем широкий список вариантов, чтобы поймать разные форматы.
	МассивВариантовОбъема = Новый Массив;
	МассивВариантовОбъема.Добавить("0.375"); МассивВариантовОбъема.Добавить("0,375"); МассивВариантовОбъема.Добавить("0.375л"); МассивВариантовОбъема.Добавить("0,375л"); МассивВариантовОбъема.Добавить("0.375L"); МассивВариантовОбъема.Добавить("0,375L");
	МассивВариантовОбъема.Добавить("0.5"); МассивВариантовОбъема.Добавить("0,5"); МассивВариантовОбъема.Добавить("0.5л"); МассивВариантовОбъема.Добавить("0,5л"); МассивВариантовОбъема.Добавить("0.5L"); МассивВариантовОбъема.Добавить("0,5L");
	МассивВариантовОбъема.Добавить("0.7л"); МассивВариантовОбъема.Добавить("0,7"); МассивВариантовОбъема.Добавить("0,7л"); МассивВариантовОбъема.Добавить("0.7L"); МассивВариантовОбъема.Добавить("0,7L");
	МассивВариантовОбъема.Добавить("0.75л"); МассивВариантовОбъема.Добавить("0,75"); МассивВариантовОбъема.Добавить("0,75л"); МассивВариантовОбъема.Добавить("0.75L"); МассивВариантовОбъема.Добавить("0,75L");
	МассивВариантовОбъема.Добавить("1л"); МассивВариантовОбъема.Добавить("1L");
	МассивВариантовОбъема.Добавить("1,5л"); МассивВариантовОбъема.Добавить("1,5"); МассивВариантовОбъема.Добавить("1.5"); МассивВариантовОбъема.Добавить("1.5л"); МассивВариантовОбъема.Добавить("1,5L"); МассивВариантовОбъема.Добавить("1.5L");


	НаименованиеНРег = НРег(Наименование);
	Для Каждого Вариант Из МассивВариантовОбъема Цикл
		Если СтрНайти(НаименованиеНРег, НРег(Вариант)) > 0 Тогда
			// Объем уже есть, ничего не делаем.
			Возврат Наименование;
		КонецЕсли;
	КонецЦикла;
	
	// 2. Объем не найден, нужно его добавить.
	// Формируем строку с новым, каноничным объемом.
	НовыйОбъемСтрока = "";
	Если ОбъемДАЛ > 0 Тогда
		ОбъемВЛитрах = ОбъемДАЛ * 10;
		ФорматнаяСтрокаОбъема = Формат(ОбъемВЛитрах, "ЧДЦ=3; ЧРД=,");
		Пока Прав(ФорматнаяСтрокаОбъема, 1) = "0" И СтрДлина(ФорматнаяСтрокаОбъема) > 1 Цикл
			ФорматнаяСтрокаОбъема = Лев(ФорматнаяСтрокаОбъема, СтрДлина(ФорматнаяСтрокаОбъема) - 1);
		КонецЦикла;
		Если Прав(ФорматнаяСтрокаОбъема, 1) = "," Тогда
			ФорматнаяСтрокаОбъема = Лев(ФорматнаяСтрокаОбъема, СтрДлина(ФорматнаяСтрокаОбъема) - 1);
		КонецЕсли;
		НовыйОбъемСтрока = " " + ФорматнаяСтрокаОбъема + "л";
	КонецЕсли;

	Если ПустаяСтрока(НовыйОбъемСтрока) Тогда
		// Объем нулевой или не удалось сформировать строку, ничего не добавляем.
		Возврат Наименование;
	КонецЕсли;

	// 3. Ищем тег [mrs...], чтобы вставить объем перед ним.
	ПозицияТега = СтрНайти(Наименование, "[mrs");
	
	Результат = "";
	Если ПозицияТега > 0 Тогда
		// Тег найден, вставляем объем перед ним.
		ОсноваНаименования = СокрП(Лев(Наименование, ПозицияТега - 1));
		ТегМРС = Сред(Наименование, ПозицияТега);
		Результат = ОсноваНаименования + НовыйОбъемСтрока + " " + ТегМРС;
	Иначе
		// Тег не найден, добавляем объем в конец.
		Результат = СокрП(Наименование) + НовыйОбъемСтрока;
	КонецЕсли;

	// 4. Проверяем и корректируем длину.
	МаксДлина = 150;
	Если СтрДлина(Результат) > МаксДлина Тогда
		// В данном случае просто обрезаем, т.к. логика сложного восстановления не требуется
		Результат = Лев(Результат, МаксДлина);
	КонецЕсли;

	Возврат Результат;
	
КонецФункции



