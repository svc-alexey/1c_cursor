#Область Загрузка_Excel
&НаКлиенте
Процедура ИмяФайлаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Режим = РежимДиалогаВыбораФайла.Открытие;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.ПолноеИмяФайла = "";
	Фильтр = НСтр("ru = 'XLSX'; en = 'XLSX'")
	+ "(*.XLSX)|*.XLSX";
	ДиалогОткрытияФайла.Фильтр = Фильтр;
	ДиалогОткрытияФайла.Заголовок = "Выберите файл";
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		Файл = ДиалогОткрытияФайла.ПолноеИмяФайла;   
		АдресВХ = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(Файл));
		
		ИмяФайлаПриИзмененииНаСервере(АдресВХ);	
	Иначе
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьФайл(Команда)  
	
	АдресВХ = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(Файл));
	ПрочитатьФайлНаСервере(АдресВХ);
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьФайлНаСервере(Знач АдресВХ)
	
	ДВД = ПолучитьИзВременногоХранилища(АдресВХ);
	ИмяВрФайла = ПолучитьИмяВременногоФайла("XLSX");
	ДВД.Записать(ИмяВрФайла);
	
	Данные.Очистить();
	// Вывод в табличный документ
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ТабличныйДокумент.Прочитать(ИмяВрФайла, СпособЧтенияЗначенийТабличногоДокумента.Значение);
	
	УдалитьФайлы(ИмяВрФайла);
	
	// вывод в таблицу значений
	
	ПЗ = Новый ПостроительЗапроса;
	
	ПЗ.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТабличныйДокумент.Область());

	ПЗ.ДобавлениеПредставлений = ТипДобавленияПредставлений.НеДобавлять;

	ПЗ.ЗаполнитьНастройки();

	ПЗ.Выполнить();
	
	ТаблицаРезультат = ПЗ.Результат.Выгрузить();
    
    // Создаем новую таблицу значений с колонками строкового типа
    ТаблицаЗначений = Новый ТаблицаЗначений;
    Для Каждого Колонка Из ТаблицаРезультат.Колонки Цикл
        ТаблицаЗначений.Колонки.Добавить(Колонка.Имя, Новый ОписаниеТипов("Строка"));
    КонецЦикла;
    
    // Заполняем новую таблицу, преобразуя все значения в строки
    Для Каждого Строка Из ТаблицаРезультат Цикл
        НоваяСтрока = ТаблицаЗначений.Добавить();
        Для Каждого Колонка Из ТаблицаРезультат.Колонки Цикл
            Значение = Строка[Колонка.Имя];
            НоваяСтрока[Колонка.Имя] = Строка(Формат(Значение, "ЧГ=")); // Преобразуем любое значение в строку
        КонецЦикла;
    КонецЦикла;

	// выгружаем из таблицы все СерийнаяНоменклатураКод, чтобы выполнить поиск номенклатуры в справочнике
	СерийнаяКод = ТаблицаЗначений.ВыгрузитьКолонку("СерийнаяКод"); 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Ссылка,
		|	Номенклатура.Код КАК СерийнаяКод
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Код В(&СерийнаяКод)";
	
	Запрос.УстановитьПараметр("СерийнаяКод", СерийнаяКод);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	// формируем соответствие "Код - Ссылка" по данным результата запроса
	ТоварыСерии = Новый Соответствие;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ТоварыСерии.Вставить(Выборка.СерийнаяКод, Выборка.Ссылка);	
	КонецЦикла; 
	
	НоменклатураВоВскрытойТареКод = ТаблицаЗначений.ВыгрузитьКолонку("НоменклатураВоВскрытойТареКод");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Ссылка,
		|	Номенклатура.Код КАК НоменклатураВоВскрытойТареКод
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Код В(&НоменклатураВоВскрытойТареКод)";
	
	Запрос.УстановитьПараметр("НоменклатураВоВскрытойТареКод", НоменклатураВоВскрытойТареКод);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	// формируем соответствие "Код - Ссылка" по данным результата запроса
	НоменклатураВоВскрытойТареСоответствие = Новый Соответствие;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		НоменклатураВоВскрытойТареСоответствие.Вставить(СокрЛП(Выборка.НоменклатураВоВскрытойТареКод), Выборка.Ссылка);	
	КонецЦикла; 
	
	
	// заполняем табличную часть документа данными из промежуточной таблицы значений
	Для каждого СтрокаТовары Из ТаблицаЗначений Цикл

		НоваяСтрока = Данные.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовары);
		
		// товар получаем из сформированного выше соответствия
		НоваяСтрока.СерийнаяНоменклатура = ТоварыСерии[СтрокаТовары.СерийнаяКод]; 
		
		// товар получаем из сформированного выше соответствия
		НоваяСтрока.ВскрытаяПродукция = НоменклатураВоВскрытойТареСоответствие[СтрокаТовары.НоменклатураВоВскрытойТареКод];
		
		Если НЕ ЗначениеЗаполнено(НоваяСтрока.СерийнаяНоменклатура) Тогда
			Сообщение = Новый СообщениеПользователю;                       
			Сообщение.Текст = СтрШаблон("Не найдена номенклатура по коду ""%1""", СтрокаТовары.СерийнаяКод);
			Сообщение.Сообщить();	
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ИмяФайлаПриИзмененииНаСервере(Знач АдресВХ)
	ДВД = ПолучитьИзВременногоХранилища(АдресВХ);
	ИмяВрФайла = ПолучитьИмяВременногоФайла("XLSX");
	ДВД.Записать(ИмяВрФайла);
	
	ТабличныйДокумент.Прочитать(ИмяВрФайла, СпособЧтенияЗначенийТабличногоДокумента.Текст);
	
	УдалитьФайлы(ИмяВрФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаПриИзменении(Элемент)
	
	АдресВХ = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(Файл));
	ИмяФайлаПриИзмененииНаСервере(АдресВХ);
	
КонецПроцедуры

&НаСервере
Процедура СоздатьНоменклатуруНаСервере()
	
	Запрос = Новый Запрос;

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПЛ_СоответствиеСФронтСистемами.Объект КАК НоменклатураВоВскрытойТаре,
	|	ПЛ_СоответствиеСФронтСистемами.Код КАК КодКнопки,
	|	ПЛ_СоответствиеСФронтСистемами.Объект.Код КАК НоменклатураВоВскрытойТареКОД
	|ПОМЕСТИТЬ ВТ_Вскрытая
	|ИЗ
	|	РегистрСведений.ПЛ_СоответствиеСФронтСистемами КАК ПЛ_СоответствиеСФронтСистемами
	|ГДЕ
	|	ПЛ_СоответствиеСФронтСистемами.ТипОбъекта = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ПЛ_ТипыОбъектовФронтСистем.Номенклатура)
	|	И ПЛ_СоответствиеСФронтСистемами.ФронтСистема В(&ФронтСистема)
	|	И ПЛ_СоответствиеСФронтСистемами.Объект.АлкогольнаяПродукцияВоВскрытойТаре
	|	И НЕ ПЛ_СоответствиеСФронтСистемами.Объект.ВидНоменклатуры В (&ВидНоменклатуры)
	|	И НЕ ПЛ_СоответствиеСФронтСистемами.Объект.ВидАлкогольнойПродукции.Наименование ПОДОБНО &Наименование
	|	И НЕ ПЛ_СоответствиеСФронтСистемами.Объект.Наименование ПОДОБНО &НаименованиеНеиспользовать
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК СерийнаяНоменклатура,
	|	Номенклатура.Код КАК СерийнаяНоменклатураКод,
	|	ВТ_Вскрытая.НоменклатураВоВскрытойТаре КАК НоменклатураВоВскрытойТаре,
	|	ВТ_Вскрытая.КодКнопки КАК КодКнопки,
	|	ВТ_Вскрытая.НоменклатураВоВскрытойТареКОД КАК НоменклатураВоВскрытойТареКОД
	|ПОМЕСТИТЬ ВТ_Серийная
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Вскрытая КАК ВТ_Вскрытая
	|		ПО Номенклатура.ПЛ_НоменклатураВоВскрытойТаре = ВТ_Вскрытая.НоменклатураВоВскрытойТаре
	|ГДЕ
	|	Номенклатура.АлкогольнаяПродукция
	|	И НЕ Номенклатура.АлкогольнаяПродукцияВоВскрытойТаре
	|	И Номенклатура.ВидАлкогольнойПродукции.ВидЛицензии <> &ВидЛицензии
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Серийная.КодКнопки КАК КодКнопки,
	|	ВТ_Серийная.НоменклатураВоВскрытойТаре КАК НоменклатураВоВскрытойТаре,
	|	ВТ_Серийная.НоменклатураВоВскрытойТареКОД КАК НоменклатураВоВскрытойТареКОД,
	|	ВТ_Серийная.НоменклатураВоВскрытойТаре.Наименование КАК ИмяВскрытой,
	|	ВТ_Серийная.СерийнаяНоменклатураКод КАК СерийнаяНоменклатураКод,
	|	ВТ_Серийная.СерийнаяНоменклатура КАК СерийнаяНоменклатура,
	|	ВТ_Серийная.СерийнаяНоменклатура.Наименование КАК СерийнаяНоменклатураНаименование,
	|	ВТ_Серийная.СерийнаяНоменклатура.ОбъемДАЛ КАК ОбъемДАЛ,
	|	ЕСТЬNULL(ТоварыНаСкладахОстатки.ВНаличииОстаток, 0) КАК ВНаличииОстаток
	|ИЗ
	|	ВТ_Серийная КАК ВТ_Серийная
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(&Дата) КАК ТоварыНаСкладахОстатки
	|		ПО (ВТ_Серийная.СерийнаяНоменклатура = ТоварыНаСкладахОстатки.Номенклатура)";

	// Установка значений параметров
	Запрос.УстановитьПараметр("ФронтСистема", Перечисления.ПЛ_ТипыФронтСистем.Micros);
	Запрос.УстановитьПараметр("НаименованиеНеиспользовать", "%не использовать%");
	Запрос.УстановитьПараметр("Наименование", "%ПИВ%");
	Запрос.УстановитьПараметр("Дата", ТекущаяДатаСеанса());
	// Параметр "ВидНоменклатуры" (Список значений)
	Параметр = Новый СписокЗначений;
	Параметр.Добавить(Справочники.ВидыНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор("D4C02896-4114-11F0-94CB-005056A5AE58")));// Готовая алкогольная продукция с ФСМ (помарочно) (Справочники.ВидыНоменклатуры)
	Параметр.Добавить(Справочники.ВидыНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор("AE40B1EF-7234-11ED-825B-000C29589659")));// Готовая алкогольная продукция с ФСМ (Справочники.ВидыНоменклатуры)
	Запрос.УстановитьПараметр("ВидНоменклатуры", Параметр);
	Запрос.УстановитьПараметр("ВидЛицензии", Перечисления.ВидыЛицензийАлкогольнойПродукции.Пиво);
	РезультатЗапроса = Запрос.Выполнить();
	
	ТЗДляГруппировки = Новый ТаблицаЗначений;
	ТЗДляГруппировки.Колонки.Добавить("Наименование");
	ТЗДляГруппировки.Колонки.Добавить("ОбъемДАЛ", Новый ОписаниеТипов("Число"));
	ТЗДляГруппировки.Колонки.Добавить("НовоеНаименование");
	ТЗДляГруппировки.Колонки.Добавить("КодыСтаройНоменклатуры", Новый ОписаниеТипов("Строка"));
	ТЗДляГруппировки.Колонки.Добавить("КодыВскрытойНоменклатуры", Новый ОписаниеТипов("Строка"));
	ТЗДляГруппировки.Колонки.Добавить("ЕстьОстаток", Новый ОписаниеТипов("Булево"));
	ТЗДляГруппировки.Колонки.Добавить("ОбъектДляКопирования", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	
	Индекс = Новый Соответствие;
	СоответствиеСтараяКВскрытой = Новый Соответствие;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	// Создаем дополнительную структуру для номенклатуры без остатков
	ТЗДляОбновления = Новый ТаблицаЗначений;
	ТЗДляОбновления.Колонки.Добавить("СерийнаяНоменклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТЗДляОбновления.Колонки.Добавить("НоменклатураВоВскрытойТаре", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));

	Пока Выборка.Следующий() Цикл
		
		СоответствиеСтараяКВскрытой.Вставить(Выборка.СерийнаяНоменклатура, Выборка.НоменклатураВоВскрытойТаре);
		
		// Если остатка нет, добавляем в таблицу для обновления
		Если Выборка.ВНаличииОстаток = 0 Тогда
			СтрокаДляОбновления = ТЗДляОбновления.Добавить();
			СтрокаДляОбновления.СерийнаяНоменклатура = Выборка.СерийнаяНоменклатура;
			СтрокаДляОбновления.НоменклатураВоВскрытойТаре = Выборка.НоменклатураВоВскрытойТаре;
		Иначе
			// Обрабатываем номенклатуру с остатками как было раньше
			Если Выборка.ИмяВскрытой = NULL Тогда
				ИсходноеНаименование = Выборка.СерийнаяНоменклатураНаименование;
			Иначе
				ИсходноеНаименование = Выборка.ИмяВскрытой;
			КонецЕсли;
			
			Добавка = " [mrs]";
			МаксДлина = 150;
			МаксДлинаОсновной = МаксДлина - СтрДлина(Добавка);
			
			Если СтрДлина(ИсходноеНаименование) > МаксДлинаОсновной Тогда
				ИсходноеНаименование = Лев(ИсходноеНаименование, МаксДлинаОсновной);
			КонецЕсли;
			
			НовоеНаименование = ИсходноеНаименование + Добавка;
			
			НайденнаяСтрока = Индекс[НовоеНаименование];
			
			Если НайденнаяСтрока = Неопределено Тогда
				НайденнаяСтрока = ТЗДляГруппировки.Добавить();
				НайденнаяСтрока.НовоеНаименование = НовоеНаименование;
				НайденнаяСтрока.ОбъемДАЛ = Выборка.ОбъемДАЛ;
				НайденнаяСтрока.КодыСтаройНоменклатуры = "";
				НайденнаяСтрока.КодыВскрытойНоменклатуры = "";
				НайденнаяСтрока.ЕстьОстаток = Ложь;
				НайденнаяСтрока.ОбъектДляКопирования = Выборка.СерийнаяНоменклатура;
				Индекс.Вставить(НовоеНаименование, НайденнаяСтрока);
			КонецЕсли;
			
			// Агрегируем данные
			Если СтрНайти(НайденнаяСтрока.КодыСтаройНоменклатуры, Выборка.СерийнаяНоменклатураКод) = 0 Тогда
				НайденнаяСтрока.КодыСтаройНоменклатуры = ?(ПустаяСтрока(НайденнаяСтрока.КодыСтаройНоменклатуры),
					Выборка.СерийнаяНоменклатураКод,
					НайденнаяСтрока.КодыСтаройНоменклатуры + ";" + Выборка.СерийнаяНоменклатураКод);
			КонецЕсли;
			
			Если Выборка.КодКнопки <> NULL И СтрНайти(НайденнаяСтрока.КодыВскрытойНоменклатуры, Выборка.КодКнопки) = 0 Тогда
				НайденнаяСтрока.КодыВскрытойНоменклатуры = ?(ПустаяСтрока(НайденнаяСтрока.КодыВскрытойНоменклатуры),
					Выборка.КодКнопки,
					НайденнаяСтрока.КодыВскрытойНоменклатуры + ";" + Выборка.КодКнопки);
			КонецЕсли;
			
			Если Выборка.ВНаличииОстаток > 0 Тогда
				НайденнаяСтрока.ЕстьОстаток = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;

	// Сначала скорректируем все наименования
	Для Каждого СтрокаГруппы Из ТЗДляГруппировки Цикл
		СтрокаГруппы.НовоеНаименование = СкорректироватьНаименованиеПоОбъему(СтрокаГруппы.НовоеНаименование, СтрокаГруппы.ОбъемДАЛ);
	КонецЦикла;

	ЕдиницаИзмеренияЛитр = питОбщегоНазначения.ПолучитьБазовуюЕдиницуИзмеренияПоКоду("112");
	ЕдиницаИзмеренияШтуки = питОбщегоНазначения.ПолучитьБазовуюЕдиницуИзмеренияПоКоду("796"); 
	ЕдиницаИзмеренияМиллиЛитр = питОбщегоНазначения.ПолучитьБазовуюЕдиницуИзмеренияПоКоду("111");
	
	// Оптимизация: одним запросом найдем всю существующую номенклатуру по наименованию
	МассивНовыхНаименований = ТЗДляГруппировки.ВыгрузитьКолонку("НовоеНаименование");
	
	ЗапросПоиска = Новый Запрос;
	ЗапросПоиска.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК НоменклатураНоваяСсылка,
		|	Номенклатура.Код КАК НоменклатураНоваяКод,
		|	Номенклатура.Наименование КАК Наименование
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Наименование В(&МассивНаименований)";
	ЗапросПоиска.УстановитьПараметр("МассивНаименований", МассивНовыхНаименований);
	ТаблицаСуществующих = ЗапросПоиска.Выполнить().Выгрузить();
	
	СоответствиеСуществующих = Новый Соответствие;
	Для Каждого Строка Из ТаблицаСуществующих Цикл
		СоответствиеСуществующих.Вставить(Строка.Наименование, Новый Структура("Ссылка, Код", Строка.НоменклатураНоваяСсылка, Строка.НоменклатураНоваяКод));
	КонецЦикла;

    // Оптимизация: одним запросом получим ссылки на старую номенклатуру
	УникальныеСтарыеКоды = Новый Соответствие;
	Для Каждого СтрокаГруппы Из ТЗДляГруппировки Цикл
		МассивКодов = СтрРазделить(СтрокаГруппы.КодыСтаройНоменклатуры, ";");
		Для Каждого Код Из МассивКодов Цикл
			УникальныеСтарыеКоды.Вставить(Код, Истина);
		КонецЦикла;
	КонецЦикла;
	
	МассивКодовДляЗапроса = Новый Массив;
	Для Каждого Элемент Из УникальныеСтарыеКоды Цикл
		МассивКодовДляЗапроса.Добавить(Элемент.Ключ);
	КонецЦикла;
	
	ЗапросСтарыхСсылок = Новый Запрос("ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка,
	|	Номенклатура.Код КАК Код
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Код В (&Коды)");
	ЗапросСтарыхСсылок.УстановитьПараметр("Коды", МассивКодовДляЗапроса);
	ТаблицаСтарыхСсылок = ЗапросСтарыхСсылок.Выполнить().Выгрузить();
	
	СоответствиеСтарыхСсылок = Новый Соответствие;
	Для Каждого Строка Из ТаблицаСтарыхСсылок Цикл
		СоответствиеСтарыхСсылок.Вставить(Строка.Код, Строка.Ссылка);
	КонецЦикла;
	
	ТЗ_ЗаписиВРегистр = Новый ТаблицаЗначений;
	ТЗ_ЗаписиВРегистр.Колонки.Добавить("СтараяНоменклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТЗ_ЗаписиВРегистр.Колонки.Добавить("НоваяНоменклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТЗ_ЗаписиВРегистр.Колонки.Добавить("ВскрытаяНоменклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТЗ_ЗаписиВРегистр.Колонки.Добавить("БылОстаток", Новый ОписаниеТипов("Булево"));
	
	// Создаем номенклатуру небольшими пакетами для избежания блокировок
	РазмерПакета = 10; // Обрабатываем по 10 элементов за раз
	ВсегоСтрок = ТЗДляГруппировки.Количество();
	КоличествоПакетов = Цел(ВсегоСтрок / РазмерПакета) + ?(ВсегоСтрок % РазмерПакета = 0, 0, 1);
	
	Для НомерПакета = 0 По КоличествоПакетов - 1 Цикл
		
		НачальныйИндекс = НомерПакета * РазмерПакета;
		КонечныйИндекс = Мин((НомерПакета + 1) * РазмерПакета - 1, ВсегоСтрок - 1);
		
		НачатьТранзакцию();
		
		Попытка
		
			Для Индекс = НачальныйИндекс По КонечныйИндекс Цикл
				
				СтрокаГруппы = ТЗДляГруппировки[Индекс];
				
				СуществующаяНоменклатура = СоответствиеСуществующих[СтрокаГруппы.НовоеНаименование];
			
				Если СуществующаяНоменклатура = Неопределено Тогда
					
					ОбъектСтарая = СтрокаГруппы.ОбъектДляКопирования.ПолучитьОбъект();
					
					НоваяНоменклатураОбъект = Справочники.Номенклатура.СоздатьЭлемент();
					
					НоваяНоменклатураОбъект.ОбменДанными.Загрузка = Истина;
					
					ЗаполнитьЗначенияСвойств(НоваяНоменклатураОбъект, ОбъектСтарая,,"Владелец, питВыгружатьВРБК, Код");
					
					НоваяНоменклатураОбъект.Наименование = СтрокаГруппы.НовоеНаименование;
					НоваяНоменклатураОбъект.НаименованиеПолное = СтрокаГруппы.НовоеНаименование;
					НоваяНоменклатураОбъект.ЕдиницаИзмерения = ЕдиницаИзмеренияЛитр.Ссылка;
					НоваяНоменклатураОбъект.ИспользоватьУпаковки = Истина;
					НоваяНоменклатураОбъект.НаборУпаковок = Справочники.НаборыУпаковок.ИндивидуальныйДляНоменклатуры;
					НоваяНоменклатураОбъект.Записать();
					
					УпаковкаОбъект = Справочники.УпаковкиЕдиницыИзмерения.СоздатьЭлемент();
					УпаковкаОбъект.ЕдиницаИзмерения = ЕдиницаИзмеренияШтуки;
					УпаковкаОбъект.ТипИзмеряемойВеличины = Перечисления.ТипыИзмеряемыхВеличин.Упаковка;
					УпаковкаОбъект.ТипУпаковки = Перечисления.ТипыУпаковокНоменклатуры.Конечная;
					УпаковкаОбъект.Числитель = НоваяНоменклатураОбъект.ОбъемДАЛ * 10;
					УпаковкаОбъект.Знаменатель = 1;
					УпаковкаОбъект.Владелец = НоваяНоменклатураОбъект.Ссылка;
					УпаковкаОбъект.Наименование = ЕдиницаИзмеренияШтуки.Наименование + " (" + СТРОКА(НоваяНоменклатураОбъект.ОбъемДАЛ * 10) + " " + ЕдиницаИзмеренияЛитр.Наименование + ")";
					УпаковкаОбъект.ОбменДанными.Загрузка = Истина;
					УпаковкаОбъект.Записать();
					
					НоваяНоменклатураОбъектДляОбновления = НоваяНоменклатураОбъект.Ссылка.ПолучитьОбъект();
					НоваяНоменклатураОбъектДляОбновления.ОбменДанными.Загрузка = Истина;
					НоваяНоменклатураОбъектДляОбновления.ЕдиницаДляОтчетов = УпаковкаОбъект.Ссылка;
					НоваяНоменклатураОбъектДляОбновления.КоэффициентЕдиницыДляОтчетов = НоваяНоменклатураОбъект.ОбъемДАЛ *10;
					
					НоваяНоменклатураОбъектДляОбновления.Записать();
					
					ДанныеНоменклатуры = Новый Структура();
					ДанныеНоменклатуры.Вставить("Номенклатура",                        НоваяНоменклатураОбъект.Ссылка);
					ДанныеНоменклатуры.Вставить("ЕмкостьПотребительскойУпаковки",      НоваяНоменклатураОбъект.ОбъемДАЛ * 10000);
					ДанныеНоменклатуры.Вставить("КоличествоВПотребительскойУпаковке",  НоваяНоменклатураОбъект.ОбъемДАЛ * 10);
					ДанныеНоменклатуры.Вставить("ВариантЧастичногоВыбытия",            Перечисления.ВариантыУчетаЧастичногоВыбытияИС.ТекущаяНоменклатура);
					ДанныеНоменклатуры.Вставить("ВариантИспользованияЕдиницыХранения", Перечисления.ВариантыИспользованияЕдиницыХраненияИС.ЗаданУпаковками);
					ДанныеНоменклатуры.Вставить("ПотребительскаяУпаковка",             УпаковкаОбъект.Ссылка);
					ДанныеНоменклатуры.Вставить("УпаковкаЧастичногоВыбытия",           ЕдиницаИзмеренияМиллиЛитр);
			
					РегистрыСведений.ОписаниеНоменклатурыИС.УстановитьОписание(ДанныеНоменклатуры);
					
					МассивСтарыхКодов = СтрРазделить(СтрокаГруппы.КодыСтаройНоменклатуры, ";");

					Для Каждого Код Из МассивСтарыхКодов Цикл
	                    СсылкаНаСтарую = СоответствиеСтарыхСсылок[Код];
						Если СсылкаНаСтарую = Неопределено Тогда
							Продолжить;
						КонецЕсли;

						ВскрытаяСсылка = СоответствиеСтараяКВскрытой[СсылкаНаСтарую];
						
						НоваяСтрокаРегистра = ТЗ_ЗаписиВРегистр.Добавить();
						НоваяСтрокаРегистра.СтараяНоменклатура = СсылкаНаСтарую;
						НоваяСтрокаРегистра.НоваяНоменклатура = НоваяНоменклатураОбъект.Ссылка;
						НоваяСтрокаРегистра.ВскрытаяНоменклатура = ВскрытаяСсылка;
						НоваяСтрокаРегистра.БылОстаток = СтрокаГруппы.ЕстьОстаток;
					КонецЦикла;
					 
				Иначе
					
					СсылкаНаНовуюНоменклатуру = СуществующаяНоменклатура.Ссылка;
					
					ОбъектНовойНоменклатуры = СсылкаНаНовуюНоменклатуру.ПолучитьОбъект();
					ОбъектНовойНоменклатуры.ОбменДанными.Загрузка = Истина;
					
					ОбъектНовойНоменклатуры.Записать();
					
					МассивСтарыхКодов = СтрРазделить(СтрокаГруппы.КодыСтаройНоменклатуры, ";");
					Для Каждого Код Из МассивСтарыхКодов Цикл
						СсылкаНаСтарую = СоответствиеСтарыхСсылок[Код];
						Если СсылкаНаСтарую = Неопределено Тогда
							Продолжить;
						КонецЕсли;

						ВскрытаяСсылка = СоответствиеСтараяКВскрытой[СсылкаНаСтарую];
						
						НоваяСтрокаРегистра = ТЗ_ЗаписиВРегистр.Добавить();
						НоваяСтрокаРегистра.СтараяНоменклатура = СсылкаНаСтарую;
						НоваяСтрокаРегистра.НоваяНоменклатура = СсылкаНаНовуюНоменклатуру;
						НоваяСтрокаРегистра.ВскрытаяНоменклатура = ВскрытаяСсылка;
						НоваяСтрокаРегистра.БылОстаток = СтрокаГруппы.ЕстьОстаток;
						
					КонецЦикла;
				
				КонецЕсли;
			
			КонецЦикла;

			ЗафиксироватьТранзакцию();
		
		Исключение
			// В случае ошибки откатываем транзакцию
			ОтменитьТранзакцию();
			Сообщить("Ошибка при создании номенклатуры (пакет " + (НомерПакета + 1) + " из " + КоличествоПакетов + "): " + ОписаниеОшибки());
			ВызватьИсключение "Ошибка при создании номенклатуры: " + ОписаниеОшибки();
		КонецПопытки;
		
	КонецЦикла;
	
	// Пакетная запись в регистр сведений
	Если ТЗ_ЗаписиВРегистр.Количество() > 0 Тогда
		НаборЗаписей = РегистрыСведений.MRS_СоответствиеСтаройИНовойНоменклатуры.СоздатьНаборЗаписей();
		НаборЗаписей.Загрузить(ТЗ_ЗаписиВРегистр);
		НаборЗаписей.Записать(Ложь);
	КонецЕсли;
	
	// Обработка номенклатуры без остатков - изменяем единицу хранения на литры и создаем упаковку
	Если ТЗДляОбновления.Количество() > 0 Тогда
		
		// Обрабатываем номенклатуру без остатков пакетами
		РазмерПакетаОбновления = 5; // Меньший размер пакета для операций обновления
		ВсегоСтрокОбновления = ТЗДляОбновления.Количество();
		КоличествоПакетовОбновления = Цел(ВсегоСтрокОбновления / РазмерПакетаОбновления) + ?(ВсегоСтрокОбновления % РазмерПакетаОбновления = 0, 0, 1);
		
		Для НомерПакетаОбновления = 0 По КоличествоПакетовОбновления - 1 Цикл
			
			НачальныйИндексОбновления = НомерПакетаОбновления * РазмерПакетаОбновления;
			КонечныйИндексОбновления = Мин((НомерПакетаОбновления + 1) * РазмерПакетаОбновления - 1, ВсегоСтрокОбновления - 1);
			
			НачатьТранзакцию();
			
			Попытка
				
				Для ИндексОбновления = НачальныйИндексОбновления По КонечныйИндексОбновления Цикл
					
					СтрокаДляОбновления = ТЗДляОбновления[ИндексОбновления];
					
					НоменклатураОбъект = СтрокаДляОбновления.СерийнаяНоменклатура.ПолучитьОбъект();
					
					// Изменяем единицу хранения остатков на литры
					НоменклатураОбъект.ЕдиницаХраненияОстатков = ЕдиницаИзмеренияЛитр.Ссылка;
					НоменклатураОбъект.ОбменДанными.Загрузка = Истина;
					// Записываем изменения
					НоменклатураОбъект.Записать();
					
					// Создаем упаковку
					УпаковкаОбъект = Справочники.УпаковкиЕдиницыИзмерения.СоздатьЭлемент();
					УпаковкаОбъект.ЕдиницаИзмерения = ЕдиницаИзмеренияШтуки;
					УпаковкаОбъект.ТипИзмеряемойВеличины = Перечисления.ТипыИзмеряемыхВеличин.Упаковка;
					УпаковкаОбъект.ТипУпаковки = Перечисления.ТипыУпаковокНоменклатуры.Конечная;
					УпаковкаОбъект.Числитель = НоменклатураОбъект.ОбъемДАЛ * 10;
					УпаковкаОбъект.Знаменатель = 1;
					УпаковкаОбъект.Владелец = НоменклатураОбъект.Ссылка;
					УпаковкаОбъект.Наименование = ЕдиницаИзмеренияШтуки.Наименование + " (" + СТРОКА(НоменклатураОбъект.ОбъемДАЛ * 10) + " " + ЕдиницаИзмеренияЛитр.Наименование + ")";
					УпаковкаОбъект.ОбменДанными.Загрузка = Истина;
					УпаковкаОбъект.Записать();
					
					// Обновляем номенклатуру с новой упаковкой
					НоменклатураОбъектДляОбновления = НоменклатураОбъект.Ссылка.ПолучитьОбъект();
					НоменклатураОбъектДляОбновления.ОбменДанными.Загрузка = Истина;
					НоменклатураОбъектДляОбновления.ЕдиницаДляОтчетов = УпаковкаОбъект.Ссылка;
					НоменклатураОбъектДляОбновления.КоэффициентЕдиницыДляОтчетов = НоменклатураОбъект.ОбъемДАЛ *10;
					НоменклатураОбъектДляОбновления.Записать();
					
					// Создаем описание для ИС
					ДанныеНоменклатуры = Новый Структура();
					ДанныеНоменклатуры.Вставить("Номенклатура", НоменклатураОбъект.Ссылка);
					ДанныеНоменклатуры.Вставить("ЕмкостьПотребительскойУпаковки", НоменклатураОбъект.ОбъемДАЛ * 10000);
					ДанныеНоменклатуры.Вставить("КоличествоВПотребительскойУпаковке", НоменклатураОбъект.ОбъемДАЛ * 10);
					ДанныеНоменклатуры.Вставить("ВариантЧастичногоВыбытия", Перечисления.ВариантыУчетаЧастичногоВыбытияИС.ТекущаяНоменклатура);
					ДанныеНоменклатуры.Вставить("ВариантИспользованияЕдиницыХранения", Перечисления.ВариантыИспользованияЕдиницыХраненияИС.ЗаданУпаковками);
					ДанныеНоменклатуры.Вставить("ПотребительскаяУпаковка", УпаковкаОбъект.Ссылка);
					ДанныеНоменклатуры.Вставить("УпаковкаЧастичногоВыбытия", ЕдиницаИзмеренияМиллиЛитр);
					
					РегистрыСведений.ОписаниеНоменклатурыИС.УстановитьОписание(ДанныеНоменклатуры);
					
				КонецЦикла;
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				// В случае ошибки откатываем транзакцию
				ОтменитьТранзакцию();
				Сообщить("Ошибка при обновлении номенклатуры без остатков (пакет " + (НомерПакетаОбновления + 1) + " из " + КоличествоПакетовОбновления + "): " + ОписаниеОшибки());
				ВызватьИсключение "Ошибка при обновлении номенклатуры без остатков: " + ОписаниеОшибки();
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНоменклатуру(Команда)
	СоздатьНоменклатуруНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПолучитьРецептурыНаСервере()
	
	лТекст = "ВЫБРАТЬ
		         |	питРецептураИнгредиенты.Ссылка КАК Ссылка,
		         |	питРецептураИнгредиенты.Ссылка.Номер КАК Номер
		         |ИЗ
		         |	Документ.питРецептура.Ингредиенты КАК питРецептураИнгредиенты
		         |ГДЕ
		         |	питРецептураИнгредиенты.Ссылка.Подразделение = &Подразделение
		         |	И питРецептураИнгредиенты.Ссылка.ДатаКонца = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		         |	И НЕ питРецептураИнгредиенты.Ссылка.ПометкаУдаления
		         |	И питРецептураИнгредиенты.Номенклатура.АлкогольнаяПродукцияВоВскрытойТаре
		         |	И питРецептураИнгредиенты.Номенклатура.АлкогольнаяПродукция
		         |
		         |СГРУППИРОВАТЬ ПО
		         |	питРецептураИнгредиенты.Ссылка,
		         |	питРецептураИнгредиенты.Ссылка.Номер";

	лЗапрос = Новый Запрос(лТекст);

	// Присвоение значений переменным параметров.
	Подразделение = Справочники.СтруктураПредприятия.НайтиПоНаименованию("ОП Винный парк СЭЗ (20) (25)"); // ОП Винный парк СЭЗ (20) (25) (ER-000509)

	// Установка параметров.
	лЗапрос.УстановитьПараметр("Подразделение", Подразделение);


	Рецепты = лЗапрос.Выполнить().Выбрать();
	
	НачатьТранзакцию();
	
	Попытка
		
	Пока Рецепты.Следующий() Цикл
		
		СтрокаРецептуры = Рецептуры.Добавить();	
		
		СтрокаРецептуры.РецептураСтарая = Рецепты.Ссылка;
		СтрокаРецептуры.НомерСтарой    = Рецепты.Номер;
		
		ТекРецептура = Рецепты.Ссылка.ПолучитьОбъект();
		
		СписокНоменклатуры = Новый СписокЗначений;
		
		СписокНоменклатурыКоды = Новый СписокЗначений;
	
		Для Каждого СтрокаИнгредиенты ИЗ ТекРецептура.Ингредиенты Цикл
			
			Если СтрокаИнгредиенты.Номенклатура.АлкогольнаяПродукция и СтрокаИнгредиенты.Номенклатура.АлкогольнаяПродукцияВоВскрытойТаре Тогда
			
				СписокНоменклатуры.Добавить(СтрокаИнгредиенты.Номенклатура);	
				СписокНоменклатурыКоды.Добавить(СтрокаИнгредиенты.Номенклатура.Код);
				
			КонецЕсли;
			
		КонецЦикла;
		
		СтрокаРецептуры.НоменклатураСтарая = СписокНоменклатуры; 
		СтрокаРецептуры.НоменклатураСтараяКод = СписокНоменклатурыКоды;
		СтрокаРецептуры.Подразделение = ТекРецептура.Подразделение;
		
		СтруктураВозврата = НоваяРецептура(ТекРецептура);
		
		СтрокаРецептуры.НоменклатураНовая = СтруктураВозврата.СписокНовойНоменклатуры;
		СтрокаРецептуры.НоваяНоменклатураКод = СтруктураВозврата.СписокНовойНоменклатурыКод;
		СтрокаРецептуры.РецептураНовая    =  СтруктураВозврата.Документ;
		СтрокаРецептуры.РецептураНоваяНомер = СтруктураВозврата.НомерРецептуры;
		СтрокаРецептуры.СтрокаОшибки =  СтруктураВозврата.ТекстОшибки;  
		
	КонецЦикла;
	
    ЗафиксироватьТранзакцию();
	
	Исключение
		// В случае ошибки откатываем транзакцию
		ОтменитьТранзакцию();
		// Выводим информацию об ошибке
		ВызватьИсключение "Ошибка при создании номенклатуры: " + ОписаниеОшибки();
	КонецПопытки;

	
КонецПроцедуры

&НаСервере
Функция НоваяРецептура(РецептураИсходная)
	
		СтруктураВозврата =  Новый Структура;
		СписокНовойНоменклатуры = Новый СписокЗначений;
		СписокНовойНоменклатурыКод = Новый СписокЗначений;
		НовДок = Неопределено;		
		ТекстОшибки = "";
		
		СвойствоДопРеквиз = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("MRS_НоваяРецептура");
		ЗначениеСвойства = СокрЛП(УправлениеСвойствами.ЗначениеСвойства(РецептураИсходная.Ссылка, СвойствоДопРеквиз));
		
		Запрос = Новый Запрос;
		Запрос.Текст = " ВЫБРАТЬ
		                |	питРецептура.Ссылка КАК Ссылка
		                |ИЗ
		                |	Документ.питРецептура КАК питРецептура
		                |ГДЕ
		                |	питРецептура.Номер = &Номер
		                |	И питРецептура.ДатаКонца = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		                |			И НЕ питРецептура.ПометкаУдаления";
		
		Запрос.УстановитьПараметр("Номер", ЗначениеСвойства);
		
		РезультатЗапроса = Запрос.Выполнить().Выбрать();
		
		Пока РезультатЗапроса.Следующий() Цикл
			
			НовДокСсылка = РезультатЗапроса.Ссылка;
			НовДок = НовДокСсылка.ПолучитьОбъект();	
			
		КонецЦикла;
		
		Если НовДок <> Неопределено Тогда
			
			
		Иначе
			
			НовДок = РецептураИсходная.Скопировать();    
			НовДок.Дата        = ТекущаяДата();
			НовДок.ДатаНачала  =  Дата(2025, 12, 1);
			НовДок.ДатаКонца   =  Дата(2025, 12, 1);
			НовДок.Комментарий = РецептураИсходная.Комментарий + Символы.ПС + "Создан обработкой для перевода в серийный алкоголь";
			НовДок.Наименование = НовДок.Наименование + " [_mrs]";
	
		КонецЕсли;
			
		// Рекурсивно создадим или заполним уже созданными рецептурами
		// табчасть ингридиенты для вложенных рецептур
		Для Каждого СтрокаИнгредиенты ИЗ НовДок.Ингредиенты Цикл
			Если СтрокаИнгредиенты.Номенклатура.АлкогольнаяПродукция и СтрокаИнгредиенты.Номенклатура.АлкогольнаяПродукцияВоВскрытойТаре Тогда
				
				СвойствоДопРеквиз = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("MRS_НоваяСерийная");
				ЗначениеСвойства = УправлениеСвойствами.ЗначениеСвойства(СтрокаИнгредиенты.Номенклатура, СвойствоДопРеквиз);			
				
				Если ЗначениеСвойства <> Неопределено Тогда
					
					СписокНовойНоменклатурыКод.Добавить(ЗначениеСвойства);
					
					Запрос = Новый Запрос;
					Запрос.Текст = 
						"ВЫБРАТЬ
						|	Номенклатура.Ссылка КАК Ссылка
						|ИЗ
						|	Справочник.Номенклатура КАК Номенклатура
						|ГДЕ
						|	Номенклатура.Код В(&Код)";
					
					code = СтрЗаменить(СокрЛП(ЗначениеСвойства), ";", ""); 
					Запрос.УстановитьПараметр("Код", СокрЛП(code));
					
					РезультатЗапроса = Запрос.Выполнить().Выбрать();
					
					Пока РезультатЗапроса.Следующий() Цикл
						
						СтрокаИнгредиенты.Номенклатура = РезультатЗапроса.Ссылка;
						
						СписокНовойНоменклатуры.Добавить(РезультатЗапроса.Ссылка);
						
					КонецЦикла;

					Попытка 
						     						
						НовДок.Записать();
						СтруктураВозврата.Вставить("Документ", НовДок.Ссылка);
						СтруктураВозврата.Вставить("НомерРецептуры", НовДок.Номер); 
						
					Исключение
						
						СтрокаСообщенияОбОшибке = НСтр("ru = 'Не удалось записать новый документ по Рецептуре:%1.
						|Описание ошибки: %2'");
						
						ТекстОшибки = ТекстОшибки + Символы.ПС + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщенияОбОшибке,
										РецептураИсходная.Ссылка,
									КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
					КонецПопытки;

				Иначе
					
					СтрокаСообщенияОбОшибке = НСтр("ru = 'Не удалось найти сопоставление номенклатуры для вскрытой:%1.
					|Исходный документ: %2'");
					
					ТекстОшибки = ТекстОшибки + Символы.ПС + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщенияОбОшибке,
									СтрокаИнгредиенты.Номенклатура,
									РецептураИсходная.Ссылка);
          	        
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
	
		СтруктураВозврата.Вставить("СписокНовойНоменклатуры", СписокНовойНоменклатуры);
		СтруктураВозврата.Вставить("СписокНовойНоменклатурыКод", СписокНовойНоменклатурыКод);
		СтруктураВозврата.Вставить("ТекстОшибки", ТекстОшибки);
		
		Если СтруктураВозврата.Свойство("Документ") Тогда
		
		#Область MRS_РецептНовая
						
			ТЗ=Новый ТаблицаЗначений;
		    ТЗ.Колонки.Добавить("Свойство", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
		    ТЗ.Колонки.Добавить("Значение");
		    НовСтр=ТЗ.Добавить();
		    НовСтр.Свойство=ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("MRS_НоваяРецептура");
		    НовСтр.Значение = НовДок.Номер;
			УправлениеСвойствами.ЗаписатьСвойстваУОбъекта(РецептураИсходная.Ссылка,ТЗ);     
			
		#КонецОбласти
		
		#Область MRS_РецептСтарая
			
			ТЗ=Новый ТаблицаЗначений;
		    ТЗ.Колонки.Добавить("Свойство", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
		    ТЗ.Колонки.Добавить("Значение");
		    НовСтр=ТЗ.Добавить();
		    НовСтр.Свойство=ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("MRS_СтараяРецептура");
		    НовСтр.Значение = РецептураИсходная.Номер;
			УправлениеСвойствами.ЗаписатьСвойстваУОбъекта(НовДок.Ссылка,ТЗ);
			
		#КонецОбласти
		КонецЕсли;

		
		 Если НЕ СтруктураВозврата.Свойство("Документ") Тогда
			
			СтруктураВозврата.Вставить("Документ", Неопределено);
			
		КонецЕсли;
		
		Если НЕ СтруктураВозврата.Свойство("НомерРецептуры") Тогда
			
			СтруктураВозврата.Вставить("НомерРецептуры", Неопределено);	
			
		КонецЕсли;

			
		Возврат СтруктураВозврата;
		
КонецФункции

&НаКлиенте
Процедура ПолучитьРецептуры(Команда)
	ПолучитьРецептурыНаСервере();
КонецПроцедуры

&НаСервере
Процедура СоздатьсборкиНаСервере()
	
	/////////////////////////////////////////////////////////////
	// поиск замены
	лТекст = "
		|ВЫБРАТЬ
		|	НоменклатураДополнительныеРеквизиты.Свойство КАК Свойство,
		|	НоменклатураДополнительныеРеквизиты.Значение КАК Значение
		|ИЗ
		|	Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
		|ГДЕ
		|	НоменклатураДополнительныеРеквизиты.Свойство = &Свойство
		|	И НоменклатураДополнительныеРеквизиты.Ссылка = &Ссылка
		|";

	лЗапрос = Новый Запрос(лТекст);

	// Присвоение значений переменным параметров.
	Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("MRS_НоменклатураНовая"); // MRS_НоменклатураНовая ()

	// Установка параметров.
	лЗапрос.УстановитьПараметр("Свойство", Свойство);
	лЗапрос.УстановитьПараметр("Ссылка", Номенклатура);

	лВыборка = лЗапрос.Выполнить().Выбрать();

	Пока лВыборка.Следующий() Цикл

		ЗначениеДопРеквиз =  СтрЗаменить(лВыборка.Значение, ";","");
	
	КонецЦикла;

	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Ссылка,
		|	УпаковкиЕдиницыИзмерения.Ссылка КАК Упаковка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
		|		ПО (Номенклатура.Ссылка = УпаковкиЕдиницыИзмерения.Владелец)
		|ГДЕ
		|	Номенклатура.Код В (&Код)
		|";
	
	 
	Запрос.УстановитьПараметр("Код", ЗначениеДопРеквиз);
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		НоменклатураЗамены = Результат.Ссылка;
		УпаковкаНоменклатуры =  Результат.Упаковка;
		
	КонецЦикла;
	//////////////////////////////////////////////////////////////////////
	
	///////////////////////////////////////////////////////////////////////
	//Создаем комплектацию
		лТекст = "
		|ВЫБРАТЬ
		|	ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
		|	ТоварыНаСкладахОстатки.Серия КАК Серия,
		|	ТоварыНаСкладахОстатки.Серия.Номер КАК СерияНомер,
		|	ТоварыНаСкладахОстатки.Склад.ПЛ_Организация КАК Организация,
		|	ТоварыНаСкладахОстатки.Склад КАК Склад,
		|	ТоварыНаСкладахОстатки.ВНаличииОстаток КАК ВНаличииОстаток,
		|	ШтрихкодыУпаковокТоваров.Ссылка КАК Штрихкод
		|ИЗ
		|	РегистрНакопления.ТоварыНаСкладах.Остатки(&Дата, Номенклатура = &Номенклатура) КАК ТоварыНаСкладахОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
		|		ПО (ТоварыНаСкладахОстатки.Номенклатура = ШтрихкодыУпаковокТоваров.Номенклатура
		|				И ТоварыНаСкладахОстатки.Серия.Номер = ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода)
		|ИТОГИ
		|	СУММА(ВНаличииОстаток)
		|ПО
		|	Склад
		|";


	лЗапрос = Новый Запрос(лТекст);

	// Установка параметров.
	лЗапрос.УстановитьПараметр("Дата", Новый Граница(КонецДня(Период), ВидГраницы.Включая));
	лЗапрос.УстановитьПараметр("Номенклатура", Номенклатура);
	лЗапрос.УстановитьПараметр("Склад", Склад);
	
	ВыборкаСклад = лЗапрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаСклад.Следующий() Цикл
		
		Если ВыборкаСклад.ВНаличииОстаток > 0 Тогда
		
			ДокументСборки = Документы.СборкаТоваров.СоздатьДокумент();
		    ДокументСборки.Комментарий				= "#Документ создан обработкой комплектации в литражную номенклатуру.";
			ДокументСборки.Организация				= ?(ЗначениеЗаполнено(ВыборкаСклад.Организация), ВыборкаСклад.Организация, Справочники.Организации.ПустаяСсылка());
			ДокументСборки.Склад					= ВыборкаСклад.Склад;
			ДокументСборки.Дата						= ТекущаяДатаСеанса();
	        ДокументСборки.ХозяйственнаяОперация	= Перечисления.ХозяйственныеОперации.СборкаТоваров;
			ДокументСборки.Номенклатура				= НоменклатураЗамены;
			ДокументСборки.Ответственный			= ПараметрыСеанса.ТекущийПользователь;
			ДокументСборки.Статус					= Перечисления.СтатусыСборокТоваров.СобраноРазобрано;
			ДокументСборки.СборкаПодДеятельность	= Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
			ДокументСборки.ВариантПриемкиТоваров	= Перечисления.ВариантыПриемкиТоваров.РазделенаТолькоПоНакладным;
			ДокументСборки.КоличествоУпаковок		= ВыборкаСклад.ВНаличииОстаток;
			ДокументСборки.Упаковка					= УпаковкаНоменклатуры; 
			ДокументСборки.Количество				= ВыборкаСклад.ВНаличииОстаток;
			ДокументСборки.СтатусУказанияСерий		= 4;
			
			СтрокаТЧТовары = ДокументСборки.Товары.Добавить();
			
			СтрокаТЧТовары.Номенклатура				= Номенклатура;
			СтрокаТЧТовары.Количество				= ВыборкаСклад.ВНаличииОстаток;
			СтрокаТЧТовары.КоличествоУпаковок		= ВыборкаСклад.ВНаличииОстаток;
			СтрокаТЧТовары.СтатусУказанияСерий		= 4; 
			
			ВыборкаСерия = ВыборкаСклад.Выбрать();
			
			Пока ВыборкаСерия.Следующий() Цикл
				
				СтрокаСерии = ДокументСборки.Серии.Добавить();
				СтрокаСерии.Номенклатура	= ВыборкаСерия.Номенклатура;
				СтрокаСерии.Серия			= ВыборкаСерия.Серия;
				СтрокаСерии.Количество		= 1;
				
				СтрокаСерии	= ДокументСборки.Серии.Добавить();
				СтрокаСерии.Номенклатура	= НоменклатураЗамены;
				СтрокаСерии.Количество		= НоменклатураЗамены.ОбъемДАЛ * 10;
				СтрокаСерии.Серия			= ВыборкаСерия.Серия;
				
				ШтрихкодОбъект = ВыборкаСерия.Штрихкод.ПолучитьОбъект();
				ШтрихкодОбъект.Номенклатура = НоменклатураЗамены;
				ШтрихкодОбъект.Упаковка 	= УпаковкаНоменклатуры;
				ШтрихкодОбъект.Записать();
			КонецЦикла;
			
			ДокументСборки.Записать(РежимЗаписиДокумента.Запись);
			СтрокаДокументы = ТаблицаСборок.Добавить();
			СтрокаДокументы.ДокументыСборки = ДокументСборки.Ссылка;
			
		КонецЕсли;
		
	КонецЦикла;
	
	лТекст = "
	|ВЫБРАТЬ
	|	ПЛ_СоответствиеСФронтСистемами.Код КАК Код
	|ИЗ
	|	РегистрСведений.ПЛ_СоответствиеСФронтСистемами КАК ПЛ_СоответствиеСФронтСистемами
	|ГДЕ
	|	ПЛ_СоответствиеСФронтСистемами.Объект = &Объект
	|";

	лЗапрос = Новый Запрос(лТекст);

	// Установка параметров.
	лЗапрос.УстановитьПараметр("Объект", Номенклатура.ПЛ_НоменклатураВоВскрытойТаре.Ссылка);


	лВыборка = лЗапрос.Выполнить().Выбрать();

	Пока лВыборка.Следующий() Цикл
		
		Набор = РегистрыСведений.ПЛ_СоответствиеСФронтСистемами.СоздатьНаборЗаписей();
		Набор.Отбор.Код.Установить(лВыборка.Код);
		Набор.Прочитать();
		
		Для Каждого Запись из Набор Цикл
			
			Запись.НоменклатураАлкоголь = НоменклатураЗамены;
			
		КонецЦикла;
		
		Набор.Записать();
		
	КонецЦикла;
	
	
КонецПроцедуры

&НаКлиенте
Процедура Создатьсборки(Команда)
	СоздатьсборкиНаСервере();
КонецПроцедуры

#КонецОбласти

&НаСервереБезКонтекста
Функция СкорректироватьНаименованиеПоОбъему(Наименование, ОбъемДАЛ)
	
	// 1. Проверяем, есть ли уже объем в наименовании.
	// Используем широкий список вариантов, чтобы поймать разные форматы.
	МассивВариантовОбъема = Новый Массив;
	МассивВариантовОбъема.Добавить("0.375"); МассивВариантовОбъема.Добавить("0,375"); МассивВариантовОбъема.Добавить("0.375л"); МассивВариантовОбъема.Добавить("0,375л"); МассивВариантовОбъема.Добавить("0.375L"); МассивВариантовОбъема.Добавить("0,375L");
	МассивВариантовОбъема.Добавить("0.5"); МассивВариантовОбъема.Добавить("0,5"); МассивВариантовОбъема.Добавить("0.5л"); МассивВариантовОбъема.Добавить("0,5л"); МассивВариантовОбъема.Добавить("0.5L"); МассивВариантовОбъема.Добавить("0,5L");
	МассивВариантовОбъема.Добавить("0.7л"); МассивВариантовОбъема.Добавить("0,7"); МассивВариантовОбъема.Добавить("0,7л"); МассивВариантовОбъема.Добавить("0.7L"); МассивВариантовОбъема.Добавить("0,7L");
	МассивВариантовОбъема.Добавить("0.75л"); МассивВариантовОбъема.Добавить("0,75"); МассивВариантовОбъема.Добавить("0,75л"); МассивВариантовОбъема.Добавить("0.75L"); МассивВариантовОбъема.Добавить("0,75L");
	МассивВариантовОбъема.Добавить("1л"); МассивВариантовОбъема.Добавить("1L");
	МассивВариантовОбъема.Добавить("1,5л"); МассивВариантовОбъема.Добавить("1,5"); МассивВариантовОбъема.Добавить("1.5"); МассивВариантовОбъема.Добавить("1.5л"); МассивВариантовОбъема.Добавить("1,5L"); МассивВариантовОбъема.Добавить("1.5L");


	НаименованиеНРег = НРег(Наименование);
	Для Каждого Вариант Из МассивВариантовОбъема Цикл
		Если СтрНайти(НаименованиеНРег, НРег(Вариант)) > 0 Тогда
			// Объем уже есть, ничего не делаем.
			Возврат Наименование;
		КонецЕсли;
	КонецЦикла;
	
	// 2. Объем не найден, нужно его добавить.
	// Формируем строку с новым, каноничным объемом.
	НовыйОбъемСтрока = "";
	Если ОбъемДАЛ > 0 Тогда
		ОбъемВЛитрах = ОбъемДАЛ * 10;
		ФорматнаяСтрокаОбъема = Формат(ОбъемВЛитрах, "ЧДЦ=3; ЧРД=,");
		Пока Прав(ФорматнаяСтрокаОбъема, 1) = "0" И СтрДлина(ФорматнаяСтрокаОбъема) > 1 Цикл
			ФорматнаяСтрокаОбъема = Лев(ФорматнаяСтрокаОбъема, СтрДлина(ФорматнаяСтрокаОбъема) - 1);
		КонецЦикла;
		Если Прав(ФорматнаяСтрокаОбъема, 1) = "," Тогда
			ФорматнаяСтрокаОбъема = Лев(ФорматнаяСтрокаОбъема, СтрДлина(ФорматнаяСтрокаОбъема) - 1);
		КонецЕсли;
		НовыйОбъемСтрока = " " + ФорматнаяСтрокаОбъема + "л";
	КонецЕсли;

	Если ПустаяСтрока(НовыйОбъемСтрока) Тогда
		// Объем нулевой или не удалось сформировать строку, ничего не добавляем.
		Возврат Наименование;
	КонецЕсли;

	// 3. Ищем тег [mrs...], чтобы вставить объем перед ним.
	ПозицияТега = СтрНайти(Наименование, "[mrs");
	
	Результат = "";
	Если ПозицияТега > 0 Тогда
		// Тег найден, вставляем объем перед ним.
		ОсноваНаименования = СокрП(Лев(Наименование, ПозицияТега - 1));
		ТегМРС = Сред(Наименование, ПозицияТега);
		Результат = ОсноваНаименования + НовыйОбъемСтрока + " " + ТегМРС;
	Иначе
		// Тег не найден, добавляем объем в конец.
		Результат = СокрП(Наименование) + НовыйОбъемСтрока;
	КонецЕсли;

	// 4. Проверяем и корректируем длину.
	МаксДлина = 150;
	Если СтрДлина(Результат) > МаксДлина Тогда
		// В данном случае просто обрезаем, т.к. логика сложного восстановления не требуется
		Результат = Лев(Результат, МаксДлина);
	КонецЕсли;

	Возврат Результат;
	
КонецФункции



