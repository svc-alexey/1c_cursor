&НаКлиенте
// Выполняет запуск серверной корректировки из формы.
//
// Параметры:
//   Команда (Команда) - системный параметр команды формы.
Процедура ВыполнитьНаКлиенте(Команда)
    ВыполнитьНаСервере();
КонецПроцедуры

&НаКлиенте
// Обработчик команды формирования отчета по назначениям.
// Вызывает серверную процедуру для компоновки отчета.
//
// Параметры:
//   Команда - Команда - системный параметр команды формы.
//
Процедура СформироватьОтчет(Команда)

    СформироватьОтчетНаСервере();

КонецПроцедуры

&НаСервере
// Формирует отчет по остаткам с непустыми назначениями из трех регистров накопления.
// Результат отчета выводится в поле табличного документа РезультатОтчета.
Процедура СформироватьОтчетНаСервере()

    Если Не ЗначениеЗаполнено(Дата) Тогда

        Дата = ТекущаяДатаСеанса();

    КонецЕсли;

    // Получаем макет схемы компоновки данных 
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
    СхемаКомпоновкиДанных = ОбработкаОбъект.ПолучитьМакет("СхемаОтчетаПоНазначениям");

    // Инициализируем компоновщик настроек
    КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
    КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
    КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.ВариантыНастроек[0].Настройки);

    // Устанавливаем параметр Дата
    ПараметрДанных = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("Дата");
    
    Если ПараметрДанных <> Неопределено Тогда
    
        ПараметрДанных.Значение      = Новый Граница(КонецДня(Дата), ВидГраницы.Включая);
        ПараметрДанных.Использование = Истина;
    
    КонецЕсли;

    // Очищаем табличный документ
    РезультатОтчета.Очистить();

    // Создаем компоновщик макета и выполняем компоновку
    КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
    ТипГенератора     = Тип("ГенераторМакетаКомпоновкиДанных");
    НастройкиКомпоновки = КомпоновщикНастроек.ПолучитьНастройки();
    МакетКомпоновки   = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиКомпоновки, , , ТипГенератора);

    // Инициализируем процессор компоновки данных
    ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
    ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , , Истина);

    // Выводим результат в табличный документ
    ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
    ПроцессорВывода.УстановитьДокумент(РезультатОтчета);
    ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);

КонецПроцедуры

&НаСервере
// Выполняет корректировку назначений (аналогично исходной обработке): 
// формирует пакет запросов, создаёт документ и записывает его.
Процедура ВыполнитьНаСервере()

    Если Не ЗначениеЗаполнено(Дата) Тогда

        Дата = ТекущаяДатаСеанса();

    КонецЕсли;

    ДатаДвижений = Дата;
    КомментарийДокумента = ?(ЗначениеЗаполнено(Комментарий), Комментарий, "ERP-5399. Корректировка назначений.");

    ЗапросОстатков = Новый Запрос;
    ЗапросОстатков.Текст =
"ВЫБРАТЬ
|СебестоимостьТоваровОстатки.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
|СебестоимостьТоваровОстатки.РазделУчета КАК РазделУчета,
|СебестоимостьТоваровОстатки.ВидЗапасов КАК ВидЗапасов,
|СебестоимостьТоваровОстатки.Организация КАК Организация,
|СебестоимостьТоваровОстатки.Партия КАК Партия,
|СебестоимостьТоваровОстатки.АналитикаУчетаПартий КАК АналитикаУчетаПартий,
|СебестоимостьТоваровОстатки.АналитикаФинансовогоУчета КАК АналитикаФинансовогоУчета,
|СебестоимостьТоваровОстатки.ВидДеятельностиНДС КАК ВидДеятельностиНДС,
|СебестоимостьТоваровОстатки.КоличествоОстаток КАК КоличествоОстаток,
|СебестоимостьТоваровОстатки.СтоимостьОстаток КАК СтоимостьОстаток,
|СебестоимостьТоваровОстатки.СтоимостьБезНДСОстаток КАК СтоимостьБезНДСОстаток,
|СебестоимостьТоваровОстатки.СтоимостьЗабалансоваяОстаток КАК СтоимостьЗабалансоваяОстаток,
|СебестоимостьТоваровОстатки.ДопРасходыОстаток КАК ДопРасходыОстаток,
|СебестоимостьТоваровОстатки.ДопРасходыБезНДСОстаток КАК ДопРасходыБезНДСОстаток,
|СебестоимостьТоваровОстатки.ТрудозатратыОстаток КАК ТрудозатратыОстаток,
|СебестоимостьТоваровОстатки.ПостатейныеПостоянныеСНДСОстаток КАК ПостатейныеПостоянныеСНДСОстаток,
|СебестоимостьТоваровОстатки.ПостатейныеПеременныеСНДСОстаток КАК ПостатейныеПеременныеСНДСОстаток,
|СебестоимостьТоваровОстатки.ПостатейныеПостоянныеБезНДСОстаток КАК ПостатейныеПостоянныеБезНДСОстаток,
|СебестоимостьТоваровОстатки.ПостатейныеПеременныеБезНДСОстаток КАК ПостатейныеПеременныеБезНДСОстаток,
|СебестоимостьТоваровОстатки.СтоимостьРеглОстаток КАК СтоимостьРеглОстаток,
|СебестоимостьТоваровОстатки.СтоимостьЗабалансоваяРеглОстаток КАК СтоимостьЗабалансоваяРеглОстаток,
|СебестоимостьТоваровОстатки.ДопРасходыРеглОстаток КАК ДопРасходыРеглОстаток,
|СебестоимостьТоваровОстатки.ТрудозатратыРеглОстаток КАК ТрудозатратыРеглОстаток,
|СебестоимостьТоваровОстатки.ПостатейныеПостоянныеРеглОстаток КАК ПостатейныеПостоянныеРеглОстаток,
|СебестоимостьТоваровОстатки.ПостатейныеПеременныеРеглОстаток КАК ПостатейныеПеременныеРеглОстаток,
|СебестоимостьТоваровОстатки.ПостояннаяРазницаОстаток КАК ПостояннаяРазницаОстаток,
|СебестоимостьТоваровОстатки.ВременнаяРазницаОстаток КАК ВременнаяРазницаОстаток,
|СебестоимостьТоваровОстатки.СтоимостьУпрОстаток КАК СтоимостьУпрОстаток,
|СебестоимостьТоваровОстатки.ДопРасходыУпрОстаток КАК ДопРасходыУпрОстаток,
|СебестоимостьТоваровОстатки.ТрудозатратыУпрОстаток КАК ТрудозатратыУпрОстаток,
|СебестоимостьТоваровОстатки.ПостатейныеПостоянныеУпрОстаток КАК ПостатейныеПостоянныеУпрОстаток,
|СебестоимостьТоваровОстатки.ПостатейныеПеременныеУпрОстаток КАК ПостатейныеПеременныеУпрОстаток,
|СебестоимостьТоваровОстатки.РезервПодОбесценениеРеглОстаток КАК РезервПодОбесценениеРеглОстаток,
|СебестоимостьТоваровОстатки.РезервПодОбесценениеУпрОстаток КАК РезервПодОбесценениеУпрОстаток,
|СебестоимостьТоваровОстатки.СтоимостьНДДОстаток КАК СтоимостьНДДОстаток
|ИЗ
|РегистрНакопления.СебестоимостьТоваров.Остатки(&Дата, АналитикаУчетаНоменклатуры.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)) КАК СебестоимостьТоваровОстатки
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|ТоварыОрганизацийОстатки.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
|ТоварыОрганизацийОстатки.Организация КАК Организация,
|ТоварыОрганизацийОстатки.ВидЗапасов КАК ВидЗапасов,
|ТоварыОрганизацийОстатки.НомерГТД КАК НомерГТД,
|ТоварыОрганизацийОстатки.КоличествоОстаток КАК КоличествоОстаток,
|ТоварыОрганизацийОстатки.КОформлениюСписанияОстаток КАК КОформлениюСписанияОстаток,
|ТоварыОрганизацийОстатки.КоличествоПоРНПТОстаток КАК КоличествоПоРНПТОстаток,
|ТоварыОрганизацийОстатки.КОформлениюСписанияПоРНПТОстаток КАК КОформлениюСписанияПоРНПТОстаток,
|ТоварыОрганизацийОстатки.алкСлужебныйОстаток КАК алкСлужебныйОстаток
|ИЗ
|РегистрНакопления.ТоварыОрганизаций.Остатки(&Дата, АналитикаУчетаНоменклатуры.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)) КАК ТоварыОрганизацийОстатки
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
|ТоварыНаСкладахОстатки.Характеристика КАК Характеристика,
|ТоварыНаСкладахОстатки.Назначение КАК Назначение,
|ТоварыНаСкладахОстатки.Склад КАК Склад,
|ТоварыНаСкладахОстатки.Помещение КАК Помещение,
|ТоварыНаСкладахОстатки.Серия КАК Серия,
|ТоварыНаСкладахОстатки.ВНаличииОстаток КАК ВНаличииОстаток,
|ТоварыНаСкладахОстатки.КОтгрузкеОстаток КАК КОтгрузкеОстаток,
|ТоварыНаСкладахОстатки.алкСлужебныйОстаток КАК алкСлужебныйОстаток
|ИЗ
|РегистрНакопления.ТоварыНаСкладах.Остатки(&Дата, Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)) КАК ТоварыНаСкладахОстатки";

    ЗапросОстатков.УстановитьПараметр("Дата", Новый Граница(КонецДня(ДатаДвижений), ВидГраницы.Включая));

    РезультатПакета = ЗапросОстатков.ВыполнитьПакет();

    СформироватьИЗаписатьДокументКорректировки(ДатаДвижений, КомментарийДокумента, РезультатПакета);

КонецПроцедуры

&НаСервере
// Создает документ "Корректировка регистров", заполняет таблицы движений из результата пакета и записывает документ.
//
// Параметры:
//  ДатаДвижений (Дата) - дата проведения документа корректировки.
//  КомментарийДокумента (Строка) - текст комментария для документа.
//  РезультатПакета (РезультатЗапроса) - результат пакетного запроса с данными для движений.
//
Процедура СформироватьИЗаписатьДокументКорректировки(ДатаДвижений, КомментарийДокумента, РезультатПакета)

    ДокОбъект = Документы.КорректировкаРегистров.СоздатьДокумент();
    ДокОбъект.Ответственный = Пользователи.ТекущийПользователь();
    ДокОбъект.Комментарий   = КомментарийДокумента;
    ДокОбъект.Дата          = ДатаДвижений;
    ДокОбъект.Операция      = Перечисления.ОперацииКорректировкиРегистров.РучнаяКорректировка;

    ТаблицаСС = ДокОбъект.ТаблицаРегистров.Добавить();
    ТаблицаСС.Имя = "СебестоимостьТоваров";

    ТаблицаТО = ДокОбъект.ТаблицаРегистров.Добавить();
    ТаблицаТО.Имя = "ТоварыОрганизаций";

    ТаблицаТнС = ДокОбъект.ТаблицаРегистров.Добавить();
    ТаблицаТнС.Имя = "ТоварыНаСкладах";

    ВыборкаСС = РезультатПакета[0].Выбрать();
    Пока ВыборкаСС.Следующий() Цикл

        ДвижениеСС = ДокОбъект.Движения.СебестоимостьТоваров.Добавить();
        ДвижениеСС.ВидДвижения = ВидДвиженияНакопления.Расход;
        ДвижениеСС.Активность = Истина;
        ДвижениеСС.Период = ДатаДвижений;
        ДвижениеСС.АналитикаУчетаНоменклатуры = ВыборкаСС.АналитикаУчетаНоменклатуры;
        ДвижениеСС.РазделУчета = ВыборкаСС.РазделУчета;
        ДвижениеСС.ВидЗапасов = ВыборкаСС.ВидЗапасов;
        ДвижениеСС.Организация = ВыборкаСС.Организация;
        ДвижениеСС.Партия = ВыборкаСС.Партия;
        ДвижениеСС.АналитикаУчетаПартий = ВыборкаСС.АналитикаУчетаПартий;
        ДвижениеСС.ВидДеятельностиНДС = ВыборкаСС.ВидДеятельностиНДС;
        ДвижениеСС.Количество = ВыборкаСС.КоличествоОстаток;
        ДвижениеСС.Стоимость = ВыборкаСС.СтоимостьОстаток;
        ДвижениеСС.СтоимостьБезНДС = ВыборкаСС.СтоимостьБезНДСОстаток;
        ДвижениеСС.СтоимостьЗабалансовая = ВыборкаСС.СтоимостьЗабалансоваяОстаток;
        ДвижениеСС.ДопРасходы = ВыборкаСС.ДопРасходыОстаток;
        ДвижениеСС.ДопРасходыБезНДС = ВыборкаСС.ДопРасходыБезНДСОстаток;
        ДвижениеСС.Трудозатраты = ВыборкаСС.ТрудозатратыОстаток;
        ДвижениеСС.ПостатейныеПеременныеСНДС = ВыборкаСС.ПостатейныеПеременныеСНДСОстаток;
        ДвижениеСС.ПостатейныеПостоянныеСНДС = ВыборкаСС.ПостатейныеПостоянныеСНДСОстаток;
        ДвижениеСС.ПостатейныеПеременныеБезНДС = ВыборкаСС.ПостатейныеПеременныеБезНДСОстаток;
        ДвижениеСС.ПостатейныеПостоянныеБезНДС = ВыборкаСС.ПостатейныеПостоянныеБезНДСОстаток;
        ДвижениеСС.СтоимостьРегл = ВыборкаСС.СтоимостьРеглОстаток;
        ДвижениеСС.СтоимостьЗабалансоваяРегл = ВыборкаСС.СтоимостьЗабалансоваяРеглОстаток;
        ДвижениеСС.ДопРасходыРегл = ВыборкаСС.ДопРасходыРеглОстаток;
        ДвижениеСС.ТрудозатратыРегл = ВыборкаСС.ТрудозатратыРеглОстаток;
        ДвижениеСС.ПостатейныеПостоянныеРегл = ВыборкаСС.ПостатейныеПостоянныеРеглОстаток;
        ДвижениеСС.ПостатейныеПеременныеРегл = ВыборкаСС.ПостатейныеПеременныеРеглОстаток;
        ДвижениеСС.ПостояннаяРазница = ВыборкаСС.ПостояннаяРазницаОстаток;
        ДвижениеСС.ВременнаяРазница = ВыборкаСС.ВременнаяРазницаОстаток;
        ДвижениеСС.СтоимостьУпр = ВыборкаСС.СтоимостьУпрОстаток;
        ДвижениеСС.ДопРасходыУпр = ВыборкаСС.ДопРасходыУпрОстаток;
        ДвижениеСС.ТрудозатратыУпр = ВыборкаСС.ТрудозатратыУпрОстаток;
        ДвижениеСС.ПостатейныеПостоянныеУпр = ВыборкаСС.ПостатейныеПостоянныеУпрОстаток;
        ДвижениеСС.ПостатейныеПеременныеУпр = ВыборкаСС.ПостатейныеПеременныеУпрОстаток;
        ДвижениеСС.ТипЗаписи = Перечисления.ТипыЗаписейПартий.Партия;
        ДвижениеСС.РасчетСебестоимости = Истина;

    КонецЦикла;

    ВыборкаТО = РезультатПакета[1].Выбрать();
    Пока ВыборкаТО.Следующий() Цикл

        ДвижениеТО = ДокОбъект.Движения.ТоварыОрганизаций.Добавить();
        ДвижениеТО.ВидДвижения = ВидДвиженияНакопления.Расход;
        ДвижениеТО.Активность = Истина;
        ДвижениеТО.Период = ДатаДвижений;
        ДвижениеТО.АналитикаУчетаНоменклатуры = ВыборкаТО.АналитикаУчетаНоменклатуры;
        ДвижениеТО.ВидЗапасов = ВыборкаТО.ВидЗапасов;
        ДвижениеТО.Организация = ВыборкаТО.Организация;
        ДвижениеТО.НомерГТД = ВыборкаТО.НомерГТД;
        ДвижениеТО.Количество = ВыборкаТО.КоличествоОстаток;
        ДвижениеТО.КОформлениюСписания = ВыборкаТО.КОформлениюСписанияОстаток;
        ДвижениеТО.КоличествоПоРНПТ = ВыборкаТО.КоличествоПоРНПТОстаток;
        ДвижениеТО.алкСлужебный = ВыборкаТО.алкСлужебныйОстаток;
        ДвижениеТО.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочиеРасходы;

    КонецЦикла;

    ВыборкаТнС = РезультатПакета[2].Выбрать();
    Пока ВыборкаТнС.Следующий() Цикл

        ДвижениеТнС = ДокОбъект.Движения.ТоварыНаСкладах.Добавить();
        ДвижениеТнС.ВидДвижения = ВидДвиженияНакопления.Расход;
        ДвижениеТнС.Активность = Истина;
        ДвижениеТнС.Период = ДатаДвижений;
        ДвижениеТнС.Номенклатура = ВыборкаТнС.Номенклатура;
        ДвижениеТнС.Назначение = ВыборкаТнС.Назначение;
        ДвижениеТнС.Склад = ВыборкаТнС.Склад;
        ДвижениеТнС.Серия = ВыборкаТнС.Серия;
        ДвижениеТнС.ВНаличии = ВыборкаТнС.ВНаличииОстаток;
        ДвижениеТнС.КОтгрузке = ВыборкаТнС.КОтгрузкеОстаток;
        ДвижениеТнС.алкСлужебный = ВыборкаТнС.алкСлужебныйОстаток;

    КонецЦикла;

    ДокОбъект.Записать();

    ПроверитьОтрицательныеОстаткиНаСервере(ДокОбъект.Дата);

    ДокументКорректировки = ДокОбъект.Ссылка;

КонецПроцедуры


// Проверяет наличие отрицательных остатков в регистрах накопления
// "СебестоимостьТоваров", "ТоварыОрганизаций" и "ТоварыНаСкладах" на указанную дату.
// В случае обнаружения отрицательных остатков выводит сообщение пользователю.
//
// Параметры:
//   ДатаПроверки (Дата) - дата, на которую выполняется проверка остатков.
//
Процедура ПроверитьОтрицательныеОстаткиНаСервере(ДатаПроверки)

    ТекстЗапроса =
    "ВЫБРАТЬ
    |    ""СебестоимостьТоваров"" КАК ИмяРегистра,
    |    Остатки.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
    |    Остатки.АналитикаУчетаНоменклатуры.Склад КАК Склад,
    |    Остатки.КоличествоОстаток КАК Остаток
    |ИЗ
    |    РегистрНакопления.СебестоимостьТоваров.Остатки(&Дата, КоличествоОстаток < 0) КАК Остатки
    |
    |ОБЪЕДИНИТЬ ВСЕ
    |
    |ВЫБРАТЬ
    |    ""ТоварыОрганизаций"",
    |    Остатки.АналитикаУчетаНоменклатуры.Номенклатура,
    |    Остатки.АналитикаУчетаНоменклатуры.Склад,
    |    Остатки.КоличествоОстаток
    |ИЗ
    |    РегистрНакопления.ТоварыОрганизаций.Остатки(&Дата, КоличествоОстаток < 0) КАК Остатки
    |
    |ОБЪЕДИНИТЬ ВСЕ
    |
    |ВЫБРАТЬ
    |    ""ТоварыНаСкладах"",
    |    Остатки.Номенклатура,
    |    Остатки.Склад,
    |    Остатки.ВНаличииОстаток
    |ИЗ
    |    РегистрНакопления.ТоварыНаСкладах.Остатки(&Дата, ВНаличииОстаток < 0) КАК Остатки";

    Запрос = Новый Запрос;
    Запрос.Текст = ТекстЗапроса;
    Запрос.УстановитьПараметр("Дата", Новый Граница(ДатаПроверки, ВидГраницы.Включая));

    Результат = Запрос.Выполнить();
    Если Не Результат.Пустой() Тогда
        СообщитьОбОтрицательныхОстатках(Результат.Выгрузить());
    КонецЕсли;

КонецПроцедуры

// Формирует и выводит сообщение об обнаруженных отрицательных остатках.
//
// Параметры:
//  ТаблицаОстатков (ТаблицаЗначений) - таблица с данными об отрицательных остатках.
//
Процедура СообщитьОбОтрицательныхОстатках(ТаблицаОстатков)

    Области = Новый Соответствие;

    Для Каждого СтрокаТЗ Из ТаблицаОстатков Цикл
        Если Области[СтрокаТЗ.ИмяРегистра] = Неопределено Тогда
            Области.Вставить(СтрокаТЗ.ИмяРегистра, Новый Массив);
        КонецЕсли;
        Области[СтрокаТЗ.ИмяРегистра].Добавить(СтрокаТЗ);
    КонецЦикла;

    Для Каждого Область Из Области Цикл
        ТекстСообщения = "Обнаружены отрицательные остатки в регистре ""%1""";
        Сообщение = Новый СообщениеПользователю;
        Сообщение.Текст = СтрШаблон(ТекстСообщения, Область.Ключ);
        Сообщение.Сообщить();
        Для Каждого Остаток Из Область.Значение Цикл
            ТекстСообщения = "Номенклатура: %1, Склад: %2, Остаток: %3";
            Сообщение = Новый СообщениеПользователю;
            Сообщение.Текст = СтрШаблон(ТекстСообщения, Остаток.Номенклатура, Остаток.Склад, Остаток.Остаток);
            Сообщение.Сообщить();
        КонецЦикла;
    КонецЦикла;

КонецПроцедуры


