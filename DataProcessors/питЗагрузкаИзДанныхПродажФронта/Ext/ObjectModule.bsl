#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

// Перем Права;
Перем СписокИсключающихДокументов Экспорт;           // Список документов, исключенных из обработки
Перем СписокОтключенныхДокументов Экспорт;           // Список документов, отключенных из обработки
Перем МассивСохраненныхДокументов Экспорт;			// массив для хранения документов, которые были созданы в результате загрузки
Перем МассивУдаленныхДокументов Экспорт;            // массив для хранения документов, которые были удалены в результате загрузки
Перем МассивНеОбработанныхДокументов;
Перем ТаблицаОбъектов;
Перем СписокОбрабатываемыхДокументов Экспорт;
Перем ТаблицаСоответствияРегистратораИДокумента;
Перем ТаблицаОплат;
Перем ТаблицаПродаж;
Перем ТаблицаПродажМодификаторы;
Перем СтруктураТекущихСостояний;
Перем ДанныеОбъекта;
Перем КэшРецептур;
Перем мВалютаРегламентированногоУчета Экспорт;     // валюта регламентированного учета
Перем ДопПараметры;
Перем питФормироватьДокументыПроизводства22 Экспорт;
Перем ТаблицаЭквайринговыхТерминалов;
Перем ТаблицаКонтрагентов;
Перем ТаблицаПодарочныхСертификатов;
Перем ТаблицаБонусныхПрограмм;
Перем УпаковкиКэшированныеЗначения;

// Загружает в ТЧ обработки для касс ККМ параметры кассовых узлов
Процедура ЗагрузитьПараметрыКассККМ(СписокКасс = Неопределено) Экспорт
	ПараметрыКасс.Очистить();
	Запрос = Новый Запрос;
	// Формируем условие отбора
	УсловиеГДЕ = "";
	Если ЗначениеЗаполнено(КассовыйУзел) Тогда
		УсловиеГДЕ = "ГДЕ УдаленныеКассы.Ссылка = &КассовыйУзел";
		Запрос.УстановитьПараметр("КассовыйУзел",КассовыйУзел);
	КонецЕсли;
	Если СписокКасс <> Неопределено И СписокКасс.Количество() > 0 Тогда
		УсловиеГДЕ = УсловиеГДЕ + ?(УсловиеГДЕ = "","ГДЕ", " И ") + " КассыККМ.Ссылка В(&СписокКасс)";
		Запрос.УстановитьПараметр("СписокКасс",СписокКасс);
	КонецЕсли;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КассыККМ.Ссылка КАК КассаККМ,
	|	УдаленныеКассы.Ссылка КАК Ссылка,
	|	УдаленныеКассы.СпособОпределенияСкладаПриготовления КАК СпособОпределенияСкладаПриготовления,
	|	УдаленныеКассы.СпособОпределенияСкладаРеализации КАК СпособОпределенияСкладаРеализации,
	|	УдаленныеКассы.СкладПриготовления КАК СкладПриготовления,
	|	УдаленныеКассы.СкладРеализации КАК СкладРеализации,
	|	УдаленныеКассы.РазрешитьНедовложения КАК РазрешитьНедовложения,
	|	УдаленныеКассы.УчитыватьОстаткиБлюдНаСкладе КАК УчитыватьОстаткиБлюдНаСкладе,
	|	УдаленныеКассы.ЗагрузкаДанныхПродажВПроизводственныеДокументы КАК ЗагрузкаДанныхПродажВПроизводственныеДокументы,
	|	УдаленныеКассы.ЗапретитьПовторнуюЗагрузкуДанныхПродаж КАК ЗапретитьПовторнуюЗагрузкуДанныхПродаж,
	|	УдаленныеКассы.ПроводитьЗагружаемыеДокументы КАК ПроводитьЗагружаемыеДокументы,
	|	УдаленныеКассы.ЗагружатьТоварыВВыпускСПеремещением КАК ЗагружатьТоварыВВыпускСПеремещением,
	|	УдаленныеКассы.УчитыватьВозвратыПриЗагрузкеПродаж КАК УчитыватьВозвратыПриЗагрузкеПродаж,
//<< Ефимова Т.В., 19.10.2022, SD101396, доработка
	|	ВЫБОР
	|		КОГДА УдаленныеКассы.СкладПриготовления = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|				ИЛИ УдаленныеКассы.СкладРеализации = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Использовать, 
	// | ИСТИНА КАК Использовать,
	//>>	|	КассыККМ.Владелец КАК Организация,
	|	УдаленныеКассы.ОрганизацияЦелевыхДокументовИзКассыККМ КАК ОрганизацияЦелевыхДокументовИзКассыККМ,
	|	УдаленныеКассы.Организация КАК ОрганизацияКассовогоУзла,
	|	УдаленныеКассы.Подразделение КАК ПодразделениеКассовогоУзла,
	|	УдаленныеКассы.ОформлятьДокументыИСМП КАК ОформлятьДокументыИСМП,
	|	УдаленныеКассы.ОформлятьДокументыЕГАИС КАК ОформлятьДокументыЕГАИС,
	|	УдаленныеКассы.УменьшатьСуммыТоваровНаСуммуБонусов КАК УменьшатьСуммыТоваровНаСуммуБонусов
	|ИЗ
	|	Справочник.КассыККМ КАК КассыККМ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланОбмена.питУдаленныеКассы КАК УдаленныеКассы
	|		ПО КассыККМ.питКассовыйУзел = УдаленныеКассы.Ссылка "+УсловиеГДЕ;
	ПараметрыКасс.Загрузить(Запрос.Выполнить().Выгрузить());
КонецПроцедуры

// Возвращает результат проверки данных на корректность
Функция ПроверитьКорректность(ВыводитьСообщениеОбОшибках = Истина) Экспорт
	// Обрабатываем ситуацию, когда в документе имеются в ТЧ Товары несколько строк с разными складами.
	// При этом в ТЧ Оплаты более одного типа оплаты.
	Результат = Истина;
	СообщениеОбОшибках = "";
	СообщениеОбОшибках = "Следующие документы не будут обработаны:" + Символы.ПС;
	СписокИсключающихДокументов = Новый СписокЗначений;
	
	// получим список касс ККМ
	СписокКасс = Новый СписокЗначений;
	СтрокиПараметров = ПараметрыКасс.НайтиСтроки(Новый Структура ("Использовать",Истина));
	Для Каждого СтрокаПараметров Из СтрокиПараметров Цикл
		СписокКасс.Добавить(СтрокаПараметров.КассаККМ);
	КонецЦикла;
	
	// Сформируем условие отбора по реквизитам
	УсловиеОтбора = "";
	УсловиеОтбора = УсловиеОтбора + ?(НЕ ЗначениеЗаполнено(ДатаНачалаОтбора),""," И УчетДанныхПродаж.ДокументРегистратор.Дата >= &ДатаНач ");
	УсловиеОтбора = УсловиеОтбора + ?(НЕ ЗначениеЗаполнено(ДатаКонцаОтбора),""," И УчетДанныхПродаж.ДокументРегистратор.Дата <= &ДатаКон ");
	УсловиеОтбора = УсловиеОтбора + ?(НЕ ЗначениеЗаполнено(Организация),""," И УчетДанныхПродаж.ДокументРегистратор.Организация = &Организация ");
	УсловиеОтбора = УсловиеОтбора + " И УчетДанныхПродаж.ДокументРегистратор.КассаККМ В (&СписокКасс) ";
	
	ВыборСкладаРеализации = "
	|	ВЫБОР КОГДА ПараметрыКасс.СпособОпределенияСкладаРеализации = 1 И ДанныеПродажФронтаТовары.Ссылка.Зал.СкладРеализации <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) ТОГДА
	|		ДанныеПродажФронтаТовары.Ссылка.Зал.СкладРеализации
	|	КОГДА ПараметрыКасс.СпособОпределенияСкладаРеализации = 2 И ДанныеПродажФронтаТовары.МестоПечати.СкладПриготовления <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) ТОГДА
	|	ДанныеПродажФронтаТовары.МестоПечати.СкладПриготовления
	|	ИНАЧЕ
	|		ПараметрыКасс.СкладРеализации
	|	КОНЕЦ";
	
	ВыборСкладаПриготовления = "
	|	ВЫБОР КОГДА ПараметрыКасс.СпособОпределенияСкладаПриготовления = 1 И ДанныеПродажФронтаТовары.Ссылка.Зал.СкладРеализации <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) Тогда
	|	ДанныеПродажФронтаТовары.Ссылка.Зал.СкладРеализации
	|	КОГДА ПараметрыКасс.СпособОпределенияСкладаПриготовления = 2 И ДанныеПродажФронтаТовары.МестоПечати.СкладПриготовления <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) Тогда
	|	ДанныеПродажФронтаТовары.МестоПечати.СкладПриготовления
	|	ИНАЧЕ
	|		ПараметрыКасс.СкладПриготовления
	|	КОНЕЦ";
	
	ВыборВидаДокумента = "
	|	ВЫБОР
	|		КОГДА ДанныеПродажФронтаТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.питХозяйственныеОперации.ДанныеПродажФронтаНеподдерживаемаяОперация)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		КОГДА ДанныеПродажФронтаТовары.Ссылка.ВидОперации = &ХозОперацияВозврат  
	|			ТОГДА ""ВозвратОтПокупателя""
	|		КОГДА ДанныеПродажФронтаУчетАлкоголя.Ссылка.ВидОперации = &ХозОперацияУчетАлкоголя
	|			И ПараметрыКасс.ОформлятьДокументыИСМП
	|			И ДанныеПродажФронтаУчетАлкоголя.Номенклатура.ОсобенностьУчета = &ОсобенностьУчетаПиво
	|			ТОГДА ""УчетАлкоголяПиво""
	|		КОГДА ДанныеПродажФронтаУчетАлкоголя.Ссылка.ВидОперации = &ХозОперацияУчетАлкоголя
	|			И ПараметрыКасс.ОформлятьДокументыЕГАИС
	|			И ДанныеПродажФронтаУчетАлкоголя.Номенклатура.ОсобенностьУчета = &ОсобенностьУчетаАлкоголь
	|			ТОГДА ""УчетАлкоголяКрепкийАлкоголь""
	|		КОГДА (ДанныеПродажФронтаТовары.Ссылка.ВидОперации = &ХозОперацияОтмена 
	|						И ДанныеПродажФронтаТовары.СоСписанием
	|					ИЛИ ВидыОплатОрганизаций.питВидОперации = &ВидыОперацийПоЗагрузкеСписание) 
	|				И (НЕ ПараметрыКасс.ЗагрузкаДанныхПродажВПроизводственныеДокументы)
	|			ТОГДА ""ВыпускСоСписанием""
	|		КОГДА ПараметрыКасс.ЗагрузкаДанныхПродажВПроизводственныеДокументы
	|				И (ВидыОплатОрганизаций.питВидОперации = &ВидыОперацийПоЗагрузкеСписание 
	|					ИЛИ ДанныеПродажФронтаТовары.Ссылка.ВидОперации = &ХозОперацияОтмена 
	|						И ДанныеПродажФронтаТовары.СоСписанием)
	|			ТОГДА ""ВыпускСоСписанием""
	|		КОГДА НЕ ПараметрыКасс.ЗагрузкаДанныхПродажВПроизводственныеДокументы
	|				И (ВидыОплатОрганизаций.питВидОперации = &ВидыОперацийПоЗагрузкеРеализация
	|					ИЛИ ВидыОплатОрганизаций.питВидОперации = &ВидыОперацийПоЗагрузкеРеализацияОптовая)
	|			ТОГДА ""АктОРеализации""";
	Если питФормироватьДокументыПроизводства22 Тогда
		ВыборВидаДокумента = ВыборВидаДокумента + "
		|		КОГДА ПараметрыКасс.ЗагрузкаДанныхПродажВПроизводственныеДокументы
		|				И (ВидыОплатОрганизаций.питВидОперации = &ВидыОперацийПоЗагрузкеРеализация
		|					ИЛИ ВидыОплатОрганизаций.питВидОперации = &ВидыОперацийПоЗагрузкеРеализацияОптовая)
		|			ТОГДА ""ВыпускСРозничнойРеализацией""
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ";
	Иначе
		ВыборВидаДокумента = ВыборВидаДокумента + "
		|		КОГДА ПараметрыКасс.ЗагрузкаДанныхПродажВПроизводственныеДокументы
		|				И (ВидыОплатОрганизаций.питВидОперации = &ВидыОперацийПоЗагрузкеРеализация
		|					ИЛИ ВидыОплатОрганизаций.питВидОперации = &ВидыОперацийПоЗагрузкеРеализацияОптовая)
		|				И "+ВыборСкладаПриготовления+" = "+ВыборСкладаРеализации+"
		|			ТОГДА ""ВыпускСРозничнойРеализацией""
		|		КОГДА ПараметрыКасс.ЗагрузкаДанныхПродажВПроизводственныеДокументы
		|				И (ВидыОплатОрганизаций.питВидОперации = &ВидыОперацийПоЗагрузкеРеализация
		|					ИЛИ ВидыОплатОрганизаций.питВидОперации = &ВидыОперацийПоЗагрузкеРеализацияОптовая)
		|				И "+ВыборСкладаПриготовления+" <> "+ВыборСкладаРеализации+"
		|			ТОГДА ""ВыпускСПеремещениемИАктОРеализации""
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ";
	КонецЕсли;
	
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПараметрыКасс.КассаККМ,
	|	ПараметрыКасс.СпособОпределенияСкладаПриготовления,
	|	ПараметрыКасс.СпособОпределенияСкладаРеализации,
	|	ПараметрыКасс.СкладПриготовления,
	|	ПараметрыКасс.СкладРеализации,
	|	ПараметрыКасс.ОформлятьДокументыИСМП,
	|	ПараметрыКасс.ОформлятьДокументыЕГАИС,
	|	ПараметрыКасс.ЗагрузкаДанныхПродажВПроизводственныеДокументы
	|ПОМЕСТИТЬ ПараметрыКасс
	|ИЗ
	|	&ПараметрыКасс КАК ПараметрыКасс
	|;
	|/////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УчетДанныхПродаж.ДокументРегистратор,
	|	ПРЕДСТАВЛЕНИЕ(УчетДанныхПродаж.ДокументРегистратор) КАК ДокументРегистраторПредставление
	|ИЗ
	|	РегистрСведений.питУчетДанныхПродаж КАК УчетДанныхПродаж
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПараметрыКасс КАК ПараметрыКасс
	|		ПО УчетДанныхПродаж.ДокументРегистратор.КассаККМ = ПараметрыКасс.КассаККМ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.питДанныеПродажФронта.Товары КАК ДанныеПродажФронтаТовары
	|		ПО УчетДанныхПродаж.ДокументРегистратор = ДанныеПродажФронтаТовары.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.питДанныеПродажФронта.УчетАлкоголя КАК ДанныеПродажФронтаУчетАлкоголя
	|		ПО УчетДанныхПродаж.ДокументРегистратор = ДанныеПродажФронтаУчетАлкоголя.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.питДанныеПродажФронта.Оплаты КАК ТаблицаОплат
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.питВидыОплатОрганизаций КАК ВидыОплатОрганизаций
	|			ПО ТаблицаОплат.ВидОплаты = ВидыОплатОрганизаций.Ссылка
	|		ПО УчетДанныхПродаж.ДокументРегистратор = ТаблицаОплат.Ссылка
	|ГДЕ
	|	"+ВыборВидаДокумента+" = НЕОПРЕДЕЛЕНО
	|	И (НЕ УчетДанныхПродаж.ОбновленПриемник)
	|	И (НЕ УчетДанныхПродаж.ДокументРегистратор.ПометкаУдаления)
	|	"+УсловиеОтбора+"
	|
	|");
	Запрос.УстановитьПараметр("ХозОперацияВозврат", Перечисления.питХозяйственныеОперации.ДанныеПродажФронтаВозврат);
	Запрос.УстановитьПараметр("ХозОперацияОтмена", Перечисления.питХозяйственныеОперации.ДанныеПродажФронтаОтмена);
	Запрос.УстановитьПараметр("ХозОперацияУчетАлкоголя", Перечисления.питХозяйственныеОперации.ДанныеПродажФронтаУчетАлкоголя);
	Запрос.УстановитьПараметр("ОсобенностьУчетаПиво", Перечисления.ОсобенностиУчетаНоменклатуры.Пиво);
	Запрос.УстановитьПараметр("ОсобенностьУчетаАлкоголь", Перечисления.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция);
	Запрос.УстановитьПараметр("ВидыОперацийПоЗагрузкеСписание", Перечисления.питВидыОперацийПоЗагрузкеДанныхПродаж.Списание);
	Запрос.УстановитьПараметр("ВидыОперацийПоЗагрузкеРеализация", Перечисления.питВидыОперацийПоЗагрузкеДанныхПродаж.Реализация);
	Запрос.УстановитьПараметр("ВидыОперацийПоЗагрузкеРеализацияОптовая", Перечисления.питВидыОперацийПоЗагрузкеДанныхПродаж.РеализацияОптовая);
	Запрос.УстановитьПараметр("ПараметрыКасс", ПараметрыКасс);
	Запрос.УстановитьПараметр("ДатаНач",НачалоДня(ДатаНачалаОтбора));
	Запрос.УстановитьПараметр("ДатаКон",КонецДня(ДатаКонцаОтбора));
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.УстановитьПараметр("СписокКасс", СписокКасс);
	
	СписокИсключающихДокументов.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ДокументРегистратор"));
	ЕстьОшибки = СписокИсключающихДокументов.Количество() > 0;
	Если ЕстьОшибки И ВыводитьСообщениеОбОшибках Тогда
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
				СообщениеОбОшибках = СообщениеОбОшибках + " - "+ Выборка.ДокументРегистраторПредставление + Символы.ПС;
		КонецЦикла;
		СообщениеОбОшибках = СообщениеОбОшибках + "Не был определен вид создаваемых целевых документов. Проверьте заполнение всех необходимых реквизитов." + Символы.ПС;
	КонецЕсли;
	
	// Проверим обязательные для заполнения реквизиты
	Для Каждого СтрокаКасс Из ПараметрыКасс Цикл
		Если Не СтрокаКасс.Использовать Тогда
			Продолжить;
		КонецЕсли;
		Если СтрокаКасс.СпособОпределенияСкладаПриготовления = 0 И НЕ ЗначениеЗаполнено(СтрокаКасс.СкладПриготовления) Тогда
			Если ВыводитьСообщениеОбОшибках Тогда
				СообщениеОбОшибках = СообщениеОбОшибках + "В строке "+СтрокаКасс.НомерСтроки+" для кассы "+СтрокаКасс.КассаККМ+" не заполнен склад приготовления по умолчанию." + Символы.ПС;
			КонецЕсли;
			Результат = Ложь;
			ЕстьОшибки = Истина;
		КонецЕсли;
		Если СтрокаКасс.СпособОпределенияСкладаРеализации = 0  И НЕ ЗначениеЗаполнено(СтрокаКасс.СкладРеализации) Тогда
			Если ВыводитьСообщениеОбОшибках Тогда
				СообщениеОбОшибках = СообщениеОбОшибках + "В строке "+СтрокаКасс.НомерСтроки+" для кассы "+СтрокаКасс.КассаККМ+" не заполнен склад реализации по умолчанию." + Символы.ПС;
			КонецЕсли;
			Результат = Ложь;
			ЕстьОшибки = Истина;
		КонецЕсли;
	КонецЦикла;
	Если (ЕстьОшибки ИЛИ НЕ Результат) И ВыводитьСообщениеОбОшибках Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибках);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Обновляет значение флага ОбновленПриемник
Процедура ИзменитьФлагОбновленПриемник(ДокументРегистратор,ДокументПриемник, УстановитьФлаг = Истина) Экспорт
	
	Если ТипЗнч(ДокументРегистратор) = Тип("ДокументСсылка.питДанныеПродажФронта") Тогда
		// Найдем запись регистра
		НаборЗаписей = РегистрыСведений.питУчетДанныхПродаж.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ДокументПриемник.Установить(ДокументПриемник);
		НаборЗаписей.Отбор.ДокументРегистратор.Установить(ДокументРегистратор);
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() = 0 Тогда
			НаборЗаписей.Отбор.Сбросить();
			//<< шевалдин 06102020
			ВременноПолучитьПривилегированныйРежим=НЕ ПривилегированныйРежим();
			Если ВременноПолучитьПривилегированныйРежим Тогда
				УстановитьПривилегированныйРежим(Истина);
			КонецЕсли;
			МЗ=РегистрыСведений.ПЛ_ЛогОбщепит.СоздатьМенеджерЗаписи();
			МЗ.Док=ДокументПриемник;
			МЗ.ДокОснование=ДокументРегистратор;
			МЗ.ДатаСобытия=ТекущаяДата();
			МЗ.ВидСобытия="Обновление";
			МЗ.Описание=" Пустой по приемнику - отбор по всему регистратору";
			МЗ.Коммент="ИзменитьФлагОбновленПриемник 1";
			МЗ.Записать();
			Если ВременноПолучитьПривилегированныйРежим Тогда
				УстановитьПривилегированныйРежим(Ложь);
			КонецЕсли;
			
			//>>
			НаборЗаписей.Отбор.ДокументРегистратор.Установить(ДокументРегистратор);
			НаборЗаписей.Прочитать();
			ЗаписьДобавлена = Ложь;
			Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
				Если ЗаписьНабора.ДокументПриемник = Неопределено Тогда
					ЗаписьНабора.ДокументПриемник = ДокументПриемник;
					Если МассивНеОбработанныхДокументов.Найти(ДокументРегистратор) = Неопределено ИЛИ НЕ УстановитьФлаг Тогда
						ЗаписьНабора.ОбновленПриемник = УстановитьФлаг; 
						
						//<< шевалдин 06102020
						ВременноПолучитьПривилегированныйРежим=НЕ ПривилегированныйРежим();
						Если ВременноПолучитьПривилегированныйРежим Тогда
							УстановитьПривилегированныйРежим(Истина);
						КонецЕсли;
						МЗ=РегистрыСведений.ПЛ_ЛогОбщепит.СоздатьМенеджерЗаписи();
						МЗ.Док=ДокументПриемник;
						МЗ.ДокОснование=ДокументРегистратор;
						МЗ.ДатаСобытия=ТекущаяДата();
						МЗ.ВидСобытия="Обновление";
						МЗ.Описание=" Установка флага "+УстановитьФлаг;
						МЗ.Коммент="ИзменитьФлагОбновленПриемник 2";
						МЗ.Записать();
						Если ВременноПолучитьПривилегированныйРежим Тогда
							УстановитьПривилегированныйРежим(Ложь);
						КонецЕсли;
						
						//>>

					КонецЕсли;
					Если УстановитьФлаг Тогда
						ЗаписьНабора.ДатаПоследнегоОбновления = ТекущаяДата();
					КонецЕсли;
					ЗаписьДобавлена = Истина;
				КонецЕсли;
			КонецЦикла;
			Если НЕ ЗаписьДобавлена Тогда
				НаборЗаписей.Отбор.Сбросить();
				НаборЗаписей.Прочитать();
				ЗаписьНабора = НаборЗаписей.Добавить();
				ЗаписьНабора.ДокументПриемник = ДокументПриемник;
				ЗаписьНабора.ДокументРегистратор = ДокументРегистратор;
				Если МассивНеОбработанныхДокументов.Найти(ДокументРегистратор) = Неопределено ИЛИ НЕ УстановитьФлаг Тогда
					ЗаписьНабора.ОбновленПриемник = УстановитьФлаг;
					//<< шевалдин 06102020
					ВременноПолучитьПривилегированныйРежим=НЕ ПривилегированныйРежим();
					Если ВременноПолучитьПривилегированныйРежим Тогда
						УстановитьПривилегированныйРежим(Истина);
					КонецЕсли;
					МЗ=РегистрыСведений.ПЛ_ЛогОбщепит.СоздатьМенеджерЗаписи();
					МЗ.Док=ДокументПриемник;
					МЗ.ДокОснование=ДокументРегистратор;
					МЗ.ДатаСобытия=ТекущаяДата();
					МЗ.ВидСобытия="Обновление";
					МЗ.Описание=" Установка флага "+УстановитьФлаг;
					МЗ.Коммент="ИзменитьФлагОбновленПриемник 2";
					МЗ.Записать();
					Если ВременноПолучитьПривилегированныйРежим Тогда
						УстановитьПривилегированныйРежим(Ложь);
					КонецЕсли;
					
					//>>
				КонецЕсли;
				Если УстановитьФлаг Тогда
					ЗаписьНабора.ДатаПоследнегоОбновления = ТекущаяДата();
				КонецЕсли;
				ЗаписьНабора.КассовыйУзел = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументРегистратор, "КассовыйУзел");
			КонецЕсли;
		Иначе
			// Установим флаг обновления
			Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
				Если МассивНеОбработанныхДокументов.Найти(ДокументРегистратор) = Неопределено ИЛИ НЕ УстановитьФлаг Тогда
					ЗаписьНабора.ОбновленПриемник = УстановитьФлаг; 
					//<< шевалдин 06102020
					ВременноПолучитьПривилегированныйРежим=НЕ ПривилегированныйРежим();
					Если ВременноПолучитьПривилегированныйРежим Тогда
						УстановитьПривилегированныйРежим(Истина);
					КонецЕсли;
					МЗ=РегистрыСведений.ПЛ_ЛогОбщепит.СоздатьМенеджерЗаписи();
					МЗ.Док=ЗаписьНабора.ДокументПриемник;
					МЗ.ДокОснование=ЗаписьНабора.ДокументРегистратор;
					МЗ.ДатаСобытия=ТекущаяДата();
					МЗ.ВидСобытия="Обновление";
					МЗ.Описание=" Установка флага "+УстановитьФлаг;
					МЗ.Коммент="ИзменитьФлагОбновленПриемник 4";
					МЗ.Записать();
					Если ВременноПолучитьПривилегированныйРежим Тогда
						УстановитьПривилегированныйРежим(Ложь);
					КонецЕсли;
					
					//>>

				КонецЕсли;
				Если УстановитьФлаг Тогда
					ЗаписьНабора.ДатаПоследнегоОбновления = ТекущаяДата();
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		// Запишем набор
		Попытка
			НаборЗаписей.Записать();
		Исключение
			ТекстСообщения = ОписаниеОшибки();
			ЗаписьЖурналаРегистрации("ЗагрузкаИзДанныхПродаж", УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

// Возвращает таблицу документов для  обработки. Документы, которые нельзя обработать, помечены флагом НеОбрабатывать.
// 
Функция ПолучитьДокументыДляОбработки() Экспорт
	Запрос = Новый Запрос;
	// получим список касс ККМ
	СписокКассККМ = Новый СписокЗначений;
	СтрокиПараметров = ПараметрыКасс.НайтиСтроки(Новый Структура ("Использовать",Истина));
	Для Каждого СтрокаПараметров Из СтрокиПараметров Цикл
		СписокКассККМ.Добавить(СтрокаПараметров.КассаККМ);
	КонецЦикла;
	Если ТипЗнч(СписокОтключенныхДокументов) <> Тип("СписокЗначений") Тогда
		СписокОтключенныхДокументов = Новый СписокЗначений;
	КонецЕсли;
	
	// определим даты отбора документов
	ДатаНачала = НачалоДня(ДатаНачалаОтбора);
	ДатаКонца = ?(НЕ ЗначениеЗаполнено(ДатаКонцаОтбора),КонецДня(ТекущаяДата()),КонецДня(ДатаКонцаОтбора));
	
	// Сформируем условие отбора по реквизитам
	УсловиеОтбораБаз = "";
	УсловиеОтбораБаз = УсловиеОтбораБаз + ?(НЕ ЗначениеЗаполнено(Организация),""," И ДанныеПродажФронта.Организация = &Организация ");
	УсловиеОтбораБаз = УсловиеОтбораБаз + " И ДанныеПродажФронта.КассаККМ В (&СписокКассККМ) ";
	
	// Дополнительные условия отбора по датам
	УсловиеОтбора = УсловиеОтбораБаз;
	УсловиеОтбора = УсловиеОтбора + " И ДанныеПродажФронта.Дата >= &ДатаНач ";
	УсловиеОтбора = УсловиеОтбора + " И ДанныеПродажФронта.Дата <= "+?(ПереходящаяСмена,"&ДатаКонПереход ","&ДатаКон ");
	
	УсловиеОтбораПереход = УсловиеОтбораБаз;
	УсловиеОтбораПереход = УсловиеОтбораПереход + " И ДанныеПродажФронта.Дата >= &ДатаНачПереход ";
	УсловиеОтбораПереход = УсловиеОтбораПереход + " И ДанныеПродажФронта.Дата <= &ДатаКонПереход ";
	
	// Сформируем список документов для обработки
	ТаблицаНомеровСмен = "";
	ТаблицаНомеровСменСоединение = "";
	УсловиеВыбораПереходящихДокументов = "";
	Если ПереходящаяСмена Тогда
		ТаблицаНомеровСмен = "ВЫБРАТЬ
		|"+ ?(НЕ ЗначениеЗаполнено(ДатаНачалаОтбора) ИЛИ ДнейНазадДляАнализаПерехода = 0,"0","
		|	ВЫБОР
		|		КОГДА ДанныеПродажФронта.Дата >= &ДатаНачПереход
		|				И ДанныеПродажФронта.Дата < &ДатаНач
		|			ТОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеПродажФронта.Ссылка)
		|		ИНАЧЕ 0
		|	КОНЕЦ")+" КАК КоличествоДокументовСменыНазад,
		|	ВЫБОР
		|		КОГДА ДанныеПродажФронта.Дата >= &ДатаНаЧ
		|				И ДанныеПродажФронта.Дата <= &ДатаКон
		|			ТОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеПродажФронта.Ссылка)
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК КоличествоДокументовСменыБазовое,
		|"+ ?(НЕ ЗначениеЗаполнено(ДатаКонцаОтбора) ИЛИ ДнейВпередДляАнализаПерехода = 0,"0","
		|	ВЫБОР
		|		КОГДА ДанныеПродажФронта.Дата > &ДатаКон
		|				И ДанныеПродажФронта.Дата <= &ДатаКонПереход
		|			ТОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеПродажФронта.Ссылка)
		|		ИНАЧЕ 0
		|	КОНЕЦ")+" КАК КоличествоДокументовСменыВперед,
		|	ДанныеПродажФронта.КассаККМ КАК КассаККМ,
		//+группировка по дате смены
		|	ДанныеПродажФронта.ДатаСмены КАК ДатаСмены,
		|	ДанныеПродажФронта.НомерСмены КАК НомерСмены
		|ПОМЕСТИТЬ ТаблицаНомеровСменВрем
		|ИЗ
		|	РегистрСведений.питУчетДанныхПродаж КАК УчетДанныхПродаж
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.питДанныеПродажФронта КАК ДанныеПродажФронта
		|			ЛЕВОЕ СОЕДИНЕНИЕ ПараметрыКасс КАК ПараметрыКасс
		|			ПО ДанныеПродажФронта.КассаККМ = ПараметрыКасс.КассаККМ
		|		ПО УчетДанныхПродаж.ДокументРегистратор = ДанныеПродажФронта.Ссылка
		|ГДЕ
		|	(НЕ УчетДанныхПродаж.ОбновленПриемник)
		|	И ВЫБОР
		|			КОГДА УчетДанныхПродаж.ДокументРегистратор В (&СписокИсключающихДокументов)
		|					ИЛИ ПараметрыКасс.ЗапретитьПовторнуюЗагрузкуДанныхПродаж
		|						И УчетДанныхПродаж.ДокументПриемник <> НЕОПРЕДЕЛЕНО
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|	И (НЕ ДанныеПродажФронта.ПометкаУдаления) "+УсловиеОтбораПереход+"
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеПродажФронта.КассаККМ,
		//+группировка по дате смены
		|	ДанныеПродажФронта.ДатаСмены,
		|	ДанныеПродажФронта.НомерСмены,
		|	ДанныеПродажФронта.Дата
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(ТаблицаНомеровСмен.КоличествоДокументовСменыНазад) КАК КоличествоДокументовСменыНазад,
		|	СУММА(ТаблицаНомеровСмен.КоличествоДокументовСменыБазовое) КАК КоличествоДокументовСменыБазовое,
		|	СУММА(ТаблицаНомеровСмен.КоличествоДокументовСменыВперед) КАК КоличествоДокументовСменыВперед,
		|	ТаблицаНомеровСмен.КассаККМ,
		//+группировка по дате смены
		|	ТаблицаНомеровСмен.ДатаСмены,
		|	ТаблицаНомеровСмен.НомерСмены
		|ПОМЕСТИТЬ ТаблицаНомеровСмен
		|ИЗ
		|	ТаблицаНомеровСменВрем КАК ТаблицаНомеровСмен
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаНомеровСмен.КассаККМ,
		//+группировка по дате смены
		|	ТаблицаНомеровСмен.ДатаСмены,
		|	ТаблицаНомеровСмен.НомерСмены
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|";
		ТаблицаНомеровСменСоединение = "
		|	ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаНомеровСмен КАК ТаблицаНомеровСмен
		|	ПО ДанныеПродажФронта.КассаККМ = ТаблицаНомеровСмен.КассаККМ
		//+группировка по дате смены
		|	И ДанныеПродажФронта.ДатаСмены = ТаблицаНомеровСмен.ДатаСмены
		|	И ДанныеПродажФронта.НомерСмены = ТаблицаНомеровСмен.НомерСмены
		|";
		УсловиеВыбораПереходящихДокументов = "
		|	И ВЫБОР
		|		КОГДА ДанныеПродажФронта.Дата >= &ДатаНач И ДанныеПродажФронта.Дата <= &ДатаКон
		|			ТОГДА ВЫБОР
		|				КОГДА ЕСТЬNULL(ТаблицаНомеровСмен.КоличествоДокументовСменыНазад,0) = 0
		|					ТОГДА ИСТИНА
		|				ИНАЧЕ ЛОЖЬ
		|			КОНЕЦ
		|		КОГДА ДанныеПродажФронта.Дата > &ДатаКон И ДанныеПродажФронта.Дата <= &ДатаКонПереход
		|			ТОГДА ВЫБОР
		|				КОГДА ЕСТЬNULL(ТаблицаНомеровСмен.КоличествоДокументовСменыБазовое,0) > 0 И ЕСТЬNULL(ТаблицаНомеровСмен.КоличествоДокументовСменыНазад,0) = 0
		|					ТОГДА ИСТИНА
		|				ИНАЧЕ ЛОЖЬ
		|			КОНЕЦ
		|	КОНЕЦ
		|";
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПараметрыКасс.КассаККМ,
	|	ПараметрыКасс.ЗапретитьПовторнуюЗагрузкуДанныхПродаж
	|ПОМЕСТИТЬ ПараметрыКасс
	|ИЗ
	|	&ПараметрыКасс КАК ПараметрыКасс
	|;
	|/////////////////////////////////////////////////////
	|"+?(ПереходящаяСмена,ТаблицаНомеровСмен,"")+"
	|ВЫБРАТЬ
	|	УчетДанныхПродаж.ДокументРегистратор КАК Документ,
	|	ДанныеПродажФронта.Дата КАК Дата,
	|	ПРЕДСТАВЛЕНИЕ(УчетДанныхПродаж.ДокументРегистратор) КАК ДокументПредставление,
	|	ПараметрыКасс.КассаККМ КАК КассаККМ,
	|	ВЫБОР
	|		КОГДА УчетДанныхПродаж.КассовыйУзел = &ПустойКассовыйУзел
	|		ТОГДА ПараметрыКасс.КассаККМ.питКассовыйУзел
	|		ИНАЧЕ УчетДанныхПродаж.КассовыйУзел
	|	КОНЕЦ КАК КассовыйУзел,
	|	ВЫБОР
	|		КОГДА УчетДанныхПродаж.ДокументРегистратор В (&СписокИсключающихДокументов) ИЛИ (ПараметрыКасс.ЗапретитьПовторнуюЗагрузкуДанныхПродаж И УчетДанныхПродаж.ДокументПриемник <> Неопределено)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НеОбрабатывать,
	|	ВЫБОР
	|		КОГДА (УчетДанныхПродаж.ДокументРегистратор В (&СписокИсключающихДокументов) ИЛИ (ПараметрыКасс.ЗапретитьПовторнуюЗагрузкуДанныхПродаж И УчетДанныхПродаж.ДокументПриемник <> Неопределено))
	|				ИЛИ  УчетДанныхПродаж.ДокументРегистратор В (&СписокОтключенныхДокументов)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Использовать,
	|	ВЫБОР
	|		КОГДА УчетДанныхПродаж.ДокументРегистратор В (&СписокОтключенныхДокументов)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоОтключенныйДокумент
	|ИЗ
	|	РегистрСведений.питУчетДанныхПродаж КАК УчетДанныхПродаж
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.питДанныеПродажФронта КАК ДанныеПродажФронта
	|			ЛЕВОЕ СОЕДИНЕНИЕ ПараметрыКасс КАК ПараметрыКасс
	|			ПО ДанныеПродажФронта.КассаККМ = ПараметрыКасс.КассаККМ
	|		"+?(ПереходящаяСмена,ТаблицаНомеровСменСоединение,"")+"
	|		ПО УчетДанныхПродаж.ДокументРегистратор = ДанныеПродажФронта.Ссылка
	|ГДЕ
	|	(НЕ УчетДанныхПродаж.ОбновленПриемник)
	|	И (НЕ ДанныеПродажФронта.ПометкаУдаления) "+?(ПереходящаяСмена,УсловиеОтбораПереход,УсловиеОтбора)+"
	|	"+?(ПереходящаяСмена,УсловиеВыбораПереходящихДокументов,"")+"
	|СГРУППИРОВАТЬ ПО
	|	УчетДанныхПродаж.ДокументРегистратор,
	|	ДанныеПродажФронта.Дата,
	|	УчетДанныхПродаж.ДокументПриемник,
	|	ПараметрыКасс.КассаККМ,
	|	ПараметрыКасс.ЗапретитьПовторнуюЗагрузкуДанныхПродаж,
	|	ВЫБОР
	|		КОГДА УчетДанныхПродаж.КассовыйУзел = &ПустойКассовыйУзел
	|			ТОГДА ПараметрыКасс.КассаККМ.питКассовыйУзел
	|		ИНАЧЕ УчетДанныхПродаж.КассовыйУзел
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеПродажФронта.Дата";
	
	Запрос.УстановитьПараметр("СписокИсключающихДокументов",СписокИсключающихДокументов);
	Запрос.УстановитьПараметр("СписокОтключенныхДокументов",СписокОтключенныхДокументов);
	Запрос.УстановитьПараметр("ДатаНач",ДатаНачала);
	Запрос.УстановитьПараметр("ДатаКон",ДатаКонца);
	Запрос.УстановитьПараметр("ДатаНачПереход",?(НЕ ЗначениеЗаполнено(ДатаНачалаОтбора),ДатаНачала,НачалоДня(НачалоДня(ДатаНачалаОтбора)-ДнейНазадДляАнализаПерехода*86400)));
	Запрос.УстановитьПараметр("ДатаКонПереход",?(НЕ ЗначениеЗаполнено(ДатаКонцаОтбора),ДатаКонца,КонецДня(КонецДня(ДатаКонцаОтбора)+ДнейВпередДляАнализаПерехода*86400)));
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.УстановитьПараметр("СписокКассККМ",СписокКассККМ);
	Запрос.УстановитьПараметр("ПараметрыКасс",ПараметрыКасс);
	Запрос.УстановитьПараметр("ПустойКассовыйУзел", ПланыОбмена.питУдаленныеКассы.ПустаяСсылка());
	
	ТаблицаДокументов = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаДокументов;
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Рекурсивный обход выборки
Процедура ОбходРезультатаЗапросаПоТоварам(Результат)
	Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.Группировка()  = "ВедущийТипОплаты" Тогда
			
			// Заполним структуру текущих значений ключевых реквизитов
			СтруктураТекущихСостояний.Организация = Выборка.Организация;
			СтруктураТекущихСостояний.Подразделение = Выборка.Подразделение;
			Попытка
				СтруктураТекущихСостояний.СкладПриготовления = Выборка.СкладПриготовления;
			Исключение
				ТекстСообщения = ОписаниеОшибки();
				ЗаписьЖурналаРегистрации("ЗагрузкаИзДанныхПродаж", УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
			КонецПопытки;
			Попытка
				СтруктураТекущихСостояний.СкладРеализации = Выборка.СкладРеализации;
			Исключение
				ТекстСообщения = ОписаниеОшибки();
				ЗаписьЖурналаРегистрации("ЗагрузкаИзДанныхПродаж", УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
			КонецПопытки;
			СтруктураТекущихСостояний.СтатьяСписанияТМЦ = Выборка.СтатьяСписанияТМЦ;
			СтруктураТекущихСостояний.АналитикаСписанияТМЦ = Выборка.АналитикаСписанияТМЦ;
			СтруктураТекущихСостояний.ВедущийТипОплаты = Выборка.ВедущийТипОплаты;
			СтруктураТекущихСостояний.ВидДокумента = Выборка.ВидДокумента;
			//<<Портал-Юг, Давиденко 2019.03.27 [4.2.9 Особенности заполнения выпуска блюд по чекам]
			СтруктураТекущихСостояний.ПЛ_НоменклатураОткрытаяЦена = Выборка.ПЛ_НоменклатураОткрытаяЦена;
			//>>Портал-Юг, Давиденко 2019.03.27
			СтруктураТекущихСостояний.КонтрагентДляЗачетаАванса = Выборка.КонтрагентДляЗачетаАванса;
			СтруктураТекущихСостояний.ДоговорКонтрагентаДляЗачетаАванса = Выборка.ДоговорКонтрагентаДляЗачетаАванса;
			СтруктураТекущихСостояний.КлиентДляЗачетаАванса = Выборка.КлиентДляЗачетаАванса;
			СтруктураТекущихСостояний.СоглашениеДляЗачетаАванса = Выборка.СоглашениеДляЗачетаАванса;
			СтруктураТекущихСостояний.АналитикаКодАкциза = Выборка.АналитикаКодАкциза;
			
			Если ГруппироватьПоНомеруСмены Тогда
				СтруктураТекущихСостояний.КассаККМ = Выборка.КассаККМ;
				СтруктураТекущихСостояний.НомерСмены = Выборка.НомерСмены;
				//+группировка по дате смены
				СтруктураТекущихСостояний.ДатаСмены = Выборка.ДатаСмены;
			КонецЕсли;
			СтруктураТекущихСостояний.СуммаВключаетНДС = ВЫборка.СуммаВключаетНДС;
			
			ДопПараметры = ЗаполнитьДополнительныеПараметры();
			// Получим структуру данных для вида документа
			ДанныеОбъекта = ПолучитьСтруктуруДанныхОбъекта();
			ЗаполнитьДанныеОбъекта(Выборка);
			СоздатьДокумент();
			
		Иначе
			ОбходРезультатаЗапросаПоТоварам(Выборка);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Очищает ненужные записи регистра данных продаж
Процедура ОбновитьРегистрУчетаДанныхПродаж()
	// Очистим все записи, где 
	// - документ регистратор или приемник помечены на удаление
	// - документ приемник потерял связь с регистратором
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	УчетДанныхПродаж.ДокументПриемник,
	|	УчетДанныхПродаж.ДокументРегистратор
	|ИЗ
	|	РегистрСведений.питУчетДанныхПродаж КАК УчетДанныхПродаж
	|ГДЕ
	|	(УчетДанныхПродаж.ДокументПриемник.ПометкаУдаления
	|			ИЛИ УчетДанныхПродаж.ДокументРегистратор.ПометкаУдаления)
	|	И НЕ УчетДанныхПродаж.ОбновленПриемник
	//<< Швецов. 23.05.2023. Ограничить выборку из регистра
	|	И УчетДанныхПродаж.Дата > &Дата
	//>> Швецов. 23.05.2023. Ограничить выборку из регистра
	|
	|СГРУППИРОВАТЬ ПО
	|	УчетДанныхПродаж.ДокументПриемник,
	|	УчетДанныхПродаж.ДокументРегистратор");
	
	//<< Швецов. 23.05.2023. Ограничить выборку из регистра
	Пользователь = ПараметрыСеанса.ТекущийПользователь;
	
	ЗапросДатыЗапрета = Новый Запрос;
	ЗапросДатыЗапрета.Текст = "ВЫБРАТЬ
	                          |	МАКСИМУМ(Даты.ДатаЗапрета) КАК ДатаЗапрета
	                          |ИЗ
	                          |	(ВЫБРАТЬ
	                          |		ДатыЗапретаИзменения.ДатаЗапрета КАК ДатаЗапрета
	                          |	ИЗ
	                          |		РегистрСведений.ДатыЗапретаИзменения КАК ДатыЗапретаИзменения
	                          |	ГДЕ
	                          |		ДатыЗапретаИзменения.Пользователь = &Пользователь
	                          |	
	                          |	ОБЪЕДИНИТЬ ВСЕ
	                          |	
	                          |	ВЫБРАТЬ
	                          |		ДатыЗапретаИзменения.ДатаЗапрета
	                          |	ИЗ
	                          |		РегистрСведений.ДатыЗапретаИзменения КАК ДатыЗапретаИзменения
	                          |	ГДЕ
	                          |		ДатыЗапретаИзменения.Пользователь = ЗНАЧЕНИЕ(Перечисление.ВидыНазначенияДатЗапрета.ДляВсехПользователей)) КАК Даты";

	ЗапросДатыЗапрета.УстановитьПараметр("Пользователь", Пользователь);
	
	Рез = ЗапросДатыЗапрета.Выполнить().Выбрать();
	
	Пока Рез.Следующий() Цикл
		ДатаЗапрета = Рез.ДатаЗапрета;
	КонецЦикла;
	
	Запрос.УстановитьПараметр("Дата", ДатаЗапрета);
	//>> Швецов. 23.05.2023. Ограничить выборку из регистра
	
	Выборка = Запрос.Выполнить().Выбрать();
	НаборЗаписей = РегистрыСведений.питУчетДанныхПродаж.СоздатьНаборЗаписей();
	Пока Выборка.Следующий() Цикл
		// Удалим записи регистра
		НаборЗаписей.Отбор.ДокументПриемник.Установить(Выборка.ДокументПриемник);
		НаборЗаписей.Отбор.ДокументРегистратор.Установить(Выборка.ДокументРегистратор);
		НаборЗаписей.Прочитать();
		Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
			НаборЗаписей.Удалить(ЗаписьНабора);
		КонецЦикла;
		Попытка
			НаборЗаписей.Записать();
		Исключение
			ТекстСообщения = ОписаниеОшибки();
			ЗаписьЖурналаРегистрации("ЗагрузкаИзДанныхПродаж", УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
	// Найдем список целевых документов по текущим регистраторам
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаСоответствия.ЦелевойДокументСсылка КАК ДокументПриемник,
	|	ТаблицаСоответствия.ДокументРегистратор КАК ДокументРегистратор
	|ПОМЕСТИТЬ ТаблицаСоответствия
	|ИЗ
	|	&ТаблицаСоответствия КАК ТаблицаСоответствия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УчетДанныхПродаж.ДокументПриемник КАК ДокументПриемник,
	|	УчетДанныхПродаж.ДокументРегистратор КАК ДокументРегистратор
	|ИЗ
	|	РегистрСведений.питУчетДанныхПродаж КАК УчетДанныхПродаж
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаСоответствия КАК ТаблицаСоответствия
	|		ПО (ТаблицаСоответствия.ДокументПриемник <> УчетДанныхПродаж.ДокументПриемник)
	|			И (ТаблицаСоответствия.ДокументРегистратор = УчетДанныхПродаж.ДокументРегистратор)
	|ГДЕ
	|	НЕ УчетДанныхПродаж.ОбновленПриемник
	|	И ТаблицаСоответствия.ДокументПриемник В(&МассивСохраненныхДокументов)");
	Запрос.УстановитьПараметр("ТаблицаСоответствия",ТаблицаСоответствияРегистратораИДокумента);
	Запрос.УстановитьПараметр("МассивСохраненныхДокументов",МассивСохраненныхДокументов);
	НаборЗаписей = РегистрыСведений.питУчетДанныхПродаж.СоздатьНаборЗаписей();
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		// Удалим записи регистра
		НаборЗаписей.Отбор.ДокументПриемник.Установить(Выборка.ДокументПриемник);
		НаборЗаписей.Отбор.ДокументРегистратор.Установить(Выборка.ДокументРегистратор);
		НаборЗаписей.Прочитать();
		Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
			НаборЗаписей.Удалить(ЗаписьНабора);
		КонецЦикла;
		Попытка
			НаборЗаписей.Записать();
		Исключение
			ТекстСообщения = ОписаниеОшибки();
			ЗаписьЖурналаРегистрации("ЗагрузкаИзДанныхПродаж", УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
	// Найдем список регистраторов, которые сидят еще на созданных целевых
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаСоответствия.ЦелевойДокументСсылка КАК ДокументПриемник,
	|	ТаблицаСоответствия.ДокументРегистратор КАК ДокументРегистратор
	|ПОМЕСТИТЬ ТаблицаСоответствия
	|ИЗ
	|	&ТаблицаСоответствия КАК ТаблицаСоответствия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	питУчетДанныхПродаж.ДокументПриемник КАК ДокументПриемник,
	|	питУчетДанныхПродаж.ДокументРегистратор КАК ДокументРегистратор
	|ПОМЕСТИТЬ втДанныеРегистра
	|ИЗ
	|	РегистрСведений.питУчетДанныхПродаж КАК питУчетДанныхПродаж
	|ГДЕ
	|	питУчетДанныхПродаж.ДокументПриемник В(&МассивСохраненныхДокументов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанныеРегистра.ДокументПриемник КАК ДокументПриемник,
	|	втДанныеРегистра.ДокументРегистратор КАК ДокументРегистратор,
	|	ТаблицаСоответствия.ДокументПриемник КАК ДокументПриемникТаблица,
	|	ТаблицаСоответствия.ДокументРегистратор КАК ДокументРегистраторТаблица
	|ПОМЕСТИТЬ втДанныеСоединение
	|ИЗ
	|	втДанныеРегистра КАК втДанныеРегистра
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСоответствия КАК ТаблицаСоответствия
	|		ПО (ТаблицаСоответствия.ДокументПриемник = втДанныеРегистра.ДокументПриемник)
	|			И (ТаблицаСоответствия.ДокументРегистратор = втДанныеРегистра.ДокументРегистратор)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанныеСоединение.ДокументПриемник КАК ДокументПриемник,
	|	втДанныеСоединение.ДокументРегистратор КАК ДокументРегистратор,
	|	питДанныеПродажФронта.Дата КАК Дата,
	|	питДанныеПродажФронта.КассовыйУзел КАК КассовыйУзел
	|ИЗ
	|	втДанныеСоединение КАК втДанныеСоединение
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.питДанныеПродажФронта КАК питДанныеПродажФронта
	|		ПО втДанныеСоединение.ДокументРегистратор = питДанныеПродажФронта.Ссылка
	|ГДЕ
	|	втДанныеСоединение.ДокументРегистраторТаблица ЕСТЬ NULL
	|ИТОГИ ПО
	|	ДокументРегистратор");
	
	Запрос.УстановитьПараметр("ТаблицаСоответствия",ТаблицаСоответствияРегистратораИДокумента);
	Запрос.УстановитьПараметр("МассивСохраненныхДокументов",МассивСохраненныхДокументов);
	НаборЗаписей = РегистрыСведений.питУчетДанныхПродаж.СоздатьНаборЗаписей();
	РезультатРегистратор = Запрос.Выполнить();
	ВыборкаРегистратор = РезультатРегистратор.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	Пока ВыборкаРегистратор.Следующий() Цикл
		
		Выборка = ВыборкаРегистратор.Выбрать();
		Пока Выборка.Следующий() Цикл
			// Удалим записи регистра
			НаборЗаписей.Отбор.ДокументПриемник.Установить(Выборка.ДокументПриемник);
			НаборЗаписей.Отбор.ДокументРегистратор.Установить(Выборка.ДокументРегистратор);
			НаборЗаписей.Прочитать();
			Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
				НаборЗаписей.Удалить(ЗаписьНабора);
			КонецЦикла;
			Попытка
				НаборЗаписей.Записать();
			Исключение
				ТекстСообщения = ОписаниеОшибки();
				ЗаписьЖурналаРегистрации("ЗагрузкаИзДанныхПродаж", УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
			КонецПопытки;
		КонецЦикла;
		НаборЗаписей.Отбор.Сбросить();
		НаборЗаписей.Отбор.ДокументРегистратор.Установить(ВыборкаРегистратор.ДокументРегистратор);
		НаборЗаписей.Прочитать();
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.ДокументРегистратор = ВыборкаРегистратор.ДокументРегистратор;
		НоваяЗапись.Дата = ВыборкаРегистратор.Дата;
		НоваяЗапись.КассовыйУзел = ВыборкаРегистратор.КассовыйУзел;
		НоваяЗапись.ДатаПоследнегоОбновления = ТекущаяДата();
		НоваяЗапись.ОбновленПриемник = Ложь;
		Попытка
			НаборЗаписей.Записать();
		Исключение
			ТекстСообщения = ОписаниеОшибки();
			ЗаписьЖурналаРегистрации("ЗагрузкаИзДанныхПродаж", УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьНеобработанныеДокументы(СтрокаПричинОтмены)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТаблицаПродаж.ВидДокумента,
	|	ТаблицаПродаж.СкладРеализации,
	|	ТаблицаПродаж.СкладПриготовления,
	|	ТаблицаПродаж.ДокументРегистратор,
	|	ТаблицаПродаж.НомерСтроки
	|ПОМЕСТИТЬ ТаблицаПродаж
	|ИЗ
	|	&ТаблицаПродаж КАК ТаблицаПродаж
	|ГДЕ  (НЕ ТаблицаПродаж.ДанныеЗаполнены)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПродаж.ВидДокумента,
	|	ТаблицаПродаж.СкладРеализации,
	|	ТаблицаПродаж.СкладПриготовления,
	|	ТаблицаПродаж.ДокументРегистратор КАК ДокументРегистратор,
	|	ТаблицаПродаж.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ТаблицаПродаж КАК ТаблицаПродаж
	|ИТОГИ ПО
	|	ДокументРегистратор";
	Запрос.УстановитьПараметр("ТаблицаПродаж",ТаблицаПродаж);
	Запрос.УстановитьПараметр("СкладКомпанииПустаяСсылка",Справочники.Склады.ПустаяСсылка());
	ВыборкаРегистратор = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	Пока ВыборкаРегистратор.Следующий() Цикл
		Если МассивНеОбработанныхДокументов.Найти(ВыборкаРегистратор.ДокументРегистратор) = Неопределено Тогда
			МассивНеОбработанныхДокументов.Добавить(ВыборкаРегистратор.ДокументРегистратор);
			СтрокаПричинОтмены = СтрокаПричинОтмены + "Документ "+ВыборкаРегистратор.ДокументРегистратор+" не может быть перегружен из-за недостатка данных:" + Символы.ПС;
		Иначе
			Продолжить;
		КонецЕсли;
		ВыборкаСтрока = ВыборкаРегистратор.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		Пока ВыборкаСтрока.Следующий() Цикл
			Если НЕ ЗначениеЗаполнено(ВыборкаСтрока.СкладРеализации) И (ВыборкаСтрока.ВидДокумента = "АктОРеализации" ИЛИ ВыборкаСтрока.ВидДокумента = "СписаниеТоваров" ИЛИ ВыборкаСтрока.ВидДокумента = "ВозвратОтПокупателя") Тогда
				СтрокаПричинОтмены = СтрокаПричинОтмены + " - Для строки № "+ВыборкаСтрока.НомерСтроки+" не может быть определен склад реализации" + Символы.ПС;
			ИначеЕсли НЕ ЗначениеЗаполнено(ВыборкаСтрока.СкладПриготовления) И (ВыборкаСтрока.ВидДокумента = "ВыпускСРозничнойРеализацией" ИЛИ ВыборкаСтрока.ВидДокумента = "ВыпускСоСписанием") Тогда
				СтрокаПричинОтмены = СтрокаПричинОтмены + " - Для строки № "+ВыборкаСтрока.НомерСтроки+" не может быть определен склад приготовления" + Символы.ПС;
			ИначеЕсли (НЕ ЗначениеЗаполнено(ВыборкаСтрока.СкладПриготовления) ИЛИ НЕ ЗначениеЗаполнено(ВыборкаСтрока.СкладРеализации)) И ВыборкаСтрока.ВидДокумента = "ВыпускСПеремещением" Тогда
				СтрокаПричинОтмены = СтрокаПричинОтмены + " - Для строки № "+ВыборкаСтрока.НомерСтроки+" не может быть определен "+?(НЕ ЗначениеЗаполнено(ВыборкаСтрока.СкладРеализации),"склад реализации","") +?(НЕ ЗначениеЗаполнено(ВыборкаСтрока.СкладПриготовления) И НЕ ЗначениеЗаполнено(ВыборкаСтрока.СкладРеализации)," и ","") +?(НЕ ЗначениеЗаполнено(ВыборкаСтрока.СкладПриготовления),"склад приготовления","") + Символы.ПС;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ВыборкаСтрока.ВидДокумента) Тогда
				СтрокаПричинОтмены = СтрокаПричинОтмены + " - Для строки № "+ВыборкаСтрока.НомерСтроки+" не может быть определен вид целевого документа" + Символы.ПС;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает существующий в базе целевой документ
Функция ПолучитьСуществующийДокументПриемник(ДопОтбор = Неопределено, ДопПараметрыОтбора = Неопределено, ДопСоединение = Неопределено)
	Если ДопПараметрыОтбора = Неопределено Тогда
		ДопПараметрыОтбора = Новый Структура;
	КонецЕсли;
	
	Если ДопСоединение = Неопределено Тогда
		ДопСоединение = "";
	КонецЕсли;
	
	ИмяДокументаВнутреннееПотребление = питОбратнаяСовместимостьПовтИсп.ИмяДокументаВнутреннееПотребление();
	
	ДокументВозврата = Неопределено;
	ТекущийВидДокумента = Неопределено;
	ВидДокументаЕГАИС = Неопределено;
	Если СтруктураТекущихСостояний.ВидДокумента = "СписаниеТоваров" Тогда
		ТекущийВидДокумента = Тип(СтрШаблон("ДокументСсылка.%1", ИмяДокументаВнутреннееПотребление));
		ТекущаяХозОперация = Перечисления.ХозяйственныеОперации.СписаниеТоваровПоТребованию;
	ИначеЕсли СтруктураТекущихСостояний.ВидДокумента = "АктОРеализации" Тогда
		ТекущийВидДокумента = Тип("ДокументСсылка.ОтчетОРозничныхПродажах");
		ТекущаяХозОперация = Неопределено;
	ИначеЕсли СтруктураТекущихСостояний.ВидДокумента = "ВыпускСРозничнойРеализацией" Тогда
		ТекущийВидДокумента = Тип("ДокументСсылка.питВыпускБлюд");
		ТекущаяХозОперация = Перечисления.питХозяйственныеОперации.ВыпускПродукцииСРозничнойРеализацией;
	ИначеЕсли СтруктураТекущихСостояний.ВидДокумента = "ВыпускСоСписанием" Тогда
		ТекущийВидДокумента = Тип("ДокументСсылка.питВыпускБлюд");
		ТекущаяХозОперация = Перечисления.питХозяйственныеОперации.ВыпускПродукцииСоСписанием;
	ИначеЕсли СтруктураТекущихСостояний.ВидДокумента = "ВыпускСПеремещением" Тогда
		ТекущийВидДокумента = Тип("ДокументСсылка.питВыпускБлюд");
		ТекущаяХозОперация = Перечисления.питХозяйственныеОперации.ВыпускПродукцииСПеремещением;
	ИначеЕсли СтруктураТекущихСостояний.ВидДокумента = "ВыпускСПеремещением" Тогда
		ТекущийВидДокумента = Тип("ДокументСсылка.питВыпускБлюд");
		ТекущаяХозОперация = Перечисления.питХозяйственныеОперации.ВыпускПродукцииСРеализацией;
	ИначеЕсли СтруктураТекущихСостояний.ВидДокумента = "ВозвратОтПокупателя" Тогда
		ТекущийВидДокумента = Тип("ДокументСсылка.ВозвратТоваровОтКлиента");
		ТекущаяХозОперация = Перечисления.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя;
	ИначеЕсли СтруктураТекущихСостояний.ВидДокумента = "УчетАлкоголяПиво" Тогда
		ТекущийВидДокумента = Тип("ДокументСсылка.ПодключениеКегаКОборудованиюРозливаИСМП");
		ТекущаяХозОперация = Неопределено;
	ИначеЕсли СтруктураТекущихСостояний.ВидДокумента = "УчетАлкоголяКрепкийАлкогольРег1" Тогда
		ТекущийВидДокумента = Тип("ДокументСсылка.АктСписанияЕГАИС");
		ТекущаяХозОперация = Неопределено;
		ВидДокументаЕГАИС = Перечисления.ВидыДокументовЕГАИС.АктСписанияИзРегистра1;
	ИначеЕсли СтруктураТекущихСостояний.ВидДокумента = "УчетАлкоголяКрепкийАлкогольРег2" Тогда
		ТекущийВидДокумента = Тип("ДокументСсылка.АктСписанияЕГАИС");
		ТекущаяХозОперация = Неопределено;
		ВидДокументаЕГАИС = Перечисления.ВидыДокументовЕГАИС.АктСписанияИзРегистра2;
	КонецЕсли;
	// Найдем список целевых документов по текущим регистраторам
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	УчетДанныхПродаж.ДокументПриемник КАК ДокументПриемник
	|ИЗ
	|	РегистрСведений.питУчетДанныхПродаж КАК УчетДанныхПродаж
	|	&ДопСоединение
	|ГДЕ
	|	УчетДанныхПродаж.ДокументРегистратор В(&СписокРегистраторов)
	|	И НЕ УчетДанныхПродаж.ДокументПриемник.ПометкаУдаления
	|	И НЕ УчетДанныхПродаж.ОбновленПриемник
	|	И &ДопОтбор
	|
	|СГРУППИРОВАТЬ ПО
	|	УчетДанныхПродаж.ДокументПриемник");
	
	Если ДопОтбор = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДопОтбор", "ИСТИНА");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДопОтбор", ДопОтбор);
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДопСоединение", ДопСоединение);
	
	//<< Портал-Юг, Баринов, 2019.09.20 [б/н не обновлять обработанные выпуски по открытой цене]
	Если СтруктураТекущихСостояний.ВидДокумента = "ВыпускСРозничнойРеализацией" Тогда
		СхемаЗапроса = Новый СхемаЗапроса;
		СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
	    Оператор = СхемыЗапросов.ЗапросПакетаЗапросов(СхемаЗапроса).Операторы[0];
		Оператор.Источники.Добавить("Документ.питВыпускБлюд", "ВыпускБлюд");
		// Связь правильно генерируется автоматически
		//	ЛЕВОЕ СОЕДИНЕНИЕ Документ.питВыпускБлюд КАК питВыпускБлюд
		//	ПО УчетДанныхПродаж.ДокументПриемник = питВыпускБлюд.Ссылка
		Оператор.Отбор.Добавить("ВыпускБлюд.ПЛ_Номенклатура = &ПЛ_НоменклатураОткрытаяЦена");
		Запрос.УстановитьПараметр("ПЛ_НоменклатураОткрытаяЦена", СтруктураТекущихСостояний.ПЛ_НоменклатураОткрытаяЦена);
		
		Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();		
	КонецЕсли; 
	//>> Портал-Юг, Баринов, 2019.09.20
	
	Для каждого КлючИЗначение Из ДопПараметрыОтбора Цикл
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	СписокРегистраторов = Новый СписокЗначений;
	СписокРегистраторов.ЗагрузитьЗначения(ДанныеОбъекта.МассивОснований);
	Запрос.УстановитьПараметр("СписокРегистраторов",СписокРегистраторов);
	МассивЦелевыхДокументов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ДокументПриемник");
	СписокЦелевыхДокументов = Новый СписокЗначений;
	СписокЦелевыхДокументов.ЗагрузитьЗначения(МассивЦелевыхДокументов);
	
	// Найдем все регистраторы, связанные с этими целевыми документами
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	УчетДанныхПродаж.ДокументПриемник КАК ДокументПриемник,
	|	УчетДанныхПродаж.ДокументРегистратор КАК ДокументРегистратор
	|ИЗ
	|	РегистрСведений.питУчетДанныхПродаж КАК УчетДанныхПродаж
	|	&ДопСоединение
	|ГДЕ
	|	УчетДанныхПродаж.ДокументПриемник В(&СписокЦелевыхДокументов)
	|	И НЕ УчетДанныхПродаж.ДокументПриемник.ПометкаУдаления
	|	И НЕ УчетДанныхПродаж.ОбновленПриемник
	|	И &ДопОтбор
	|
	|СГРУППИРОВАТЬ ПО
	|	УчетДанныхПродаж.ДокументПриемник,
	|	УчетДанныхПродаж.ДокументРегистратор
	|ИТОГИ ПО
	|	ДокументПриемник");
	Если ДопОтбор = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДопОтбор", "ИСТИНА");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДопОтбор", ДопОтбор);
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДопСоединение", ДопСоединение);
	Для каждого КлючИЗначение Из ДопПараметрыОтбора Цикл
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	Запрос.УстановитьПараметр("СписокЦелевыхДокументов",СписокЦелевыхДокументов);
	ВыборкаЦелевойДокумент = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Пока ВыборкаЦелевойДокумент.Следующий() Цикл
		текДокумент = ВыборкаЦелевойДокумент.ДокументПриемник;
		// Возможно целевой документ еще не записан
		Если текДокумент = Неопределено ИЛИ текДокумент = NULL Тогда
			Продолжить;
		КонецЕсли;
		// Проверим, может этот документ уже был загружен на предыдущих операциях
		СтрокиСоответствия = ТаблицаСоответствияРегистратораИДокумента.НайтиСтроки(Новый Структура("ЦелевойДокументСсылка",текДокумент));
		Если СтрокиСоответствия.Количество() > 0 Тогда
			// документ уже используется другим ДПФ
			Продолжить;
		КонецЕсли;
		РегистраторыСовпадают = Ложь;
		ВыборкаРегистратор = ВыборкаЦелевойДокумент.Выбрать();
		Пока ВыборкаРегистратор.Следующий() Цикл
			Если ДанныеОбъекта.МассивОснований.Найти(ВыборкаРегистратор.ДокументРегистратор) <> Неопределено Тогда
				РегистраторыСовпадают = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если РегистраторыСовпадают И ТипЗнч(текДокумент) = ТекущийВидДокумента 
			И ( ТекущаяХозОперация = Неопределено ИЛИ текДокумент.ХозяйственнаяОперация = ТекущаяХозОперация )
			И ( ВидДокументаЕГАИС = Неопределено ИЛИ текДокумент.ВидДокумента = ВидДокументаЕГАИС ) Тогда
			ДокументОбъект = текДокумент.ПолучитьОбъект();
			ДокументВозврата = ДокументОбъект;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДокументВозврата
КонецФункции

// Помечает на удаление документы, которые потеряли связь с документов регистратором.
Процедура УдалитьНеактуальныеЦелевыеДокументы()
	// Найдем список целевых документов по текущим регистраторам
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	УчетДанныхПродаж.ДокументПриемник КАК ДокументПриемник,
	|	УчетДанныхПродаж.ДокументРегистратор КАК ДокументРегистратор
	|ИЗ
	|	РегистрСведений.питУчетДанныхПродаж КАК УчетДанныхПродаж
	|ГДЕ
	|	УчетДанныхПродаж.ДокументРегистратор В(&СписокРегистраторов)
	|	И (НЕ УчетДанныхПродаж.ДокументПриемник В (&СписокЦелевыхДокументов))
	|	И (НЕ УчетДанныхПродаж.ДокументПриемник.ПометкаУдаления)
	//|	И (НЕ УчетДанныхПродаж.ОбновленПриемник)
	|ИТОГИ
	|	КОЛИЧЕСТВО(ДокументРегистратор)
	|ПО
	|	ДокументПриемник");
	СписокРегистраторов = Новый СписокЗначений;
	СписокРегистраторов.ЗагрузитьЗначения(ТаблицаСоответствияРегистратораИДокумента.ВыгрузитьКолонку("ДокументРегистратор"));
	СписокЦелевыхДокументов = Новый СписокЗначений; 
	СписокЦелевыхДокументов.ЗагрузитьЗначения(ТаблицаСоответствияРегистратораИДокумента.ВыгрузитьКолонку("ЦелевойДокументСсылка"));
	Запрос.УстановитьПараметр("СписокРегистраторов",СписокРегистраторов);
	Запрос.УстановитьПараметр("СписокЦелевыхДокументов",СписокЦелевыхДокументов);
	// Обойдем целевые документы.
	// Если их регистраторы полностью находятся в списке регистраторов таблицы соответствия, то этот документ удаляем.
	ВыборкаЦелевойДокумент = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	Пока ВыборкаЦелевойДокумент.Следующий() Цикл
		Если НЕ ЗначениеЗаполнено(ВыборкаЦелевойДокумент.ДокументПриемник) Тогда
			Продолжить;
		КонецЕсли;
		Если ВыборкаЦелевойДокумент.ДокументРегистратор <= СписокРегистраторов.Количество() Тогда
			РегистраторыСовпадают = Истина;
			ВыборкаРегистратор = ВыборкаЦелевойДокумент.Выбрать();
			Пока ВыборкаРегистратор.Следующий() Цикл
				Если СписокРегистраторов.НайтиПоЗначению(ВыборкаРегистратор.ДокументРегистратор) = Неопределено Тогда
					РегистраторыСовпадают = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если РегистраторыСовпадают Тогда
				// Удалим этот документ
				ДокументОбъект = ВыборкаЦелевойДокумент.ДокументПриемник.ПолучитьОбъект();
				ДокументОбъект.ПометкаУдаления = Истина;
				Попытка
					Если ДокументОбъект.Проведен Тогда
						ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
					Иначе
						ДокументОбъект.Записать();
					КонецЕсли;
					МассивУдаленныхДокументов.Добавить(ДокументОбъект.Ссылка);
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = "Документ "+ДокументОбъект+" помечен на удаление";
					Сообщение.Сообщить();
				Исключение
					ТекстСообщения = ОписаниеОшибки();
					ЗаписьЖурналаРегистрации("ЗагрузкаИзДанныхПродаж", УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
				КонецПопытки;
				
				
				
				// Удалим записи регистра
				НаборЗаписей = РегистрыСведений.питУчетДанныхПродаж.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.ДокументПриемник.Установить(ВыборкаЦелевойДокумент.ДокументПриемник);
				НаборЗаписей.Прочитать();
				Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
					НаборЗаписей.Удалить(ЗаписьНабора);
				КонецЦикла;
				Попытка
					НаборЗаписей.Записать();
				Исключение
					ТекстСообщения = ОписаниеОшибки();
					ЗаписьЖурналаРегистрации("ЗагрузкаИзДанныхПродаж", УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Формирует таблицу оплат
Функция ПолучитьТаблицуОплат(СписокОбрабатываемыхДокументов)
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КассыККМ.Ссылка КАК КассаККМ,
	|	питУдаленныеКассыКонтрагенты.Контрагент КАК КонтрагентПоУмолчанию,
	|	питУдаленныеКассыКонтрагенты.Договор КАК ДоговорПоУмолчанию,
	|	питУдаленныеКассыКонтрагенты.Клиент КАК КлиентПоУмолчанию,
	|	питУдаленныеКассыКонтрагенты.Соглашение КАК СоглашениеПоУмолчанию,
	|	питУдаленныеКассыКонтрагенты.ВидОплаты КАК ВидОплаты
	|ПОМЕСТИТЬ ВТ_КонтрагеныИДоговорыКассККМ
	|ИЗ
	|	Справочник.КассыККМ КАК КассыККМ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланОбмена.питУдаленныеКассы.Контрагенты КАК питУдаленныеКассыКонтрагенты
	|		ПО КассыККМ.питКассовыйУзел = питУдаленныеКассыКонтрагенты.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	питДанныеПродажФронта.Ссылка КАК Ссылка,
	|	КассыККМ.Ссылка КАК КассаККМ,
	|	КассыККМ.питКассовыйУзел КАК КассовыйУзел,
	|	ВТ_КонтрагеныИДоговорыКассККМ.КонтрагентПоУмолчанию КАК КонтрагентПоУмолчанию,
	|	ВТ_КонтрагеныИДоговорыКассККМ.ДоговорПоУмолчанию КАК ДоговорПоУмолчанию,
	|	ВТ_КонтрагеныИДоговорыКассККМ.КлиентПоУмолчанию КАК КлиентПоУмолчанию,
	|	ВТ_КонтрагеныИДоговорыКассККМ.СоглашениеПоУмолчанию КАК СоглашениеПоУмолчанию,
	|	ВТ_КонтрагеныИДоговорыКассККМ.ВидОплаты КАК ВидОплаты
	|ПОМЕСТИТЬ ВТ_КонтрагентыИДоговорыПоУмолчаниюДляЧеков
	|ИЗ
	|	Документ.питДанныеПродажФронта КАК питДанныеПродажФронта
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КонтрагеныИДоговорыКассККМ КАК ВТ_КонтрагеныИДоговорыКассККМ
	|		ПО питДанныеПродажФронта.КассаККМ = ВТ_КонтрагеныИДоговорыКассККМ.КассаККМ
	|			И (питДанныеПродажФронта.Ссылка В (&СписокДокументов))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КассыККМ КАК КассыККМ
	|		ПО питДанныеПродажФронта.КассаККМ = КассыККМ.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеПродажФронтаОплаты.Ссылка КАК ДокументРегистратор,
	|	ДанныеПродажФронтаОплаты.ВидОплаты КАК ВидОплаты,
	|	ДанныеПродажФронтаОплаты.Карточка КАК Карточка,
	|	СУММА(ДанныеПродажФронтаОплаты.СуммаОплаты) КАК СуммаОплаты,
	|	СУММА(ДанныеПродажФронтаОплаты.Сдача) КАК Сдача,
	|	ВидыОплатОрганизаций.питСтатьяДоходовИРасходов КАК СтатьяДоходовИРасходов,
	|	ВидыОплатОрганизаций.питАналитикаРасходов КАК АналитикаРасходов,
	|	ВидыОплатОрганизаций.питВидОперации КАК ВидОперации,
	|	ВидыОплатОрганизаций.питФискальный КАК Фискальный,
	|	ВидыОплатОрганизаций.ТипОплаты КАК ТипОплаты,
	|	ВЫБОР
	|		КОГДА ВидыОплатОрганизаций.ТипОплаты = &ПеречисленияТипыОплатЗачетАванса
	|				ИЛИ ВидыОплатОрганизаций.питВидОперации = &ВидыОперацийПоЗагрузкеРеализацияОптовая
	|			ТОГДА ВЫБОР
	|					КОГДА НЕ питКарточки.Контрагент = &СправочникКонтрагентыПустаяСсылка
	|								И НЕ питКарточки.Договор = &СправочникДоговорыКонтрагентовПустаяСсылка
	|							ИЛИ НЕ питКарточки.Клиент = &СправочникПартнерыПустаяСсылка
	|								И НЕ питКарточки.Соглашение = &СправочникСоглашенияСКлиентамиПустаяСсылка
	|						ТОГДА питКарточки.Контрагент
	|					ИНАЧЕ ВТ_КонтрагентыИДоговорыПоУмолчаниюДляЧеков.КонтрагентПоУмолчанию
	|				КОНЕЦ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК КонтрагентДляЗачетаАванса,
	|	ВЫБОР
	|		КОГДА ВидыОплатОрганизаций.ТипОплаты = &ПеречисленияТипыОплатЗачетАванса
	|				ИЛИ ВидыОплатОрганизаций.питВидОперации = &ВидыОперацийПоЗагрузкеРеализацияОптовая
	|			ТОГДА ВЫБОР
	|					КОГДА НЕ питКарточки.Контрагент = &СправочникКонтрагентыПустаяСсылка
	|								И НЕ питКарточки.Договор = &СправочникДоговорыКонтрагентовПустаяСсылка
	|							ИЛИ НЕ питКарточки.Клиент = &СправочникПартнерыПустаяСсылка
	|								И НЕ питКарточки.Соглашение = &СправочникСоглашенияСКлиентамиПустаяСсылка
	|						ТОГДА питКарточки.Договор
	|					ИНАЧЕ ВТ_КонтрагентыИДоговорыПоУмолчаниюДляЧеков.ДоговорПоУмолчанию
	|				КОНЕЦ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ДоговорКонтрагентаДляЗачетаАванса,
	|	ВЫБОР
	|		КОГДА ВидыОплатОрганизаций.ТипОплаты = &ПеречисленияТипыОплатЗачетАванса
	|				ИЛИ ВидыОплатОрганизаций.питВидОперации = &ВидыОперацийПоЗагрузкеРеализацияОптовая
	|			ТОГДА ВЫБОР
	|					КОГДА НЕ питКарточки.Контрагент = &СправочникКонтрагентыПустаяСсылка
	|								И НЕ питКарточки.Договор = &СправочникДоговорыКонтрагентовПустаяСсылка
	|							ИЛИ НЕ питКарточки.Клиент = &СправочникПартнерыПустаяСсылка
	|								И НЕ питКарточки.Соглашение = &СправочникСоглашенияСКлиентамиПустаяСсылка
	|						ТОГДА питКарточки.Соглашение
	|					ИНАЧЕ ВТ_КонтрагентыИДоговорыПоУмолчаниюДляЧеков.СоглашениеПоУмолчанию
	|				КОНЕЦ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СоглашениеДляЗачетаАванса,
	|	ВЫБОР
	|		КОГДА ВидыОплатОрганизаций.ТипОплаты = &ПеречисленияТипыОплатЗачетАванса
	|				ИЛИ ВидыОплатОрганизаций.питВидОперации = &ВидыОперацийПоЗагрузкеРеализацияОптовая
	|			ТОГДА ВЫБОР
	|					КОГДА НЕ питКарточки.Контрагент = &СправочникКонтрагентыПустаяСсылка
	|								И НЕ питКарточки.Договор = &СправочникДоговорыКонтрагентовПустаяСсылка
	|							ИЛИ НЕ питКарточки.Клиент = &СправочникПартнерыПустаяСсылка
	|								И НЕ питКарточки.Соглашение = &СправочникСоглашенияСКлиентамиПустаяСсылка
	|						ТОГДА питКарточки.Клиент
	|					ИНАЧЕ ВТ_КонтрагентыИДоговорыПоУмолчаниюДляЧеков.КлиентПоУмолчанию
	|				КОНЕЦ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК КлиентДляЗачетаАванса,
	|	ВТ_КонтрагентыИДоговорыПоУмолчаниюДляЧеков.КассовыйУзел КАК КассовыйУзел
	|ПОМЕСТИТЬ ТаблицаОплат
	|ИЗ
	|	Документ.питДанныеПродажФронта.Оплаты КАК ДанныеПродажФронтаОплаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.питВидыОплатОрганизаций КАК ВидыОплатОрганизаций
	|		ПО ДанныеПродажФронтаОплаты.ВидОплаты = ВидыОплатОрганизаций.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.питКарточки КАК питКарточки
	|		ПО ДанныеПродажФронтаОплаты.Карточка = питКарточки.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КонтрагентыИДоговорыПоУмолчаниюДляЧеков КАК ВТ_КонтрагентыИДоговорыПоУмолчаниюДляЧеков
	|		ПО ДанныеПродажФронтаОплаты.Ссылка = ВТ_КонтрагентыИДоговорыПоУмолчаниюДляЧеков.Ссылка
	|			И ДанныеПродажФронтаОплаты.ВидОплаты = ВТ_КонтрагентыИДоговорыПоУмолчаниюДляЧеков.ВидОплаты
	|ГДЕ
	|	ДанныеПродажФронтаОплаты.Ссылка В(&СписокДокументов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеПродажФронтаОплаты.Ссылка,
	|	ДанныеПродажФронтаОплаты.ВидОплаты,
	|	ДанныеПродажФронтаОплаты.Карточка,
	|	ВидыОплатОрганизаций.питСтатьяДоходовИРасходов,
	|	ВидыОплатОрганизаций.питАналитикаРасходов,
	|	ВидыОплатОрганизаций.питВидОперации,
	|	ВидыОплатОрганизаций.питФискальный,
	|	ВидыОплатОрганизаций.ТипОплаты,
	|	ВТ_КонтрагентыИДоговорыПоУмолчаниюДляЧеков.КассовыйУзел,
	|	ВЫБОР
	|		КОГДА ВидыОплатОрганизаций.ТипОплаты = &ПеречисленияТипыОплатЗачетАванса
	|				ИЛИ ВидыОплатОрганизаций.питВидОперации = &ВидыОперацийПоЗагрузкеРеализацияОптовая
	|			ТОГДА ВЫБОР
	|					КОГДА НЕ питКарточки.Контрагент = &СправочникКонтрагентыПустаяСсылка
	|								И НЕ питКарточки.Договор = &СправочникДоговорыКонтрагентовПустаяСсылка
	|							ИЛИ НЕ питКарточки.Клиент = &СправочникПартнерыПустаяСсылка
	|								И НЕ питКарточки.Соглашение = &СправочникСоглашенияСКлиентамиПустаяСсылка
	|						ТОГДА питКарточки.Контрагент
	|					ИНАЧЕ ВТ_КонтрагентыИДоговорыПоУмолчаниюДляЧеков.КонтрагентПоУмолчанию
	|				КОНЕЦ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ВидыОплатОрганизаций.ТипОплаты = &ПеречисленияТипыОплатЗачетАванса
	|				ИЛИ ВидыОплатОрганизаций.питВидОперации = &ВидыОперацийПоЗагрузкеРеализацияОптовая
	|			ТОГДА ВЫБОР
	|					КОГДА НЕ питКарточки.Контрагент = &СправочникКонтрагентыПустаяСсылка
	|								И НЕ питКарточки.Договор = &СправочникДоговорыКонтрагентовПустаяСсылка
	|							ИЛИ НЕ питКарточки.Клиент = &СправочникПартнерыПустаяСсылка
	|								И НЕ питКарточки.Соглашение = &СправочникСоглашенияСКлиентамиПустаяСсылка
	|						ТОГДА питКарточки.Договор
	|					ИНАЧЕ ВТ_КонтрагентыИДоговорыПоУмолчаниюДляЧеков.ДоговорПоУмолчанию
	|				КОНЕЦ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ВидыОплатОрганизаций.ТипОплаты = &ПеречисленияТипыОплатЗачетАванса
	|				ИЛИ ВидыОплатОрганизаций.питВидОперации = &ВидыОперацийПоЗагрузкеРеализацияОптовая
	|			ТОГДА ВЫБОР
	|					КОГДА НЕ питКарточки.Контрагент = &СправочникКонтрагентыПустаяСсылка
	|								И НЕ питКарточки.Договор = &СправочникДоговорыКонтрагентовПустаяСсылка
	|							ИЛИ НЕ питКарточки.Клиент = &СправочникПартнерыПустаяСсылка
	|								И НЕ питКарточки.Соглашение = &СправочникСоглашенияСКлиентамиПустаяСсылка
	|						ТОГДА питКарточки.Соглашение
	|					ИНАЧЕ ВТ_КонтрагентыИДоговорыПоУмолчаниюДляЧеков.СоглашениеПоУмолчанию
	|				КОНЕЦ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ВидыОплатОрганизаций.ТипОплаты = &ПеречисленияТипыОплатЗачетАванса
	|				ИЛИ ВидыОплатОрганизаций.питВидОперации = &ВидыОперацийПоЗагрузкеРеализацияОптовая
	|			ТОГДА ВЫБОР
	|					КОГДА НЕ питКарточки.Контрагент = &СправочникКонтрагентыПустаяСсылка
	|								И НЕ питКарточки.Договор = &СправочникДоговорыКонтрагентовПустаяСсылка
	|							ИЛИ НЕ питКарточки.Клиент = &СправочникПартнерыПустаяСсылка
	|								И НЕ питКарточки.Соглашение = &СправочникСоглашенияСКлиентамиПустаяСсылка
	|						ТОГДА питКарточки.Клиент
	|					ИНАЧЕ ВТ_КонтрагентыИДоговорыПоУмолчаниюДляЧеков.КлиентПоУмолчанию
	|				КОНЕЦ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОплат.ДокументРегистратор КАК ДокументРегистратор,
	|	КОЛИЧЕСТВО(ТаблицаОплат.ВидОплаты) КАК КоличествоВидовОплат
	|ПОМЕСТИТЬ втКоличествоВидов
	|ИЗ
	|	ТаблицаОплат КАК ТаблицаОплат
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОплат.ДокументРегистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОплат.ВидОплаты КАК ВидОплаты,
	|	ТаблицаОплат.КассовыйУзел КАК КассовыйУзел
	|ИЗ
	|	ТаблицаОплат КАК ТаблицаОплат
	|ГДЕ
	|	ТаблицаОплат.ТипОплаты = &ТипОплатыЗачетАванста
	|	И (ТаблицаОплат.КонтрагентДляЗачетаАванса ЕСТЬ NULL
	|			ИЛИ ТаблицаОплат.КлиентДляЗачетаАванса ЕСТЬ NULL
	|			ИЛИ ТаблицаОплат.КонтрагентДляЗачетаАванса = &СправочникКонтрагентыПустаяСсылка
	|			ИЛИ ТаблицаОплат.КлиентДляЗачетаАванса = &СправочникПартнерыПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОплат.ДокументРегистратор КАК ДокументРегистратор,
	|	ТаблицаОплат.ВидОплаты КАК ВидОплаты,
	|	ТаблицаОплат.Карточка КАК Карточка,
	|	ТаблицаОплат.СуммаОплаты КАК СуммаОплаты,
	|	ТаблицаОплат.Сдача КАК Сдача,
	|	ТаблицаОплат.СтатьяДоходовИРасходов КАК СтатьяДоходовИРасходов,
	|	ТаблицаОплат.АналитикаРасходов КАК АналитикаРасходов,
	|	ТаблицаОплат.ВидОперации КАК ВидОперации,
	|	ТаблицаОплат.ТипОплаты КАК ТипОплаты,
	|	ТаблицаОплат.Фискальный КАК Фискальный,
	|	ТаблицаОплат.КонтрагентДляЗачетаАванса КАК КонтрагентДляЗачетаАванса,
	|	ТаблицаОплат.ДоговорКонтрагентаДляЗачетаАванса КАК ДоговорКонтрагентаДляЗачетаАванса,
	|	ТаблицаОплат.СоглашениеДляЗачетаАванса КАК СоглашениеДляЗачетаАванса,
	|	ТаблицаОплат.КлиентДляЗачетаАванса КАК КлиентДляЗачетаАванса,
	|	ТаблицаОплат.КассовыйУзел КАК КассовыйУзел
	|ИЗ
	|	ТаблицаОплат КАК ТаблицаОплат
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКоличествоВидов КАК втКоличествоВидов
	|			ПО ТаблицаОплат.ДокументРегистратор = втКоличествоВидов.ДокументРегистратор
	|ГДЕ
	|// Фильтр нулевых оплат, от них дальше одни проблемы, НО только если оплат больше одной
	|	ВЫБОР КОГДА ЕстьNULL(втКоличествоВидов.КоличествоВидовОплат, 0) > 1 ТОГДА ТаблицаОплат.СуммаОплаты <> 0 ИНАЧЕ ИСТИНА КОНЕЦ");
	
	Запрос.УстановитьПараметр("СписокДокументов",СписокОбрабатываемыхДокументов);
	Запрос.УстановитьПараметр("ВидыОперацийПоЗагрузкеРеализацияОптовая",Перечисления.питВидыОперацийПоЗагрузкеДанныхПродаж.РеализацияОптовая);
	Запрос.УстановитьПараметр("ПеречисленияТипыОплатЗачетАванса",Перечисления.питТипыОплат.питЗачетАванса);
	Запрос.УстановитьПараметр("СправочникКонтрагентыПустаяСсылка",Справочники.Контрагенты.ПустаяСсылка());
	Запрос.УстановитьПараметр("СправочникПартнерыПустаяСсылка",Справочники.Партнеры.ПустаяСсылка());
	Запрос.УстановитьПараметр("СправочникДоговорыКонтрагентовПустаяСсылка",Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	Запрос.УстановитьПараметр("СправочникСоглашенияСКлиентамиПустаяСсылка",Справочники.СоглашенияСКлиентами.ПустаяСсылка());
	Запрос.УстановитьПараметр("ТипОплатыЗачетАванста",Перечисления.питТипыОплат.питЗачетАванса);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаВидовОплатСНезаполненнымиКонтрагентамиВКассовомУзле = РезультатЗапроса[4].Выгрузить();
	Если ТаблицаВидовОплатСНезаполненнымиКонтрагентамиВКассовомУзле.Количество() > 0 Тогда 
		ТекстОшибки = "";
		Для Каждого СтрокаТаблицы Из ТаблицаВидовОплатСНезаполненнымиКонтрагентамиВКассовомУзле Цикл
			ТекстОшибки = "Не заполнен контрагент по виду оплаты "+СтрокаТаблицы.ВидОплаты+
						  " в параметрах кассового узла "+СтрокаТаблицы.КассовыйУзел;
		КонецЦикла;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		ЗаписьЖурналаРегистрации("ЗагрузкаИзДанныхПродаж", УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
		Результат = Неопределено;
	Иначе 
		Результат = РезультатЗапроса[5].Выгрузить();
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

// Формирует исходную таблицу из документов ДПФ
Функция ПолучитьОсновнуюТаблицуНоменклатуры(СписокОбрабатываемыхДокументов);
	
	ТаблицаВидовОпераций = ТаблицаОплат.Скопировать();
	ТаблицаВидовОпераций.Свернуть("ДокументРегистратор,ВидОперации,ТипОплаты,СтатьяДоходовИРасходов,АналитикаРасходов,
		|ДоговорКонтрагентаДляЗачетаАванса,КлиентДляЗачетаАванса,СоглашениеДляЗачетаАванса,
		|КонтрагентДляЗачетаАванса,Фискальный","СуммаОплаты,Сдача");
	
	//ТаблицаСтатейДоходовИРасходов = ТаблицаОплат.СкопироватьКолонки("ДокументРегистратор,СтатьяДоходовИРасходов,АналитикаРасходов");
	//МассивДобавленныхРегистраторов = Новый Массив;
	//Для Каждого СтрокаОплаты Из ТаблицаОплат Цикл
	//	//Если МассивДобавленныхРегистраторов.Найти(СтрокаОплаты.ДокументРегистратор) = Неопределено Тогда
	//		НоваяСтрока = ТаблицаСтатейДоходовИРасходов.Добавить();
	//		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОплаты);
	//		
	//		МассивДобавленныхРегистраторов.Добавить(СтрокаОплаты.ДокументРегистратор);
	//	//КонецЕсли;
	//КонецЦикла;
	
	// Добавим ведущие типы. Для одного документа может быть только один ведущий тип оплаты.
	МассивДобавленныхРегистраторов = Новый Массив;
	ТаблицаВедущихОплат = ТаблицаОплат.СкопироватьКолонки("ДокументРегистратор, ВидОплаты");
	Для Каждого СтрокаОплаты Из ТаблицаОплат Цикл
		Если СтрокаОплаты.ВидОплаты.питВедущий И МассивДобавленныхРегистраторов.Найти(СтрокаОплаты.ДокументРегистратор) = Неопределено Тогда
			НоваяСтрока = ТаблицаВедущихОплат.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОплаты);
			
			МассивДобавленныхРегистраторов.Добавить(СтрокаОплаты.ДокументРегистратор);
		КонецЕсли;
	КонецЦикла;
	
	// Формируем запрос к основной таблице продаж
	Запрос = Новый Запрос;
	
	// Определяем, какой используется склад приготовления и реализации
	ВыборДанныеЗаполнены = "
	|	ВЫБОР 
	|		КОГДА (ТаблицаПродаж.ВидДокумента = НЕОПРЕДЕЛЕНО
	|			ИЛИ ((ТаблицаПродаж.ВидДокумента = ""АктОРеализации""
	|			ИЛИ ТаблицаПродаж.ВидДокумента = ""СписаниеТоваров""
	|			ИЛИ ТаблицаПродаж.ВидДокумента = ""ВозвратОтПокупателя"")
	|				И ТаблицаПродаж.СкладРеализации = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))
	|			ИЛИ ТаблицаПродаж.СкладПриготовления = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|				И (ТаблицаПродаж.ВидДокумента = ""ВыпускСРозничнойРеализацией""
	|			ИЛИ ТаблицаПродаж.ВидДокумента = ""ВыпускСоСписанием"")
	|			ИЛИ (ТаблицаПродаж.СкладРеализации = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|			ИЛИ ТаблицаПродаж.СкладПриготовления = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))
	|				И ТаблицаПродаж.ВидДокумента = ""ВыпускСПеремещением"")	
	|		ТОГДА
	|			ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ";
	
	ВыборСкладаРеализации = "
	|	ВЫБОР 
	|		КОГДА ПараметрыКасс.СпособОпределенияСкладаРеализации = 1 
	|				И ДанныеПродажФронтаТовары.Ссылка.Зал.СкладРеализации <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) 
	|			ТОГДА ДанныеПродажФронтаТовары.Ссылка.Зал.СкладРеализации
	|		КОГДА ПараметрыКасс.СпособОпределенияСкладаРеализации = 2 
	|				И ДанныеПродажФронтаТовары.МестоПечати.СкладПриготовления <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) 
	|			ТОГДА ДанныеПродажФронтаТовары.МестоПечати.СкладПриготовления
	|		ИНАЧЕ ПараметрыКасс.СкладРеализации
	|	КОНЕЦ";
	
	ВыборСкладаПриготовления = "
	|	ВЫБОР 
	|		КОГДА ПараметрыКасс.СпособОпределенияСкладаПриготовления = 1 
	|				И ДанныеПродажФронтаТовары.Ссылка.Зал.СкладРеализации <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) 
	|			ТОГДА ДанныеПродажФронтаТовары.Ссылка.Зал.СкладРеализации
	|		КОГДА ПараметрыКасс.СпособОпределенияСкладаПриготовления = 2 
	|				И ДанныеПродажФронтаТовары.МестоПечати.СкладПриготовления <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) 
	|			ТОГДА ДанныеПродажФронтаТовары.МестоПечати.СкладПриготовления
	|		ИНАЧЕ ПараметрыКасс.СкладПриготовления
	|	КОНЕЦ";
	
	ТаблицаМестПриготовленияУсловие = "";
	
	// Математика выбора вида документа
	ВыборВидаДокумента = "
	|	ВЫБОР 
	|		КОГДА ДанныеПродажФронтаТовары.Ссылка.ВидОперации = &ХозОперацияВозврат 
	|			ТОГДА ""ВозвратОтПокупателя""
	|		КОГДА ДанныеПродажФронтаТовары.Ссылка.ВидОперации = &ХозОперацияПредоплата 
	|				И ТаблицаОплат.ТипОплаты = &ТипОплатыНаличные 
	|			ТОГДА ""ПриходныйКассовыйОрдер""
	|		КОГДА ДанныеПродажФронтаТовары.Ссылка.ВидОперации = &ХозОперацияПредоплата 
	|				И НЕ ТаблицаОплат.ТипОплаты = &ТипОплатыНаличные 
	|			ТОГДА ""ПоступлениеНаРасчетныйСчет""
	|		КОГДА ДанныеПродажФронтаТовары.Ссылка.ВидОперации = &ХозОперацияВозвратПредоплаты 
	|				И ТаблицаОплат.ТипОплаты = &ТипОплатыНаличные 
	|			ТОГДА ""ПриходныйКассовыйОрдерВозврат""
	|		КОГДА ДанныеПродажФронтаТовары.Ссылка.ВидОперации = &ХозОперацияВозвратПредоплаты 
	|				И НЕ ТаблицаОплат.ТипОплаты = &ТипОплатыНаличные 
	|			ТОГДА ""ПоступлениеНаРасчетныйСчетВозврат""
	|
	|		КОГДА (ДанныеПродажФронтаТовары.Ссылка.ВидОперации = &ХозОперацияОтмена 
	|					И ДанныеПродажФронтаТовары.СоСписанием
	|				ИЛИ ТаблицаОплат.ВидОперации = &ВидыОперацийПоЗагрузкеСписание) 
	|					И (НЕ ПараметрыКасс.ЗагрузкаДанныхПродажВПроизводственныеДокументы)
	|			ТОГДА ""СписаниеТоваров""
	|		КОГДА ПараметрыКасс.ЗагрузкаДанныхПродажВПроизводственныеДокументы
	|					И (ТаблицаОплат.ВидОперации = &ВидыОперацийПоЗагрузкеСписание 
	|				ИЛИ ДанныеПродажФронтаТовары.Ссылка.ВидОперации = &ХозОперацияОтмена 
	|					И ДанныеПродажФронтаТовары.СоСписанием)
	|			ТОГДА ""ВыпускСоСписанием""
	|
	|		КОГДА НЕ ПараметрыКасс.ЗагрузкаДанныхПродажВПроизводственныеДокументы
	|				И ((ТаблицаОплат.ВидОперации = &ВидыОперацийПоЗагрузкеРеализация
	|					И ТаблицаОплат.ТипОплаты = &ТипОплатыЗачетАванса) 
	|				ИЛИ ТаблицаОплат.ВидОперации = &ВидыОперацийПоЗагрузкеРеализацияОптовая)
	|			ТОГДА ""РеализацияТоваровУслуг""
	|		КОГДА ПараметрыКасс.ЗагрузкаДанныхПродажВПроизводственныеДокументы
	|				И (( ТаблицаОплат.ВидОперации = &ВидыОперацийПоЗагрузкеРеализация
	|					И ТаблицаОплат.ТипОплаты = &ТипОплатыЗачетАванса) 
	|				ИЛИ ТаблицаОплат.ВидОперации = &ВидыОперацийПоЗагрузкеРеализацияОптовая)
	|			ТОГДА ""ВыпускСРеализацией""
	|
	|		КОГДА НЕ ПараметрыКасс.ЗагрузкаДанныхПродажВПроизводственныеДокументы
	|				И ТаблицаОплат.ВидОперации = &ВидыОперацийПоЗагрузкеРеализация
	|			ТОГДА ""АктОРеализации""";
	
	Если питФормироватьДокументыПроизводства22 Тогда
		ВыборВидаДокумента = ВыборВидаДокумента + "
		|	КОГДА ПараметрыКасс.ЗагрузкаДанныхПродажВПроизводственныеДокументы
		|			И ТаблицаОплат.ВидОперации = &ВидыОперацийПоЗагрузкеРеализация
		|		ТОГДА ""ВыпускСРозничнойРеализацией""
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ";
	Иначе
		ВыборВидаДокумента = ВыборВидаДокумента + "
		|	КОГДА ПараметрыКасс.ЗагрузкаДанныхПродажВПроизводственныеДокументы
		|			И ТаблицаОплат.ВидОперации = &ВидыОперацийПоЗагрузкеРеализация
		|			И "+ВыборСкладаПриготовления+" = "+ВыборСкладаРеализации+"
		|		ТОГДА ""ВыпускСРозничнойРеализацией""
		|	КОГДА ПараметрыКасс.ЗагрузкаДанныхПродажВПроизводственныеДокументы
		|			И ТаблицаОплат.ВидОперации = &ВидыОперацийПоЗагрузкеРеализация
		|			И "+ВыборСкладаПриготовления+" <> "+ВыборСкладаРеализации+"
		|		ТОГДА ""ВыпускСПеремещениемИАктОРеализации""
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ";
	КонецЕсли;
	
	// Текст запроса
	Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	ТаблицаСтатей.ДокументРегистратор,
	//|	ТаблицаСтатей.СтатьяДоходовИРасходов,
	//|	ТаблицаСтатей.АналитикаРасходов
	//|ПОМЕСТИТЬ ТаблицаСтатей
	//|ИЗ
	//|	&ТаблицаСтатей КАК ТаблицаСтатей
	//|;
	//|////////////////////////////////////////////////////////////////////////////////
	"ВЫБРАТЬ
	|	ТаблицаОплат.ДокументРегистратор КАК ДокументРегистратор,
	|	ТаблицаОплат.ВидОперации КАК ВидОперации,
	|	ТаблицаОплат.ТипОплаты КАК ТипОплаты,
	|	ТаблицаОплат.Фискальный КАК Фискальный,
	|	ТаблицаОплат.СтатьяДоходовИРасходов КАК СтатьяДоходовИРасходов,
	|	ТаблицаОплат.АналитикаРасходов КАК АналитикаРасходов,
	|	ТаблицаОплат.СуммаОплаты - ТаблицаОплат.Сдача КАК СуммаОплаты,
	|	ТаблицаОплат.КонтрагентДляЗачетаАванса КАК КонтрагентДляЗачетаАванса,
	|	ТаблицаОплат.ДоговорКонтрагентаДляЗачетаАванса КАК ДоговорКонтрагентаДляЗачетаАванса,
	|	ТаблицаОплат.КлиентДляЗачетаАванса КАК КлиентДляЗачетаАванса,
	|	ТаблицаОплат.СоглашениеДляЗачетаАванса КАК СоглашениеДляЗачетаАванса
	|ПОМЕСТИТЬ ТаблицаОплат
	|ИЗ
	|	&ТаблицаОплат КАК ТаблицаОплат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВедущихОплат.ДокументРегистратор КАК ДокументРегистратор,
	|	ТаблицаВедущихОплат.ВидОплаты КАК ВедущийТипОплаты
	|ПОМЕСТИТЬ ТаблицаВедущихОплат
	|ИЗ
	|	&ТаблицаВедущихОплат КАК ТаблицаВедущихОплат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОплат.ДокументРегистратор КАК ДокументРегистратор,
	|	СУММА(ТаблицаОплат.СуммаОплаты) КАК СуммаОплаты
	|ПОМЕСТИТЬ ТаблицаОплатИтоги
	|ИЗ
	|	ТаблицаОплат КАК ТаблицаОплат
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОплат.ДокументРегистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПараметрыКасс.КассаККМ КАК КассаККМ,
	|	ПараметрыКасс.СпособОпределенияСкладаПриготовления КАК СпособОпределенияСкладаПриготовления,
	|	ПараметрыКасс.СпособОпределенияСкладаРеализации КАК СпособОпределенияСкладаРеализации,
	|	ПараметрыКасс.СкладПриготовления КАК СкладПриготовления,
	|	ПараметрыКасс.СкладРеализации КАК СкладРеализации,
	|	ПараметрыКасс.ЗагрузкаДанныхПродажВПроизводственныеДокументы КАК ЗагрузкаДанныхПродажВПроизводственныеДокументы,
	|	ПараметрыКасс.РазрешитьНедовложения КАК РазрешитьНедовложения,
	|	ПараметрыКасс.УчитыватьОстаткиБлюдНаСкладе КАК УчитыватьОстаткиБлюдНаСкладе,
	|	ПараметрыКасс.ЗагружатьТоварыВВыпускСПеремещением КАК ЗагружатьТоварыВВыпускСПеремещением,
	|	ПараметрыКасс.ПроводитьЗагружаемыеДокументы КАК ПроводитьЗагружаемыеДокументы,
	|	ПараметрыКасс.ПодразделениеКассовогоУзла КАК ПодразделениеКассовогоУзла,
	|	ПараметрыКасс.ОформлятьДокументыИСМП КАК ОформлятьДокументыИСМП,
	|	ПараметрыКасс.ОформлятьДокументыЕГАИС КАК ОформлятьДокументыЕГАИС
	|ПОМЕСТИТЬ ПараметрыКасс
	|ИЗ
	|	&ПараметрыКасс КАК ПараметрыКасс
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	питДанныеПродажФронтаУчетАлкоголя.Ссылка КАК Ссылка,
	|	питДанныеПродажФронтаУчетАлкоголя.НомерСтроки КАК НомерСтроки,
	|	питДанныеПродажФронтаУчетАлкоголя.Номенклатура КАК Номенклатура,
	|	ЕстьNULL(СпрНоменклатура.питПродажаВРозлив, ЛОЖЬ) КАК ПродажаВРозлив,
	|	ЕстьNULL(СпрНоменклатура.ОсобенностьУчета, ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.БезОсобенностейУчета)) КАК ОсобенностьУчета,
	|	питДанныеПродажФронтаУчетАлкоголя.Количество КАК Количество,
	|	питДанныеПродажФронтаУчетАлкоголя.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	питДанныеПродажФронтаУчетАлкоголя.КодАкциза КАК КодАкциза,
	|	питДанныеПродажФронтаУчетАлкоголя.ИДАктаВскрытия КАК ИДАктаВскрытия,
	|	питДанныеПродажФронтаУчетАлкоголя.МестоПечати КАК МестоПечати,
	|	питДанныеПродажФронтаУчетАлкоголя.ИдентификаторЗаявкиИС КАК ИдентификаторЗаявкиИС,
	|	питДанныеПродажФронтаУчетАлкоголя.ШтрихкодУпаковки КАК ШтрихкодУпаковки,
	|	питДанныеПродажФронтаУчетАлкоголя.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	питДанныеПродажФронтаУчетАлкоголя.КоличествоВМЛ КАК КоличествоВМЛ,
	|	питДанныеПродажФронтаУчетАлкоголя.НомерСтрокиОсновнойПозиции КАК НомерСтрокиОсновнойПозиции,
	|	ЕстьNULL(КлассификаторОрганизацийЕГАИС.Ссылка, ЗНАЧЕНИЕ(Справочник.КлассификаторОрганизацийЕГАИС.ПустаяСсылка)) КАК ОрганизацияЕГАИС
	|ПОМЕСТИТЬ втАлкоголь
	|ИЗ
	|	Документ.питДанныеПродажФронта.УчетАлкоголя КАК питДанныеПродажФронтаУчетАлкоголя
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО питДанныеПродажФронтаУчетАлкоголя.Номенклатура = СпрНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
	|		ПО питДанныеПродажФронтаУчетАлкоголя.Ссылка.Организация = КлассификаторОрганизацийЕГАИС.Контрагент
	|			И питДанныеПродажФронтаУчетАлкоголя.МестоПечати.СкладПриготовления = КлассификаторОрганизацийЕГАИС.ТорговыйОбъект
	|ГДЕ
	|	питДанныеПродажФронтаУчетАлкоголя.Ссылка В (&СписокДокументов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеПродажФронтаТовары.Ссылка КАК Ссылка,
	|	ДанныеПродажФронтаТовары.Ссылка.Организация КАК Организация,
	|	ЕстьNULL(ТаблицаОплат.Фискальный, ЛОЖЬ) КАК Фискальный,
	|	ВЫБОР
	|		КОГДА ДанныеПродажФронтаТовары.Ссылка.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|			ТОГДА ПараметрыКасс.ПодразделениеКассовогоУзла
	|		ИНАЧЕ ДанныеПродажФронтаТовары.Ссылка.Подразделение
	|	КОНЕЦ КАК Подразделение,
	|	&ГруппироватьПоНомеруСменыДанныеПродажФронтаТовары КАК ГруппироватьПоНомеруСменыДанныеПродажФронтаТовары,
	|	ДанныеПродажФронтаТовары.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ДанныеПродажФронтаТовары.Номенклатура КАК Номенклатура,
	|	ЕстьNULL(СпрНоменклатура.питПродажаВРозлив, ЛОЖЬ) КАК ПродажаВРозлив,
	|	ЕстьNULL(СпрНоменклатура.ОсобенностьУчета, ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.БезОсобенностейУчета)) КАК ОсобенностьУчета,
	|	ДанныеПродажФронтаТовары.Характеристика КАК Характеристика,
	|	ДанныеПродажФронтаТовары.Серия КАК Серия,
	|	ДанныеПродажФронтаТовары.СтатусУказанияСерий КАК СтатусУказанияСерий,
	|	ДанныеПродажФронтаТовары.Количество * ВЫБОР
	|		КОГДА ДанныеПродажФронтаТовары.Коэффициент = 0
	|			ТОГДА 1
	|		ИНАЧЕ ДанныеПродажФронтаТовары.Коэффициент
	|	КОНЕЦ КАК Количество,
	|	ДанныеПродажФронтаТовары.Сумма - ДанныеПродажФронтаТовары.СуммаСкидки - ДанныеПродажФронтаТовары.СуммаСкидкиСтроки КАК Сумма,
	|	ДанныеПродажФронтаТовары.СуммаСкидки + ДанныеПродажФронтаТовары.СуммаСкидкиСтроки КАК СуммаСкидки,
	|	ДанныеПродажФронтаТовары.СтавкаНДС КАК СтавкаНДС,
	|	ДанныеПродажФронтаТовары.СуммаНДС КАК СуммаНДС,
	|	ДанныеПродажФронтаТовары.Ссылка.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ТаблицаОплат.СуммаОплаты КАК СуммаОплаты,
	|	&ВыборСкладаРеализации КАК СкладРеализации,
	|	&ВыборСкладаПриготовления КАК СкладПриготовления,
	|	ПараметрыКасс.ЗагрузкаДанныхПродажВПроизводственныеДокументы КАК ЗагрузкаДанныхПродажВПроизводственныеДокументы,
	|	&ВыборВидаДокумента КАК ВидДокумента,
	|	ВЫБОР
	|		КОГДА &ВыборВидаДокумента = ""СписаниеТоваров""
	|					И ДанныеПродажФронтаТовары.Ссылка.ВидОперации <> &ХозОперацияПродажа
	|				ИЛИ &ВыборВидаДокумента = ""ВыпускСоСписанием""
	|					И ДанныеПродажФронтаТовары.Ссылка.ВидОперации = &ХозОперацияОтмена
	|			ТОГДА ДанныеПродажФронтаТовары.ПричинаОтмены.СтатьяДоходовИРасходов
	|		КОГДА &ВыборВидаДокумента = ""ВыпускСоСписанием""
	|				ИЛИ ДанныеПродажФронтаТовары.Ссылка.ВидОперации = &ХозОперацияПродажа
	|					И &ВыборВидаДокумента = ""СписаниеТоваров""
	|			ТОГДА ТаблицаОплат.СтатьяДоходовИРасходов
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка)
	|	КОНЕЦ КАК СтатьяСписанияТМЦ,
	|	ВЫБОР
	|		КОГДА &ВыборВидаДокумента = ""ВыпускСоСписанием""
	|				ИЛИ ДанныеПродажФронтаТовары.Ссылка.ВидОперации = &ХозОперацияПродажа
	|					И &ВыборВидаДокумента = ""СписаниеТоваров""
	|			ТОГДА ТаблицаОплат.АналитикаРасходов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК АналитикаСписанияТМЦ,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА &ВыборВидаДокумента = ""АктОРеализации""
	|					ИЛИ &ВыборВидаДокумента = ""ВыпускСРозничнойРеализацией""
	|					ИЛИ &ВыборВидаДокумента = ""ВыпускСПеремещениемИАктОРеализации""
	|					ИЛИ &ВыборВидаДокумента = ""ПоступлениеНаРасчетныйСчет""
	|					ИЛИ &ВыборВидаДокумента = ""ПоступлениеНаРасчетныйСчетВозврат""
	|				ТОГДА ТаблицаВедущихОплат.ВедущийТипОплаты
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.питВидыОплатОрганизаций.ПустаяСсылка)
	|		КОНЕЦ, ЗНАЧЕНИЕ(Справочник.питВидыОплатОрганизаций.ПустаяСсылка)) КАК ВедущийТипОплаты,
	|	ДанныеПродажФронтаТовары.НомерСтроки КАК НомерСтроки,
	//<<Портал-Юг, Давиденко 2019.03.26 [4.2.9 Особенности заполнения выпуска блюд по чекам]
	|	ЕстьNULL(Выразить(ДанныеПродажФронтаТовары.Ссылка.ДисконтнаяКарта.Договор КАК Справочник.ДоговорыКонтрагентов), ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)) КАК ПЛ_Договор,
	//<< Портал-Юг, Баринов, 2019.07.28 [4.2.9 Особенности заполнения выпуска блюд по чекам] 
	//|	ВЫБОР
	//|		КОГДА ДанныеПродажФронтаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	//|			ТОГДА ИСТИНА
	//|		ИНАЧЕ ЛОЖЬ
	//|	КОНЕЦ КАК ПЛ_ЭтоУслуга,
	//<< Портал-Юг, Баринов, 2019.08.15 [9.09 Обособление продаж по открытой цене]
	//|	ДанныеПродажФронтаТовары.Номенклатура.питПродажаПоСвободнойЦене КАК ПЛ_ОтдельныйВыпускБезРецептур,
	|	ВЫБОР
	|		КОГДА ДанныеПродажФронтаТовары.Номенклатура.питПродажаПоСвободнойЦене 
	|			ТОГДА ДанныеПродажФронтаТовары.Номенклатура
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	КОНЕЦ КАК ПЛ_НоменклатураОткрытаяЦена,
	//>> Портал-Юг, Баринов, 2019.08.15
	//>> Портал-Юг, Баринов, 2019.07.28 
	//>>Портал-Юг, Давиденко 2019.03.26	
	|	ДанныеПродажФронтаТовары.Ссылка КАК ДокументРегистратор,
	//>>Швецов. 15.01.2025. Розничные продажи алкоголя.Реквизиты для соответсвия
	|	ДанныеПродажФронтаТовары.Ссылка.НомерЧека КАК НомерЧека,
	|	ДанныеПродажФронтаТовары.Ссылка.Дата КАК ДатаЧека,
	|	ДанныеПродажФронтаТовары.Упаковка КАК ЕдиницаИзмерения,
	//<<Швецов. 15.01.2025. Розничные продажи алкоголя.Реквизиты для соответсвия
	|	ВЫБОР
	|		КОГДА &ВыборВидаДокумента = ""ВыпускСРеализацией""
	|				ИЛИ &ВыборВидаДокумента = ""РеализацияТоваровУслуг""
	|				ИЛИ &ВыборВидаДокумента = ""ПриходныйКассовыйОрдер""
	|				ИЛИ &ВыборВидаДокумента = ""ПоступлениеНаРасчетныйСчет""
	|				ИЛИ &ВыборВидаДокумента = ""ПриходныйКассовыйОрдерВозврат""
	|				ИЛИ &ВыборВидаДокумента = ""ПоступлениеНаРасчетныйСчетВозврат""
	|			ТОГДА ТаблицаОплат.КонтрагентДляЗачетаАванса
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК КонтрагентДляЗачетаАванса,
	|	ВЫБОР
	|		КОГДА &ВыборВидаДокумента = ""ВыпускСРеализацией""
	|				ИЛИ &ВыборВидаДокумента = ""РеализацияТоваровУслуг""
	|				ИЛИ &ВыборВидаДокумента = ""ПриходныйКассовыйОрдер""
	|				ИЛИ &ВыборВидаДокумента = ""ПоступлениеНаРасчетныйСчет""
	|				ИЛИ &ВыборВидаДокумента = ""ПриходныйКассовыйОрдерВозврат""
	|				ИЛИ &ВыборВидаДокумента = ""ПоступлениеНаРасчетныйСчетВозврат""
	|			ТОГДА ТаблицаОплат.ДоговорКонтрагентаДляЗачетаАванса
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ДоговорКонтрагентаДляЗачетаАванса,
	|	ВЫБОР
	|		КОГДА &ВыборВидаДокумента = ""ВыпускСРеализацией""
	|				ИЛИ &ВыборВидаДокумента = ""РеализацияТоваровУслуг""
	|				ИЛИ &ВыборВидаДокумента = ""ПриходныйКассовыйОрдер""
	|				ИЛИ &ВыборВидаДокумента = ""ПоступлениеНаРасчетныйСчет""
	|				ИЛИ &ВыборВидаДокумента = ""ПриходныйКассовыйОрдерВозврат""
	|				ИЛИ &ВыборВидаДокумента = ""ПоступлениеНаРасчетныйСчетВозврат""
	|			ТОГДА ТаблицаОплат.СоглашениеДляЗачетаАванса
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СоглашениеДляЗачетаАванса,
	|	ВЫБОР
	|		КОГДА &ВыборВидаДокумента = ""ВыпускСРеализацией""
	|				ИЛИ &ВыборВидаДокумента = ""РеализацияТоваровУслуг""
	|				ИЛИ &ВыборВидаДокумента = ""ПриходныйКассовыйОрдер""
	|				ИЛИ &ВыборВидаДокумента = ""ПоступлениеНаРасчетныйСчет""
	|				ИЛИ &ВыборВидаДокумента = ""ПриходныйКассовыйОрдерВозврат""
	|				ИЛИ &ВыборВидаДокумента = ""ПоступлениеНаРасчетныйСчетВозврат""
	|			ТОГДА ТаблицаОплат.КлиентДляЗачетаАванса
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК КлиентДляЗачетаАванса,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаКодАкциза,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаПодключенияИСМП,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК СрокРеализацииИСМП,
	|	0 КАК ОбъемСливаИСМП
	|ПОМЕСТИТЬ ТаблицаПродажТоваров
	|ИЗ
	|	Документ.питДанныеПродажФронта.Товары КАК ДанныеПродажФронтаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО ДанныеПродажФронтаТовары.Номенклатура = СпрНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПараметрыКасс КАК ПараметрыКасс
	|		ПО ДанныеПродажФронтаТовары.Ссылка.КассаККМ = ПараметрыКасс.КассаККМ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОплат КАК ТаблицаОплат
	|		ПО ДанныеПродажФронтаТовары.Ссылка = ТаблицаОплат.ДокументРегистратор
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаВедущихОплат КАК ТаблицаВедущихОплат
	|		ПО ДанныеПродажФронтаТовары.Ссылка = ТаблицаВедущихОплат.ДокументРегистратор
	|ГДЕ
	|	ДанныеПродажФронтаТовары.Ссылка В(&СписокДокументов)
	|	И НЕ &ВыборВидаДокумента = НЕОПРЕДЕЛЕНО
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПродажТоваров.Организация КАК Организация,
	|	ТаблицаПродажТоваров.Подразделение КАК Подразделение,
	|	ТаблицаПродажТоваров.ГруппироватьПоНомеруСменыДанныеПродажФронтаТовары КАК ГруппироватьПоНомеруСменыТаблицаПродажТоваров,
	|	ТаблицаПродажТоваров.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ТаблицаПродажТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаПродажТоваров.Характеристика КАК Характеристика,
	|	ТаблицаПродажТоваров.Серия КАК Серия,
	|	ТаблицаПродажТоваров.СтатусУказанияСерий КАК СтатусУказанияСерий,
	|	ТаблицаПродажТоваров.Количество КАК Количество,
	|	ТаблицаПродажТоваров.Сумма КАК Сумма,
	|	ТаблицаПродажТоваров.СуммаСкидки  КАК СуммаСкидки,
	|	ТаблицаПродажТоваров.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаПродажТоваров.СуммаНДС КАК СуммаНДС,
	|	ТаблицаПродажТоваров.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ТаблицаПродажТоваров.СуммаОплаты КАК СуммаОплаты,
	|	ТаблицаПродажТоваров.СкладРеализации КАК СкладРеализации,
	|	ТаблицаПродажТоваров.СкладПриготовления КАК СкладПриготовления,
	|	ТаблицаПродажТоваров.ЗагрузкаДанныхПродажВПроизводственныеДокументы КАК ЗагрузкаДанныхПродажВПроизводственныеДокументы,
	|	ТаблицаПродажТоваров.ВидДокумента КАК ВидДокумента,
	|	ТаблицаПродажТоваров.СтатьяСписанияТМЦ КАК СтатьяСписанияТМЦ,
	|	ТаблицаПродажТоваров.АналитикаСписанияТМЦ КАК АналитикаСписанияТМЦ,
	|	ТаблицаПродажТоваров.ВедущийТипОплаты КАК ВедущийТипОплаты,
	|	ТаблицаПродажТоваров.НомерСтроки КАК НомерСтроки,
	//<<Портал-Юг, Давиденко 2019.03.26 [4.2.9 Особенности заполнения выпуска блюд по чекам]
	|	ТаблицаПродажТоваров.ПЛ_Договор КАК ПЛ_Договор,
	|	ТаблицаПродажТоваров.ПЛ_НоменклатураОткрытаяЦена КАК ПЛ_НоменклатураОткрытаяЦена,
	//>>Портал-Юг, Давиденко 2019.03.26
	//>>Швецов. 15.01.2025. Розничные продажи алкоголя
	|	ТаблицаПродажТоваров.НомерЧека КАК НомерЧека,
	|	ТаблицаПродажТоваров.ДатаЧека КАК ДатаЧека,
	|	ТаблицаПродажТоваров.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	//<<Швецов. 15.01.2025. Розничные продажи алкоголя.Реквизиты для соответсвия
	|	ТаблицаПродажТоваров.ДокументРегистратор КАК ДокументРегистратор,
	|	ТаблицаПродажТоваров.КонтрагентДляЗачетаАванса КАК КонтрагентДляЗачетаАванса,
	|	ТаблицаПродажТоваров.ДоговорКонтрагентаДляЗачетаАванса КАК ДоговорКонтрагентаДляЗачетаАванса,
	|	ТаблицаПродажТоваров.СоглашениеДляЗачетаАванса КАК СоглашениеДляЗачетаАванса,
	|	ТаблицаПродажТоваров.КлиентДляЗачетаАванса КАК КлиентДляЗачетаАванса,
	|	ТаблицаПродажТоваров.АналитикаКодАкциза КАК АналитикаКодАкциза,
	|	ТаблицаПродажТоваров.ДатаПодключенияИСМП КАК ДатаПодключенияИСМП,
	|	ТаблицаПродажТоваров.СрокРеализацииИСМП КАК СрокРеализацииИСМП,
	|	ТаблицаПродажТоваров.ОбъемСливаИСМП КАК ОбъемСливаИСМП,
	|	ТаблицаПродажТоваров.Фискальный КАК Фискальный,
	|	ЛОЖЬ КАК ОсновнаяПозицияПродажаВРозлив,
	|	ЗНАЧЕНИЕ(Справочник.КлассификаторОрганизацийЕГАИС.ПустаяСсылка) КАК ОрганизацияЕГАИС,
	|	ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка) КАК МаркируемаяПродукцияИСМП,
	|	ЗНАЧЕНИЕ(Справочник.Справки2ЕГАИС.ПустаяСсылка) КАК СправкаИСМП
	|ПОМЕСТИТЬ ТаблицаПродаж
	|ИЗ
	|	ТаблицаПродажТоваров КАК ТаблицаПродажТоваров
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеПродажФронтаТовары.Ссылка.Организация,
	|	ВЫБОР
	|		КОГДА ДанныеПродажФронтаТовары.Ссылка.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|			ТОГДА ПараметрыКасс.ПодразделениеКассовогоУзла
	|		ИНАЧЕ ДанныеПродажФронтаТовары.Ссылка.Подразделение
	|	КОНЕЦ,
	|	&ГруппироватьПоНомеруСменыДанныеПродажФронтаТовары КАК ГруппироватьПоНомеруСменыДанныеПродажФронтаТовары,
	|	""УчетАлкоголяПиво"",
	|	ДанныеПродажФронтаТовары.Номенклатура,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	0,
	|	ДанныеПродажФронтаТовары.Количество,
	|	0,
	|	0,
	|	НЕОПРЕДЕЛЕНО,
	|	0,
	|	ЛОЖЬ,
	|	0,
	|	&ВыборСкладаРеализации,
	|	&ВыборСкладаПриготовления,
	|	ПараметрыКасс.ЗагрузкаДанныхПродажВПроизводственныеДокументы,
	|	""УчетАлкоголяПиво"",
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	ЗНАЧЕНИЕ(Справочник.питВидыОплатОрганизаций.ПустаяСсылка),
	|	ДанныеПродажФронтаТовары.НомерСтроки,
	//<<Портал-Юг, Давиденко 2019.03.26 [4.2.9 Особенности заполнения выпуска блюд по чекам]
	|	Значение(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) КАК ПЛ_Договор,
	|	Значение (Справочник.Номенклатура.ПустаяСсылка)КАК ПЛ_НоменклатураОткрытаяЦена, 
	//>>Швецов. 15.01.2025. Розничные продажи алкоголя.Реквизиты для соответсвия
	|	0,
	|	НЕОПРЕДЕЛЕНО,
	|	Значение(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) КАК ЕдиницаИзмерения,
	//<<Швецов. 15.01.2025. Розничные продажи алкоголя.Реквизиты для соответсвия
	//>>Портал-Юг, Давиденко 2019.03.26
	|	ДанныеПродажФронтаТовары.Ссылка,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	ДанныеПродажФронтаТовары.ШтрихкодУпаковки,
	|	ЕСТЬNULL(ШтрихкодыУпаковокТоваров.питДатаПодключения, ДАТАВРЕМЯ(1, 1, 1)),
	|	ЕСТЬNULL(ШтрихкодыУпаковокТоваров.питСрокРеализации, ДАТАВРЕМЯ(1, 1, 1)),
	|	ЕСТЬNULL(ШтрихкодыУпаковокТоваров.питОбъемСлива, 0),
	|	ЛОЖЬ КАК Фискальный,
	|	ЛОЖЬ КАК ОсновнаяПозицияПродажаВРозлив,
	|	ЗНАЧЕНИЕ(Справочник.КлассификаторОрганизацийЕГАИС.ПустаяСсылка) КАК ОрганизацияЕГАИС,
	|	ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка) КАК МаркируемаяПродукцияИСМП,
	|	ЗНАЧЕНИЕ(Справочник.Справки2ЕГАИС.ПустаяСсылка) КАК СправкаИСМП
	|ИЗ
	|	втАлкоголь КАК ДанныеПродажФронтаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПараметрыКасс КАК ПараметрыКасс
	|		ПО ДанныеПродажФронтаТовары.Ссылка.КассаККМ = ПараметрыКасс.КассаККМ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
	|		ПО ДанныеПродажФронтаТовары.ШтрихкодУпаковки = ШтрихкодыУпаковокТоваров.Ссылка
	|ГДЕ
	|	ПараметрыКасс.ОформлятьДокументыИСМП
	|	И ДанныеПродажФронтаТовары.Ссылка.ВидОперации = &ХозОперацияУчетАлкоголя
	|	И ДанныеПродажФронтаТовары.ОсобенностьУчета = &ОсобенностьУчетаПиво
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеПродажФронтаТовары.Ссылка.Организация,
	|	ВЫБОР
	|		КОГДА ДанныеПродажФронтаТовары.Ссылка.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|			ТОГДА ПараметрыКасс.ПодразделениеКассовогоУзла
	|		ИНАЧЕ ДанныеПродажФронтаТовары.Ссылка.Подразделение
	|	КОНЕЦ,
	|	&ГруппироватьПоНомеруСменыДанныеПродажФронтаТовары КАК ГруппироватьПоНомеруСменыДанныеПродажФронтаТовары,
	|	""УчетАлкоголяКрепкийАлкогольРег2"",
	|	ДанныеПродажФронтаТовары.Номенклатура,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	0,
	|	ДанныеПродажФронтаТовары.Количество,
	|	0,
	|	0,
	|	НЕОПРЕДЕЛЕНО,
	|	0,
	|	ЛОЖЬ,
	|	0,
	|	&ВыборСкладаРеализации,
	|	&ВыборСкладаПриготовления,
	|	ПараметрыКасс.ЗагрузкаДанныхПродажВПроизводственныеДокументы,
	|	""УчетАлкоголяКрепкийАлкогольРег2"",
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	ЗНАЧЕНИЕ(Справочник.питВидыОплатОрганизаций.ПустаяСсылка),
	|	ДанныеПродажФронтаТовары.НомерСтроки,
	//<<Портал-Юг, Давиденко 2019.03.26 [4.2.9 Особенности заполнения выпуска блюд по чекам]
	|	Значение(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) КАК ПЛ_Договор,
	|	Значение (Справочник.Номенклатура.ПустаяСсылка)КАК ПЛ_НоменклатураОткрытаяЦена,
	//>>Портал-Юг, Давиденко 2019.03.26
	//>>Швецов. 15.01.2025 Розничные продажи алкоголя
	|	ДанныеПродажФронтаТовары.Ссылка.НомерЧека,
	|   ДанныеПродажФронтаТовары.Ссылка.Дата,
	|	Значение(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) КАК ЕдиницаИзмерения,
	//<<Швецов. 15.01.2025. Розничные продажи алкоголя.Реквизиты для соответсвия
	|	ДанныеПродажФронтаТовары.Ссылка,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	ДанныеПродажФронтаТовары.ШтрихкодУпаковки,
	|	ДАТАВРЕМЯ(1, 1, 1),
	|	ДАТАВРЕМЯ(1, 1, 1),
	|	0,
	|	ЛОЖЬ КАК Фискальный,
	|	ЛОЖЬ КАК ОсновнаяПозицияПродажаВРозлив,
	|	ДанныеПродажФронтаТовары.ОрганизацияЕГАИС КАК ОрганизацияЕГАИС,
	|	ЕстьNULL(АкцизныеМаркиЕГАИС.АлкогольнаяПродукция, ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка)) КАК МаркируемаяПродукцияИСМП,
	|	ЕстьNULL(АкцизныеМаркиЕГАИС.Справка2, ЗНАЧЕНИЕ(Справочник.Справки2ЕГАИС.ПустаяСсылка)) КАК СправкаИСМП
	|ИЗ
	|	втАлкоголь КАК ДанныеПродажФронтаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПараметрыКасс КАК ПараметрыКасс
	|		ПО ДанныеПродажФронтаТовары.Ссылка.КассаККМ = ПараметрыКасс.КассаККМ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АкцизныеМаркиЕГАИС КАК АкцизныеМаркиЕГАИС
	|		ПО ДанныеПродажФронтаТовары.ОрганизацияЕГАИС = АкцизныеМаркиЕГАИС.ОрганизацияЕГАИС
	|			И ДанныеПродажФронтаТовары.ШтрихкодУпаковки = АкцизныеМаркиЕГАИС.АкцизнаяМарка
	|ГДЕ
	|	ПараметрыКасс.ОформлятьДокументыЕГАИС
	|	И ДанныеПродажФронтаТовары.Ссылка.ВидОперации = &ХозОперацияУчетАлкоголя
	|	И ДанныеПродажФронтаТовары.ОсобенностьУчета = &ОсобенностьУчетаАлкоголь
	|	И ДанныеПродажФронтаТовары.ШтрихкодУпаковки = ЗНАЧЕНИЕ(Справочник.ШтрихКодыУпаковокТоваров.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеПродажФронтаТовары.Ссылка.Организация,
	|	ВЫБОР
	|		КОГДА ДанныеПродажФронтаТовары.Ссылка.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|			ТОГДА ПараметрыКасс.ПодразделениеКассовогоУзла
	|		ИНАЧЕ ДанныеПродажФронтаТовары.Ссылка.Подразделение
	|	КОНЕЦ,
	|	&ГруппироватьПоНомеруСменыДанныеПродажФронтаТовары КАК ГруппироватьПоНомеруСменыДанныеПродажФронтаТовары,
	|	""УчетАлкоголяКрепкийАлкогольРег1"",
	|	ДанныеПродажФронтаТовары.Номенклатура,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	0,
	|	ДанныеПродажФронтаТовары.КоличествоВМЛ,
	|	0,
	|	0,
	|	НЕОПРЕДЕЛЕНО,
	|	0,
	|	ЛОЖЬ,
	|	ЕстьNULL(ТаблицаПродажТоваров.СуммаОплаты, 0),
	|	&ВыборСкладаРеализации,
	|	&ВыборСкладаПриготовления,
	|	ПараметрыКасс.ЗагрузкаДанныхПродажВПроизводственныеДокументы,
	|	""УчетАлкоголяКрепкийАлкогольРег1"",
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	ЗНАЧЕНИЕ(Справочник.питВидыОплатОрганизаций.ПустаяСсылка),
	|	ДанныеПродажФронтаТовары.НомерСтроки,
		//<<Портал-Юг, Давиденко 2019.03.26 [4.2.9 Особенности заполнения выпуска блюд по чекам]
	|	Значение(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) КАК ПЛ_Договор,
	|	Значение (Справочник.Номенклатура.ПустаяСсылка)КАК ПЛ_НоменклатураОткрытаяЦена,
	//>>Швецов. 15.01.2025 Розничные продажи алкоголя
	|	0,
	|	НЕОПРЕДЕЛЕНО,
	|	Значение(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) КАК ЕдиницаИзмерения,
	//<<Швецов. 15.01.2025 Розничные продажи алкоголя.Реквизиты для соответсвия
	//>>Портал-Юг, Давиденко 2019.03.26
	|	ДанныеПродажФронтаТовары.Ссылка,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	ДанныеПродажФронтаТовары.ШтрихкодУпаковки,
	|	ЕСТЬNULL(ШтрихкодыУпаковокТоваров.питДатаПодключения, ДАТАВРЕМЯ(1, 1, 1)),
	|	ЕСТЬNULL(ШтрихкодыУпаковокТоваров.питСрокРеализации, ДАТАВРЕМЯ(1, 1, 1)),
	|	ЕСТЬNULL(ШтрихкодыУпаковокТоваров.питОбъемСлива, 0),
	|	ЕстьNULL(ТаблицаПродажТоваров.Фискальный, ЛОЖЬ) КАК Фискальный,
	|	ЕстьNULL(ТаблицаПродажТоваров.ПродажаВРозлив, ЛОЖЬ) КАК ОсновнаяПозицияПродажаВРозлив,
	|	ДанныеПродажФронтаТовары.ОрганизацияЕГАИС КАК ОрганизацияЕГАИС,
	|	ЕстьNULL(АкцизныеМаркиЕГАИС.АлкогольнаяПродукция, ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка)) КАК МаркируемаяПродукцияИСМП,
	|	ЕстьNULL(АкцизныеМаркиЕГАИС.Справка2, ЗНАЧЕНИЕ(Справочник.Справки2ЕГАИС.ПустаяСсылка)) КАК СправкаИСМП
	|ИЗ
	|	втАлкоголь КАК ДанныеПродажФронтаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПродажТоваров КАК ТаблицаПродажТоваров
	|		ПО ДанныеПродажФронтаТовары.Ссылка = ТаблицаПродажТоваров.Ссылка
	|			И ДанныеПродажФронтаТовары.НомерСтрокиОсновнойПозиции = ТаблицаПродажТоваров.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПараметрыКасс КАК ПараметрыКасс
	|		ПО ДанныеПродажФронтаТовары.Ссылка.КассаККМ = ПараметрыКасс.КассаККМ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
	|		ПО ДанныеПродажФронтаТовары.ШтрихкодУпаковки = ШтрихкодыУпаковокТоваров.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АкцизныеМаркиЕГАИС КАК АкцизныеМаркиЕГАИС
	|		ПО ДанныеПродажФронтаТовары.ОрганизацияЕГАИС = АкцизныеМаркиЕГАИС.ОрганизацияЕГАИС
	|			И ДанныеПродажФронтаТовары.ШтрихкодУпаковки = АкцизныеМаркиЕГАИС.АкцизнаяМарка
	|ГДЕ
	|	ПараметрыКасс.ОформлятьДокументыЕГАИС
	|	И (ДанныеПродажФронтаТовары.Ссылка.ВидОперации = &ХозОперацияПродажа
	|			ИЛИ ДанныеПродажФронтаТовары.Ссылка.ВидОперации = &ХозОперацияОтмена)
	|	И ДанныеПродажФронтаТовары.ОсобенностьУчета = &ОсобенностьУчетаАлкоголь
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&ВыборДанныеЗаполнены КАК ДанныеЗаполнены,
	|	ТаблицаПродаж.Организация КАК Организация,
	|	ТаблицаПродаж.Подразделение КАК Подразделение,
	|	&ГруппироватьПоНомеруСменыТаблицаПродаж КАК ГруппироватьПоНомеруСменыТаблицаПродаж,
	|	ТаблицаПродаж.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ТаблицаПродаж.Номенклатура КАК Номенклатура,
	|	ТаблицаПродаж.Характеристика КАК Характеристика,
	|	ТаблицаПродаж.Серия КАК Серия,
	|	ТаблицаПродаж.СтатусУказанияСерий КАК СтатусУказанияСерий,
	|	МАКСИМУМ(ТаблицаПродаж.Количество) КАК Количество,
	|	МАКСИМУМ(ТаблицаПродаж.Сумма) КАК Сумма,
	|	МАКСИМУМ(ТаблицаПродаж.СуммаСкидки) КАК СуммаСкидки,
	|	ТаблицаПродаж.СтавкаНДС КАК СтавкаНДС,
	|	МАКСИМУМ(ТаблицаПродаж.СуммаНДС) КАК СуммаНДС,
	|	ТаблицаПродаж.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ТаблицаПродаж.СуммаОплаты КАК СуммаОплаты,
	|	ТаблицаПродаж.СкладРеализации КАК СкладРеализации,
	|	ТаблицаПродаж.СкладПриготовления КАК СкладПриготовления,
	|	ТаблицаПродаж.ЗагрузкаДанныхПродажВПроизводственныеДокументы КАК ЗагрузкаДанныхПродажВПроизводственныеДокументы,
	|	ТаблицаПродаж.СтатьяСписанияТМЦ КАК СтатьяСписанияТМЦ,
	|	ТаблицаПродаж.АналитикаСписанияТМЦ КАК АналитикаСписанияТМЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаПродаж.ВидДокумента = ""ВыпускСПеремещениемИАктОРеализации""
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.питВидыОплатОрганизаций.ПустаяСсылка)
	|		ИНАЧЕ ТаблицаПродаж.ВедущийТипОплаты
	|	КОНЕЦ КАК ВедущийТипОплаты,
	|	ВЫБОР
	|		КОГДА ТаблицаПродаж.ВидДокумента = ""ВыпускСПеремещениемИАктОРеализации""
	|			ТОГДА ""ВыпускСПеремещением""
	|		ИНАЧЕ ТаблицаПродаж.ВидДокумента
	|	КОНЕЦ КАК ВидДокумента,
	|	ТаблицаПродаж.НомерСтроки КАК НомерСтроки,
	//<<Портал-Юг, Давиденко 2019.03.26 [4.2.9 Особенности заполнения выпуска блюд по чекам]
	|	ТаблицаПродаж.ПЛ_Договор КАК ПЛ_Договор,
	|	ТаблицаПродаж.ПЛ_НоменклатураОткрытаяЦена КАК ПЛ_НоменклатураОткрытаяЦена,
	//>>Портал-Юг, Давиденко 2019.03.26
	|	ТаблицаПродаж.НомерЧека КАК НомерЧека,
	|	ТаблицаПродаж.ДатаЧека КАК ДатаЧека,
	|	ТаблицаПродаж.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаПродаж.ДокументРегистратор КАК ДокументРегистратор,
	|	ТаблицаПродаж.КлиентДляЗачетаАванса КАК КлиентДляЗачетаАванса,
	|	ТаблицаПродаж.СоглашениеДляЗачетаАванса КАК СоглашениеДляЗачетаАванса,
	|	ТаблицаПродаж.КонтрагентДляЗачетаАванса КАК КонтрагентДляЗачетаАванса,
	|	ТаблицаПродаж.ДоговорКонтрагентаДляЗачетаАванса КАК ДоговорКонтрагентаДляЗачетаАванса,
	|	ТаблицаПродаж.АналитикаКодАкциза КАК АналитикаКодАкциза,
	|	ТаблицаПродаж.ДатаПодключенияИСМП КАК ДатаПодключенияИСМП,
	|	ТаблицаПродаж.СрокРеализацииИСМП КАК СрокРеализацииИСМП,
	|	ТаблицаПродаж.ОбъемСливаИСМП КАК ОбъемСливаИСМП,
	|	ТаблицаПродаж.Фискальный КАК Фискальный,
	|	ТаблицаПродаж.ОсновнаяПозицияПродажаВРозлив КАК ОсновнаяПозицияПродажаВРозлив,
	|	ТаблицаПродаж.ОрганизацияЕГАИС КАК ОрганизацияЕГАИС,
	|	ТаблицаПродаж.МаркируемаяПродукцияИСМП КАК МаркируемаяПродукцияИСМП,
	|	ТаблицаПродаж.СправкаИСМП КАК СправкаИСМП
	|ПОМЕСТИТЬ ТаблицаПродажИтоговая
	|ИЗ
	|	ТаблицаПродаж КАК ТаблицаПродаж
	|
	|СГРУППИРОВАТЬ ПО
	|	&ВыборДанныеЗаполнены,
	|	ТаблицаПродаж.Организация,
	|	ТаблицаПродаж.Подразделение,
	|	&ГруппироватьПоНомеруСменыТаблицаПродаж,
	|	ТаблицаПродаж.ИдентификаторСтроки,
	|	ТаблицаПродаж.Номенклатура,
	|	ТаблицаПродаж.Характеристика,
	|	ТаблицаПродаж.Серия,
	|	ТаблицаПродаж.СтатусУказанияСерий,
	|	ТаблицаПродаж.СтавкаНДС,
	|	ТаблицаПродаж.СуммаВключаетНДС,
	|	ТаблицаПродаж.СкладРеализации,
	|	ТаблицаПродаж.СуммаОплаты,
	|	ТаблицаПродаж.СкладПриготовления,
	|	ТаблицаПродаж.ЗагрузкаДанныхПродажВПроизводственныеДокументы,
	|	ТаблицаПродаж.СтатьяСписанияТМЦ,
	|	ТаблицаПродаж.АналитикаСписанияТМЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаПродаж.ВидДокумента = ""ВыпускСПеремещениемИАктОРеализации""
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.питВидыОплатОрганизаций.ПустаяСсылка)
	|		ИНАЧЕ ТаблицаПродаж.ВедущийТипОплаты
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаПродаж.ВидДокумента = ""ВыпускСПеремещениемИАктОРеализации""
	|			ТОГДА ""ВыпускСПеремещением""
	|		ИНАЧЕ ТаблицаПродаж.ВидДокумента
	|	КОНЕЦ,
	|	ТаблицаПродаж.НомерСтроки,
	//<<Портал-Юг, Давиденко 2019.03.26 [4.2.9 Особенности заполнения выпуска блюд по чекам]
	|	ТаблицаПродаж.ПЛ_Договор,
	|	ТаблицаПродаж.ПЛ_НоменклатураОткрытаяЦена,
	//>>Портал-Юг, Давиденко 2019.03.26
	//>>Швецов. 15.01.2025 Розничные продажи алкоголя.Реквизиты для соответсвия
	|	ТаблицаПродаж.НомерЧека,
	|	ТаблицаПродаж.ДатаЧека,
	|	ТаблицаПродаж.ЕдиницаИзмерения,
	//<<Швецов. 15.01.2025 Розничные продажи алкоголя.Реквизиты для соответсвия
	|	ТаблицаПродаж.ДокументРегистратор,
	|	ТаблицаПродаж.КлиентДляЗачетаАванса,
	|	ТаблицаПродаж.СоглашениеДляЗачетаАванса,
	|	ТаблицаПродаж.КонтрагентДляЗачетаАванса,
	|	ТаблицаПродаж.ДоговорКонтрагентаДляЗачетаАванса,
	|	ТаблицаПродаж.АналитикаКодАкциза,
	|	ТаблицаПродаж.ДатаПодключенияИСМП,
	|	ТаблицаПродаж.СрокРеализацииИСМП,
	|	ТаблицаПродаж.ОбъемСливаИСМП,
	|	ТаблицаПродаж.Фискальный,
	|	ТаблицаПродаж.ОсновнаяПозицияПродажаВРозлив,
	|	ТаблицаПродаж.ОрганизацияЕГАИС,
	|	ТаблицаПродаж.МаркируемаяПродукцияИСМП,
	|	ТаблицаПродаж.СправкаИСМП
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&ВыборДанныеЗаполнены,
	|	ТаблицаПродаж.Организация,
	|	ТаблицаПродаж.Подразделение,
	|	&ГруппироватьПоНомеруСменыТаблицаПродаж,
	|	ТаблицаПродаж.ИдентификаторСтроки,
	|	ТаблицаПродаж.Номенклатура,
	|	ТаблицаПродаж.Характеристика,
	|	ТаблицаПродаж.Серия,
	|	ТаблицаПродаж.СтатусУказанияСерий,
	|	МАКСИМУМ(ТаблицаПродаж.Количество),
	|	МАКСИМУМ(ТаблицаПродаж.Сумма),
	|	МАКСИМУМ(ТаблицаПродаж.СуммаСкидки),
	|	ТаблицаПродаж.СтавкаНДС,
	|	МАКСИМУМ(ТаблицаПродаж.СуммаНДС),
	|	ТаблицаПродаж.СуммаВключаетНДС,
	|	ТаблицаПродаж.СуммаОплаты,
	|	ТаблицаПродаж.СкладРеализации,
	|	ТаблицаПродаж.СкладПриготовления,
	|	ТаблицаПродаж.ЗагрузкаДанныхПродажВПроизводственныеДокументы,
	|	ТаблицаПродаж.СтатьяСписанияТМЦ,
	|	ТаблицаПродаж.АналитикаСписанияТМЦ,
	|	ТаблицаПродаж.ВедущийТипОплаты,
	|	ВЫБОР
	|		КОГДА ТаблицаПродаж.ВидДокумента = ""ВыпускСПеремещениемИАктОРеализации""
	|			ТОГДА ""АктОРеализации""
	|		ИНАЧЕ ТаблицаПродаж.ВидДокумента
	|	КОНЕЦ,
	|	ТаблицаПродаж.НомерСтроки,
	//<<Портал-Юг, Давиденко 2019.03.26 [4.2.9 Особенности заполнения выпуска блюд по чекам]
	|	ТаблицаПродаж.ПЛ_Договор,
	|	ТаблицаПродаж.ПЛ_НоменклатураОткрытаяЦена,
	//>>Портал-Юг, Давиденко 2019.03.26
	//>>Швецов. 15.01.2025 Розничные продажи алкоголя.Реквизиты для соответсвия
	|	ТаблицаПродаж.НомерЧека,
	|	ТаблицаПродаж.ДатаЧека,
	|	ТаблицаПродаж.ЕдиницаИзмерения,
	//<<Швецов. 15.01.2025 Розничные продажи алкоголя.Реквизиты для соответсвия
	|	ТаблицаПродаж.ДокументРегистратор,
	|	ТаблицаПродаж.КлиентДляЗачетаАванса,
	|	ТаблицаПродаж.СоглашениеДляЗачетаАванса,
	|	ТаблицаПродаж.КонтрагентДляЗачетаАванса,
	|	ТаблицаПродаж.ДоговорКонтрагентаДляЗачетаАванса,
	|	ТаблицаПродаж.АналитикаКодАкциза,
	|	ТаблицаПродаж.ДатаПодключенияИСМП,
	|	ТаблицаПродаж.СрокРеализацииИСМП,
	|	ТаблицаПродаж.ОбъемСливаИСМП,
	|	ТаблицаПродаж.Фискальный КАК Фискальный,
	|	ТаблицаПродаж.ОсновнаяПозицияПродажаВРозлив КАК ОсновнаяПозицияПродажаВРозлив,
	|	ТаблицаПродаж.ОрганизацияЕГАИС КАК ОрганизацияЕГАИС,
	|	ТаблицаПродаж.МаркируемаяПродукцияИСМП КАК МаркируемаяПродукцияИСМП,
	|	ТаблицаПродаж.СправкаИСМП КАК СправкаИСМП
	|ИЗ
	|	ТаблицаПродаж КАК ТаблицаПродаж
	|ГДЕ
	|	ТаблицаПродаж.ВидДокумента = ""ВыпускСПеремещениемИАктОРеализации""
	|
	|СГРУППИРОВАТЬ ПО
	|	&ВыборДанныеЗаполнены,
	|	ТаблицаПродаж.Организация,
	|	ТаблицаПродаж.Подразделение,
	|	&ГруппироватьПоНомеруСменыТаблицаПродаж,
	|	ТаблицаПродаж.ИдентификаторСтроки,
	|	ТаблицаПродаж.Номенклатура,
	|	ТаблицаПродаж.Характеристика,
	|	ТаблицаПродаж.Серия,
	|	ТаблицаПродаж.СтатусУказанияСерий,
	|	ТаблицаПродаж.СтавкаНДС,
	|	ТаблицаПродаж.СуммаВключаетНДС,
	|	ТаблицаПродаж.СкладРеализации,
	|	ТаблицаПродаж.СуммаОплаты,
	|	ТаблицаПродаж.СкладПриготовления,
	|	ТаблицаПродаж.ЗагрузкаДанныхПродажВПроизводственныеДокументы,
	|	ТаблицаПродаж.СтатьяСписанияТМЦ,
	|	ТаблицаПродаж.АналитикаСписанияТМЦ,
	|	ТаблицаПродаж.ВедущийТипОплаты,
	|	ВЫБОР
	|		КОГДА ТаблицаПродаж.ВидДокумента = ""ВыпускСПеремещениемИАктОРеализации""
	|			ТОГДА ""АктОРеализации""
	|		ИНАЧЕ ТаблицаПродаж.ВидДокумента
	|	КОНЕЦ,
	|	ТаблицаПродаж.НомерСтроки,
	//<<Портал-Юг, Давиденко 2019.03.26 [4.2.9 Особенности заполнения выпуска блюд по чекам]
	|	ТаблицаПродаж.ПЛ_Договор,
	|	ТаблицаПродаж.ПЛ_НоменклатураОткрытаяЦена,
	//>>Портал-Юг, Давиденко 2019.03.26
	//>>Швецов. 15.01.2025 Розничные продажи алкоголя.Реквизиты для соответсвия
	|	ТаблицаПродаж.НомерЧека,
	|	ТаблицаПродаж.ДатаЧека,
	|	ТаблицаПродаж.ЕдиницаИзмерения,
	//<<Швецов. 15.01.2025 Розничные продажи алкоголя.Реквизиты для соответсвия
	|	ТаблицаПродаж.ДокументРегистратор,
	|	ТаблицаПродаж.КлиентДляЗачетаАванса,
	|	ТаблицаПродаж.СоглашениеДляЗачетаАванса,
	|	ТаблицаПродаж.КонтрагентДляЗачетаАванса,
	|	ТаблицаПродаж.ДоговорКонтрагентаДляЗачетаАванса,
	|	ТаблицаПродаж.АналитикаКодАкциза,
	|	ТаблицаПродаж.ДатаПодключенияИСМП,
	|	ТаблицаПродаж.СрокРеализацииИСМП,
	|	ТаблицаПродаж.ОбъемСливаИСМП,
	|	ТаблицаПродаж.Фискальный,
	|	ТаблицаПродаж.ОсновнаяПозицияПродажаВРозлив,
	|	ТаблицаПродаж.ОрганизацияЕГАИС,
	|	ТаблицаПродаж.МаркируемаяПродукцияИСМП,
	|	ТаблицаПродаж.СправкаИСМП
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПродажИтоговая.ДанныеЗаполнены КАК ДанныеЗаполнены,
	|	ТаблицаПродажИтоговая.Организация КАК Организация,
	|	ТаблицаПродажИтоговая.Подразделение КАК Подразделение,
	|	&ГруппироватьПоНомеруСменыТПИ КАК ГруппироватьПоНомеруСменыТПИ,
	|	ТаблицаПродажИтоговая.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ТаблицаПродажИтоговая.Номенклатура КАК Номенклатура,
	|	ТаблицаПродажИтоговая.Характеристика КАК Характеристика,
	|	ТаблицаПродажИтоговая.Серия КАК Серия,
	|	ТаблицаПродажИтоговая.СтатусУказанияСерий КАК СтатусУказанияСерий,
	|	ТаблицаПродажИтоговая.Количество КАК Количество,
	|	ТаблицаПродажИтоговая.Сумма КАК Сумма,
	|	ТаблицаПродажИтоговая.СуммаСкидки КАК СуммаСкидки,
	|	ТаблицаПродажИтоговая.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаПродажИтоговая.СуммаНДС КАК СуммаНДС,
	|	ТаблицаПродажИтоговая.Количество КАК КоличествоПоКоэффициенту,
	|	ТаблицаПродажИтоговая.Сумма КАК СуммаПоКоэффициенту,
	|	ТаблицаПродажИтоговая.СуммаСкидки КАК СуммаСкидкиПоКоэффициенту,
	|	ТаблицаПродажИтоговая.СуммаНДС КАК СуммаНДСПоКоэффициенту,
	|	ТаблицаПродажИтоговая.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ТаблицаПродажИтоговая.СуммаОплаты КАК СуммаОплаты,
	|	ВЫБОР
	|		КОГДА ТаблицаПродажИтоговая.ВидДокумента = ""ВозвратОтПокупателя""
	|				ИЛИ ЕСТЬNULL(ТаблицаПродажИтоговая.СуммаОплаты, 0) = 0
	|				ИЛИ ЕСТЬNULL(ТаблицаОплатИтоги.СуммаОплаты, 0) = 0
	|			ТОГДА 1
	|		ИНАЧЕ ЕСТЬNULL(ТаблицаПродажИтоговая.СуммаОплаты / ТаблицаОплатИтоги.СуммаОплаты, 1)
	|	КОНЕЦ КАК КоэффициентДеления,
	|	ТаблицаПродажИтоговая.СкладРеализации КАК СкладРеализации,
	|	ТаблицаПродажИтоговая.СкладПриготовления КАК СкладПриготовления,
	|	ТаблицаПродажИтоговая.ЗагрузкаДанныхПродажВПроизводственныеДокументы КАК ЗагрузкаДанныхПродажВПроизводственныеДокументы,
	|	ТаблицаПродажИтоговая.СтатьяСписанияТМЦ КАК СтатьяСписанияТМЦ,
	|	ТаблицаПродажИтоговая.АналитикаСписанияТМЦ КАК АналитикаСписанияТМЦ,
	|	ТаблицаПродажИтоговая.ВедущийТипОплаты КАК ВедущийТипОплаты,
	|	ТаблицаПродажИтоговая.ВидДокумента КАК ВидДокумента,
	|	ТаблицаПродажИтоговая.НомерСтроки КАК НомерСтроки,
	//<<Портал-Юг, Давиденко 2019.03.26 [4.2.9 Особенности заполнения выпуска блюд по чекам]
	|	ТаблицаПродажИтоговая.ПЛ_Договор КАК ПЛ_Договор,
	|	ТаблицаПродажИтоговая.ПЛ_НоменклатураОткрытаяЦена КАК ПЛ_НоменклатураОткрытаяЦена,
	//>>Портал-Юг, Давиденко 2019.03.26       
	//>>Швецов. 15.01.2025 Розничные продажи алкоголя.Реквизиты для соответсвия          
	|	ТаблицаПродажИтоговая.НомерЧека КАК НомерЧека,
	|	ТаблицаПродажИтоговая.ДатаЧека КАК ДатаЧека,
	|	ТаблицаПродажИтоговая.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	//<<Швецов. 15.01.2025 Розничные продажи алкоголя.Реквизиты для соответсвия
	|	ТаблицаПродажИтоговая.ДокументРегистратор КАК ДокументРегистратор,
	|	ТаблицаПродажИтоговая.КлиентДляЗачетаАванса КАК КлиентДляЗачетаАванса,
	|	ТаблицаПродажИтоговая.СоглашениеДляЗачетаАванса КАК СоглашениеДляЗачетаАванса,
	|	ТаблицаПродажИтоговая.КонтрагентДляЗачетаАванса КАК КонтрагентДляЗачетаАванса,
	|	ТаблицаПродажИтоговая.ДоговорКонтрагентаДляЗачетаАванса КАК ДоговорКонтрагентаДляЗачетаАванса,
	|	ТаблицаПродажИтоговая.АналитикаКодАкциза КАК АналитикаКодАкциза,
	|	ТаблицаПродажИтоговая.ДатаПодключенияИСМП КАК ДатаПодключенияИСМП,
	|	ТаблицаПродажИтоговая.СрокРеализацииИСМП КАК СрокРеализацииИСМП,
	|	ТаблицаПродажИтоговая.ОбъемСливаИСМП КАК ОбъемСливаИСМП,
	|	ТаблицаПродажИтоговая.Фискальный КАК Фискальный,
	|	ТаблицаПродажИтоговая.ОсновнаяПозицияПродажаВРозлив КАК ОсновнаяПозицияПродажаВРозлив,
	|	ТаблицаПродажИтоговая.ОрганизацияЕГАИС КАК ОрганизацияЕГАИС,
	|	ТаблицаПродажИтоговая.МаркируемаяПродукцияИСМП КАК МаркируемаяПродукцияИСМП,
	|	ТаблицаПродажИтоговая.СправкаИСМП КАК СправкаИСМП
	|ИЗ
	|	ТаблицаПродажИтоговая КАК ТаблицаПродажИтоговая
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОплатИтоги КАК ТаблицаОплатИтоги
	|		ПО ТаблицаПродажИтоговая.ДокументРегистратор = ТаблицаОплатИтоги.ДокументРегистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаПродажИтоговая
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаПродаж
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаОплат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПараметрыКасс
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаВедущихОплат
	|";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ГруппироватьПоНомеруСменыДанныеПродажФронтаТовары КАК ГруппироватьПоНомеруСменыДанныеПродажФронтаТовары,",
		?(ГруппироватьПоНомеруСмены,"ДанныеПродажФронтаТовары.Ссылка.КассаККМ КАК КассаККМ,
									//+группировка по дате смены
									|ДанныеПродажФронтаТовары.Ссылка.ДатаСмены КАК ДатаСмены,
									|ДанныеПродажФронтаТовары.Ссылка.НомерСмены КАК НомерСмены,",""));
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ГруппироватьПоНомеруСменыТаблицаПродаж КАК ГруппироватьПоНомеруСменыТаблицаПродаж,",
		?(ГруппироватьПоНомеруСмены,"ТаблицаПродаж.КассаККМ,
									//+группировка по дате смены
									|ТаблицаПродаж.ДатаСмены,
									|ТаблицаПродаж.НомерСмены,",""));
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ГруппироватьПоНомеруСменыТаблицаПродаж,",
		?(ГруппироватьПоНомеруСмены,"ТаблицаПродаж.КассаККМ,
									//+группировка по дате смены
									|ТаблицаПродаж.ДатаСмены,
									|ТаблицаПродаж.НомерСмены,",""));
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ГруппироватьПоНомеруСменыТПИ КАК ГруппироватьПоНомеруСменыТПИ,",
		?(ГруппироватьПоНомеруСмены,"ТаблицаПродажИтоговая.НомерСмены,
									//+группировка по дате смены
									|ТаблицаПродажИтоговая.ДатаСмены,
									|ТаблицаПродажИтоговая.КассаККМ,",""));
	Запрос.Текст = СтрЗаменить(Запрос.Текст, 
		"ТаблицаПродажТоваров.ГруппироватьПоНомеруСменыДанныеПродажФронтаТовары КАК ГруппироватьПоНомеруСменыТаблицаПродажТоваров,",
		?(ГруппироватьПоНомеруСмены,"ТаблицаПродажТоваров.КассаККМ,
								//+группировка по дате смены
								|ТаблицаПродажТоваров.ДатаСмены,
								|ТаблицаПродажТоваров.НомерСмены,",""));
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"&ВыборДанныеЗаполнены",ВыборДанныеЗаполнены);
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"&ВыборСкладаРеализации",ВыборСкладаРеализации);
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"&ВыборСкладаПриготовления",ВыборСкладаПриготовления);
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"&ВыборВидаДокумента",ВыборВидаДокумента);
	
	Запрос.УстановитьПараметр("СписокДокументов", СписокОбрабатываемыхДокументов);
	Запрос.УстановитьПараметр("ХозОперацияУчетАлкоголя", Перечисления.питХозяйственныеОперации.ДанныеПродажФронтаУчетАлкоголя);
	Запрос.УстановитьПараметр("ХозОперацияВозврат", Перечисления.питХозяйственныеОперации.ДанныеПродажФронтаВозврат);
	Запрос.УстановитьПараметр("ХозОперацияОтмена", Перечисления.питХозяйственныеОперации.ДанныеПродажФронтаОтмена);
	Запрос.УстановитьПараметр("ХозОперацияПродажа", Перечисления.питХозяйственныеОперации.ДанныеПродажФронтаПродажа);
	Запрос.УстановитьПараметр("ХозОперацияПредоплата", Перечисления.питХозяйственныеОперации.ДанныеПродажФронтаПредоплата);
	Запрос.УстановитьПараметр("ХозОперацияВозвратПредоплаты", Перечисления.питХозяйственныеОперации.ДанныеПродажФронтаВозвратПредоплаты);
	Запрос.УстановитьПараметр("ТипОплатыНаличные", Перечисления.питТипыОплат.Наличные);
	Запрос.УстановитьПараметр("ТипОплатыЗачетАванса", Перечисления.питТипыОплат.питЗачетАванса);
	Запрос.УстановитьПараметр("ВидыОперацийПоЗагрузкеСписание", Перечисления.питВидыОперацийПоЗагрузкеДанныхПродаж.Списание);
	Запрос.УстановитьПараметр("ВидыОперацийПоЗагрузкеРеализация", Перечисления.питВидыОперацийПоЗагрузкеДанныхПродаж.Реализация);
	Запрос.УстановитьПараметр("ВидыОперацийПоЗагрузкеРеализацияОптовая", Перечисления.питВидыОперацийПоЗагрузкеДанныхПродаж.РеализацияОптовая);
	Запрос.УстановитьПараметр("ТаблицаОплат", ТаблицаВидовОпераций);
	//Запрос.УстановитьПараметр("ТаблицаСтатей", ТаблицаСтатейДоходовИРасходов);
	Запрос.УстановитьПараметр("ТаблицаВедущихОплат", ТаблицаВедущихОплат);
	Запрос.УстановитьПараметр("ПараметрыКасс",ПараметрыКасс);
	Запрос.УстановитьПараметр("ОсобенностьУчетаПиво", Перечисления.ОсобенностиУчетаНоменклатуры.Пиво);
	Запрос.УстановитьПараметр("ОсобенностьУчетаАлкоголь", Перечисления.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	// +КоэффициентДеления2
	// Посчитать ресурсы строк
	РезультатЗапроса.Индексы.Добавить("ДокументРегистратор,НомерСтроки");
	ТаблицаРегистраторНомерСтроки = РезультатЗапроса.Скопировать(,"ДокументРегистратор,НомерСтроки,Количество,Сумма,СуммаСкидки,СуммаНДС");
	ТаблицаРегистраторНомерСтроки.Свернуть("ДокументРегистратор,НомерСтроки,Количество,Сумма,СуммаСкидки,СуммаНДС");
	СтруктураПоискаРегистраторНомерСтроки = Новый Структура("ДокументРегистратор,НомерСтроки,ИдентификаторСтроки");
	СтрокаРесурсыПоКоэффициенту = "КоличествоПоКоэффициенту,СуммаПоКоэффициенту,СуммаСкидкиПоКоэффициенту,СуммаНДСПоКоэффициенту";
	РесурсыПоКоэффициенту = СтрРазделить(СтрокаРесурсыПоКоэффициенту, ",");
	Для каждого СтрокаРегистраторНомерСтроки Из ТаблицаРегистраторНомерСтроки Цикл
		ЗаполнитьЗначенияСвойств(СтруктураПоискаРегистраторНомерСтроки, СтрокаРегистраторНомерСтроки);
		НайденныеПродажи = РезультатЗапроса.НайтиСтроки(СтруктураПоискаРегистраторНомерСтроки);
		КоличествоПродаж = НайденныеПродажи.Количество();
		ТекНомерПродажи = 1;
		Для каждого ТекПродажа Из НайденныеПродажи Цикл
			Для каждого ТекРесурс Из РесурсыПоКоэффициенту Цикл
				Точность = ?(СтрНайти(ТекРесурс, "Количество"), 3, 2);
				ТекРесурсБезКоэффициента = СтрЗаменить(ТекРесурс, "ПоКоэффициенту", "");
				Если ТекНомерПродажи = КоличествоПродаж Тогда
					// Если рассматриваем последнюю найденную строку - присваиваем все оставшееся значение ресурса для исключения ошибки округления.
					ТекПродажа[ТекРесурс] = СтрокаРегистраторНомерСтроки[ТекРесурсБезКоэффициента];
				Иначе
					// Не последняя строка - считаем по формуле.
					ТекПродажа[ТекРесурс] = Окр(ТекПродажа[ТекРесурсБезКоэффициента] * ТекПродажа.КоэффициентДеления, Точность);
				КонецЕсли;
				// Запоминаем, сколько осталось распределить ресурса.
				Если СтрокаРегистраторНомерСтроки[ТекРесурсБезКоэффициента] < ТекПродажа[ТекРесурс] Тогда
					СтрокаРегистраторНомерСтроки[ТекРесурсБезКоэффициента] = 0;
				Иначе
					СтрокаРегистраторНомерСтроки[ТекРесурсБезКоэффициента] = СтрокаРегистраторНомерСтроки[ТекРесурсБезКоэффициента] - ТекПродажа[ТекРесурс];
				КонецЕсли;
			КонецЦикла;
			ТекНомерПродажи = ТекНомерПродажи + 1;
		КонецЦикла;
	КонецЦикла;
	// -КоэффициентДеления2
	
	// Постфильтрация алкогольных строк
	СтрокиУдалить = Новый Массив;
	Для каждого СтрокаТаблицы Из РезультатЗапроса Цикл
		Если НЕ СтрокаТаблицы.ВидДокумента = "УчетАлкоголяКрепкийАлкогольРег1" Тогда
			// Это НЕ "УчетАлкоголяКрепкийАлкогольРег1", пропускаем.
			Продолжить;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.АналитикаКодАкциза) Тогда
			// Это "УчетАлкоголяКрепкийАлкогольРег1" и не заполнен штрихкод, удаляем.
			СтрокиУдалить.Добавить(СтрокаТаблицы);
			Продолжить;
		КонецЕсли;
		Если СтрокаТаблицы.ОсновнаяПозицияПродажаВРозлив
			И СтрокаТаблицы.Фискальный Тогда
			// Это "УчетАлкоголяКрепкийАлкогольРег1" и основная позиция продается 
			// в розлив и оплачена фискальным видом оплат, удалеям.
			СтрокиУдалить.Добавить(СтрокаТаблицы);
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	Для каждого СтрокаУдалить Из СтрокиУдалить Цикл
		РезультатЗапроса.Удалить(СтрокаУдалить);
	КонецЦикла;
	
	Возврат РезультатЗапроса;
	
КонецФункции

Функция ПолучитьТаблицуМодификаторов(СписокОбрабатываемыхДокументов)
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаТоваров.Организация,
	|	ТаблицаТоваров.Подразделение,
	//+группировка по дате смены
	|	"+?(ГруппироватьПоНомеруСмены,"ТаблицаТоваров.КассаККМ, ТаблицаТоваров.НомерСмены, ТаблицаТоваров.ДатаСмены,","")+"
	|	ТаблицаТоваров.ИдентификаторСтроки,
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.Характеристика,
	|	ТаблицаТоваров.Серия,
	|	ТаблицаТоваров.СтатусУказанияСерий,
	|	ТаблицаТоваров.ВидДокумента,
	|	ТаблицаТоваров.СкладПриготовления,
	|	ТаблицаТоваров.СкладРеализации,
	|	ТаблицаТоваров.СуммаВключаетНДС,
	|	ТаблицаТоваров.СтатьяСписанияТМЦ,
	|	ТаблицаТоваров.АналитикаСписанияТМЦ,
	|	ТаблицаТоваров.ВедущийТипОплаты,
	|	ТаблицаТоваров.ДокументРегистратор,
	|	ТаблицаТоваров.СоглашениеДляЗачетаАванса,
	|	ТаблицаТоваров.КлиентДляЗачетаАванса,
	|	ТаблицаТоваров.КонтрагентДляЗачетаАванса,
	//+КоэффициентДеления2
	|	ТаблицаТоваров.КоэффициентДеления,
	|	ТаблицаТоваров.НомерСтроки,
	//-КоэффициентДеления2
	|	ТаблицаТоваров.ДоговорКонтрагентаДляЗачетаАванса
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	&ТаблицаПродаж КАК ТаблицаТоваров
	|;
	|
	|ВЫБРАТЬ
	|	ТаблицаТоваров.ДокументРегистратор,
	|	ТаблицаТоваров.Организация,
	|	ТаблицаТоваров.Подразделение,
	//+группировка по дате смены
	|	"+?(ГруппироватьПоНомеруСмены,"ТаблицаТоваров.КассаККМ, ТаблицаТоваров.НомерСмены, ТаблицаТоваров.ДатаСмены,","")+"
	|	ТаблицаТоваров.ВидДокумента,
	|	ТаблицаТоваров.СкладПриготовления,
	|	ТаблицаТоваров.СуммаВключаетНДС,
	|	ТаблицаТоваров.СкладРеализации,
	|	ТаблицаТоваров.СтатьяСписанияТМЦ,
	|	ТаблицаТоваров.АналитикаСписанияТМЦ,
	|	ТаблицаТоваров.ВедущийТипОплаты,
	|	ТаблицаТоваров.СоглашениеДляЗачетаАванса,
	|	ТаблицаТоваров.КлиентДляЗачетаАванса,
	|	ТаблицаТоваров.КонтрагентДляЗачетаАванса,
	//+КоэффициентДеления2
	|	ТаблицаТоваров.КоэффициентДеления,
	|	ТаблицаТоваров.НомерСтроки,
	//-КоэффициентДеления2
	|	ТаблицаТоваров.ДоговорКонтрагентаДляЗачетаАванса,
	|	ДанныеПродажФронтаМодификаторы.Модификатор,
	|	(ДанныеПродажФронтаМодификаторы.Количество) КАК КоличествоМодификатора,
	|	ДанныеПродажФронтаМодификаторы.ИдентификаторСтроки,
	|	ДанныеПродажФронтаМодификаторы.Номенклатура,
	|	ДанныеПродажФронтаМодификаторы.Характеристика,
	|	ДанныеПродажФронтаМодификаторы.Серия,
	|	ДанныеПродажФронтаМодификаторы.СтатусУказанияСерий,
	|	ДанныеПродажФронтаМодификаторы.КоличествоНоменклатуры КАК КоличествоНоменклатуры,
	|	ДанныеПродажФронтаМодификаторы.КоличествоУпаковокНоменклатуры КАК КоличествоУпаковокНоменклатуры,
	|	ДанныеПродажФронтаМодификаторы.Сумма КАК Сумма,
	|	ДанныеПродажФронтаМодификаторы.СуммаСкидки КАК СуммаСкидки,
	//+КоэффициентДеления2
	|	ДанныеПродажФронтаМодификаторы.Количество КАК КоличествоМодификатораПоКоэффициенту,
	|	ДанныеПродажФронтаМодификаторы.КоличествоНоменклатуры КАК КоличествоНоменклатурыПоКоэффициенту,
	|	ДанныеПродажФронтаМодификаторы.КоличествоУпаковокНоменклатуры КАК КоличествоУпаковокНоменклатурыПоКоэффициенту,
	|	ДанныеПродажФронтаМодификаторы.Сумма КАК СуммаПоКоэффициенту,
	|	ДанныеПродажФронтаМодификаторы.СуммаСкидки КАК СуммаСкидкиПоКоэффициенту,
	//-КоэффициентДеления2
	|	ДанныеПродажФронтаМодификаторы.НоменклатураОсновнойПозиции,
	|	ДанныеПродажФронтаМодификаторы.ХарактеристикаОсновнойПозиции,
	|	ДанныеПродажФронтаМодификаторы.СерияОсновнойПозиции,
	|	ДанныеПродажФронтаМодификаторы.НомерСтрокиОсновнойПозиции,
	|	ДанныеПродажФронтаМодификаторы.НомерСтроки КАК НомерСтрокиМодификатора
	|ИЗ
	|	Документ.питДанныеПродажФронта.Модификаторы КАК ДанныеПродажФронтаМодификаторы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаТоваров КАК ТаблицаТоваров
	|		ПО ДанныеПродажФронтаМодификаторы.ИдентификаторСтроки = ТаблицаТоваров.ИдентификаторСтроки
	|			И ДанныеПродажФронтаМодификаторы.Ссылка = ТаблицаТоваров.ДокументРегистратор
	|ГДЕ
	|	ДанныеПродажФронтаМодификаторы.Ссылка В(&СписокДокументов)
	|");
	Запрос.УстановитьПараметр("СписокДокументов", СписокОбрабатываемыхДокументов);
	Запрос.УстановитьПараметр("ХозОперацияВозврат", Перечисления.питХозяйственныеОперации.ДанныеПродажФронтаВозврат);
	Запрос.УстановитьПараметр("ХозОперацияОтмена", Перечисления.питХозяйственныеОперации.ДанныеПродажФронтаОтмена);
	Запрос.УстановитьПараметр("ХозОперацияПродажа", Перечисления.питХозяйственныеОперации.ДанныеПродажФронтаПродажа);
	Запрос.УстановитьПараметр("ТаблицаПродаж", ТаблицаПродаж);
	
	// +КоэффициентДеления2
	ВыгрузкаМодификаторы = Запрос.Выполнить().Выгрузить();
	
	// Посчитать ресурсы строк
	СтрокаУникальныеГруппировки = "ИдентификаторСтроки,ДокументРегистратор,НомерСтрокиМодификатора";
	ВыгрузкаМодификаторы.Индексы.Добавить(СтрокаУникальныеГруппировки);
	СтрокаРесурсыПоКоэффициенту = "КоличествоМодификатораПоКоэффициенту,КоличествоНоменклатурыПоКоэффициенту,КоличествоУпаковокНоменклатурыПоКоэффициенту,СуммаПоКоэффициенту,СуммаСкидкиПоКоэффициенту";
	РесурсыПоКоэффициенту = СтрРазделить(СтрокаРесурсыПоКоэффициенту, ",");
	ТаблицаУникальнаяНоменклатура = ВыгрузкаМодификаторы.Скопировать(,СтрокаУникальныеГруппировки + "," + СтрокаРесурсыПоКоэффициенту);
	ТаблицаУникальнаяНоменклатура.Свернуть(СтрокаУникальныеГруппировки + "," + СтрокаРесурсыПоКоэффициенту);
	СтруктураПоискаУникальнаяНоменклатура = Новый Структура(СтрокаУникальныеГруппировки);
	Для каждого СтрокаУникальнаяНоменклатура Из ТаблицаУникальнаяНоменклатура Цикл
		ЗаполнитьЗначенияСвойств(СтруктураПоискаУникальнаяНоменклатура, СтрокаУникальнаяНоменклатура);
		НайденныеМодификаторы = ВыгрузкаМодификаторы.НайтиСтроки(СтруктураПоискаУникальнаяНоменклатура);
		КоличествоПродаж = НайденныеМодификаторы.Количество();
		ТекНомерМодификатора = 1;
		Для каждого ТекСтрокаМодификаторы Из НайденныеМодификаторы Цикл
			Для каждого ТекРесурс Из РесурсыПоКоэффициенту Цикл
				Точность = ?(СтрНайти(ТекРесурс, "Количество"), 3, 2);
				ТекРесурсБезКоэффициента = СтрЗаменить(ТекРесурс, "ПоКоэффициенту", "");
				Если ТекНомерМодификатора = КоличествоПродаж Тогда
					// Если рассматриваем последнюю найденную строку - присваиваем все оставшееся значение ресурса для исключения ошибки округления.
					ТекСтрокаМодификаторы[ТекРесурс] = СтрокаУникальнаяНоменклатура[ТекРесурс];
				Иначе
					// Не последняя строка - считаем по формуле.
					ТекСтрокаМодификаторы[ТекРесурс] = Окр(ТекСтрокаМодификаторы[ТекРесурсБезКоэффициента] * ТекСтрокаМодификаторы.КоэффициентДеления, Точность);
				КонецЕсли;
				// Запоминаем, сколько осталось распределить ресурса.
				Если СтрокаУникальнаяНоменклатура[ТекРесурс] < ТекСтрокаМодификаторы[ТекРесурс] Тогда
					СтрокаУникальнаяНоменклатура[ТекРесурс] = 0;
				Иначе
					СтрокаУникальнаяНоменклатура[ТекРесурс] = СтрокаУникальнаяНоменклатура[ТекРесурс] - ТекСтрокаМодификаторы[ТекРесурс];
				КонецЕсли;
			КонецЦикла;
			ТекНомерМодификатора = ТекНомерМодификатора + 1;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ВыгрузкаМодификаторы;
	// -КоэффициентДеления2
КонецФункции

// Возвращается таблица соответствия регистратора и целевого документа
Функция ПолучитьТаблицуСоответствияРегистратораИЦелевогоДокумента()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТаблицаПродаж.Организация,
	|	ТаблицаПродаж.Подразделение,
	//+группировка по дате смены
	|	"+?(ГруппироватьПоНомеруСмены,"ТаблицаПродаж.КассаККМ, ТаблицаПродаж.НомерСмены, ТаблицаПродаж.ДатаСмены,","")+"
	|	ТаблицаПродаж.ДокументРегистратор,
	|	ТаблицаПродаж.ВидДокумента,
	|	ТаблицаПродаж.СуммаВключаетНДС,
	|	ТаблицаПродаж.СтатьяСписанияТМЦ,
	|	ТаблицаПродаж.АналитикаСписанияТМЦ,
	|	ТаблицаПродаж.ВедущийТипОплаты,
	|	ТаблицаПродаж.СкладПриготовления,
	//<<Портал-Юг, Давиденко 2019.03.27 [4.2.9 Особенности заполнения выпуска блюд по чекам]
	|	ТаблицаПродаж.ПЛ_НоменклатураОткрытаяЦена,
	//>>Портал-Юг, Давиденко 2019.03.27
	|	ТаблицаПродаж.СкладРеализации,
	|	ТаблицаПродаж.СоглашениеДляЗачетаАванса,
	|	ТаблицаПродаж.КлиентДляЗачетаАванса,
	|	ТаблицаПродаж.КонтрагентДляЗачетаАванса,
	|	ТаблицаПродаж.ДоговорКонтрагентаДляЗачетаАванса,
	|	ТаблицаПродаж.АналитикаКодАкциза
	|ПОМЕСТИТЬ ТаблицаПродаж
	|ИЗ
	|	&ТаблицаПродаж КАК ТаблицаПродаж
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПродаж.Организация,
	|	ТаблицаПродаж.Подразделение,
	//+группировка по дате смены
	|	"+?(ГруппироватьПоНомеруСмены,"ТаблицаПродаж.КассаККМ, ТаблицаПродаж.НомерСмены, ТаблицаПродаж.ДатаСмены,","")+"
	|	ТаблицаПродаж.ДокументРегистратор,
	|	ТаблицаПродаж.ВидДокумента,
	|	ТаблицаПродаж.СтатьяСписанияТМЦ,
	|	ТаблицаПродаж.АналитикаСписанияТМЦ,
	|	ТаблицаПродаж.СуммаВключаетНДС,
	|	ТаблицаПродаж.ВедущийТипОплаты,
	|	ТаблицаПродаж.СкладПриготовления,
	//<<Портал-Юг, Давиденко 2019.03.27 [4.2.9 Особенности заполнения выпуска блюд по чекам]
	|	ТаблицаПродаж.ПЛ_НоменклатураОткрытаяЦена,
	//>>Портал-Юг, Давиденко 2019.03.27
	|	ТаблицаПродаж.СкладРеализации,
	|	ТаблицаПродаж.СоглашениеДляЗачетаАванса,
	|	ТаблицаПродаж.КлиентДляЗачетаАванса,
	|	ТаблицаПродаж.КонтрагентДляЗачетаАванса,
	|	ТаблицаПродаж.ДоговорКонтрагентаДляЗачетаАванса,
	|	ТаблицаПродаж.АналитикаКодАкциза
	|ИЗ
	|	ТаблицаПродаж КАК ТаблицаПродаж
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПродаж.Организация,
	|	ТаблицаПродаж.Подразделение,
	//+группировка по дате смены
	|	"+?(ГруппироватьПоНомеруСмены,"ТаблицаПродаж.КассаККМ, ТаблицаПродаж.НомерСмены, ТаблицаПродаж.ДатаСмены,","")+"
	|	ТаблицаПродаж.ДокументРегистратор,
	|	ТаблицаПродаж.ВидДокумента,
	|	ТаблицаПродаж.СуммаВключаетНДС,
	|	ТаблицаПродаж.СтатьяСписанияТМЦ,
	|	ТаблицаПродаж.АналитикаСписанияТМЦ,
	|	ТаблицаПродаж.ВедущийТипОплаты,
	|	ТаблицаПродаж.СкладПриготовления,
	//<<Портал-Юг, Давиденко 2019.03.27 [4.2.9 Особенности заполнения выпуска блюд по чекам]
	|	ТаблицаПродаж.ПЛ_НоменклатураОткрытаяЦена,
	//>>Портал-Юг, Давиденко 2019.03.27
	|	ТаблицаПродаж.СкладРеализации,
	|	ТаблицаПродаж.СоглашениеДляЗачетаАванса,
	|	ТаблицаПродаж.КлиентДляЗачетаАванса,
	|	ТаблицаПродаж.КонтрагентДляЗачетаАванса,
	|	ТаблицаПродаж.ДоговорКонтрагентаДляЗачетаАванса,
	|	ТаблицаПродаж.АналитикаКодАкциза
	|";
	Запрос.УстановитьПараметр("ТаблицаПродаж",ТаблицаПродаж);
	ТаблицаРегистраторДокументРеализации = Запрос.Выполнить().Выгрузить();
	
	МассивТиповДокументСсылка = Новый Массив(10); 
	МассивТиповДокументСсылка[0] = Тип("ДокументСсылка.питВыпускБлюд");
	МассивТиповДокументСсылка[1] = Тип("ДокументСсылка.СписаниеНедостачТоваров");
	МассивТиповДокументСсылка[2] = Тип("ДокументСсылка.ВозвратТоваровОтКлиента");
	МассивТиповДокументСсылка[3] = Тип("ДокументСсылка.ОтчетОРозничныхПродажах");
	МассивТиповДокументСсылка[4] = Тип("ДокументСсылка.ПриходныйКассовыйОрдер");
	МассивТиповДокументСсылка[5] = Тип("ДокументСсылка.РасходныйКассовыйОрдер");
	МассивТиповДокументСсылка[6] = Тип("ДокументСсылка.ОперацияПоПлатежнойКарте");
	МассивТиповДокументСсылка[7] = Тип("ДокументСсылка.РеализацияТоваровУслуг");
	МассивТиповДокументСсылка[8] = Тип("ДокументСсылка.ПодключениеКегаКОборудованиюРозливаИСМП");
	МассивТиповДокументСсылка[9] = Тип("ДокументСсылка.АктСписанияЕГАИС");
	ОписаниеТиповДокументСсылка = Новый ОписаниеТипов(МассивТиповДокументСсылка);
	МассивТиповДокументОбъект = Новый Массив(10); 
	МассивТиповДокументОбъект[0] = Тип("ДокументОбъект.питВыпускБлюд");
	МассивТиповДокументОбъект[1] = Тип("ДокументОбъект.СписаниеНедостачТоваров");
	МассивТиповДокументОбъект[2] = Тип("ДокументОбъект.ВозвратТоваровОтКлиента");
	МассивТиповДокументОбъект[3] = Тип("ДокументОбъект.ОтчетОРозничныхПродажах");
	МассивТиповДокументОбъект[4] = Тип("ДокументОбъект.ПриходныйКассовыйОрдер");
	МассивТиповДокументОбъект[5] = Тип("ДокументОбъект.РасходныйКассовыйОрдер");
	МассивТиповДокументОбъект[6] = Тип("ДокументОбъект.ОперацияПоПлатежнойКарте");
	МассивТиповДокументОбъект[7] = Тип("ДокументОбъект.РеализацияТоваровУслуг");
	МассивТиповДокументОбъект[8] = Тип("ДокументОбъект.ПодключениеКегаКОборудованиюРозливаИСМП");
	МассивТиповДокументОбъект[9] = Тип("ДокументОбъект.АктСписанияЕГАИС");
	ОписаниеТиповДокументОбъект = Новый ОписаниеТипов(МассивТиповДокументОбъект);
	
	ТаблицаРегистраторДокументРеализации.Колонки.Добавить("ЦелевойДокументОбъект",Новый ОписаниеТипов(ОписаниеТиповДокументОбъект));
	ТаблицаРегистраторДокументРеализации.Колонки.Добавить("ЦелевойДокументСсылка",Новый ОписаниеТипов(ОписаниеТиповДокументСсылка));
	Возврат ТаблицаРегистраторДокументРеализации;
КонецФункции

// Возвращает товары по установленным отборам
Функция ПолучитьРезультатЗапросаТоваров(ВидыДокументов,ВидыСкладов)
	// список документов, в которых не хватает данных
	СписокНезаполненныхДокументов = Новый СписокЗначений;
	СписокНезаполненныхДокументов.ЗагрузитьЗначения(МассивНеОбработанныхДокументов);
	
	Если ВидыСкладов = 0 Тогда
		ВыборкаВидыСкладов = " ТаблицаПродаж.СкладПриготовления ";
		ГруппировкаВидыСкладов = " СкладПриготовления ";
	ИначеЕсли ВидыСкладов = 1 Тогда
		ВыборкаВидыСкладов = " ТаблицаПродаж.СкладРеализации ";
		ГруппировкаВидыСкладов = " СкладРеализации ";
	Иначе
		ВыборкаВидыСкладов = " ТаблицаПродаж.СкладПриготовления, ТаблицаПродаж.СкладРеализации ";
		ГруппировкаВидыСкладов = " СкладПриготовления, СкладРеализации ";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТаблицаПродаж.Организация,
	|	ТаблицаПродаж.Подразделение,
	//+группировка по дате смены
	|	"+?(ГруппироватьПоНомеруСмены,"ТаблицаПродаж.КассаККМ, ТаблицаПродаж.НомерСмены, ТаблицаПродаж.ДатаСмены,","")+"
	|	ТаблицаПродаж.Номенклатура,
	|	ТаблицаПродаж.Характеристика,
	|	ТаблицаПродаж.Серия,
	|	ТаблицаПродаж.СтатусУказанияСерий,
	|	ТаблицаПродаж.ВидДокумента,
	|	"+ВыборкаВидыСкладов+",
	|	ТаблицаПродаж.СтатьяСписанияТМЦ,
	|	ТаблицаПродаж.АналитикаСписанияТМЦ,
	|	ТаблицаПродаж.ВедущийТипОплаты,
	|	ТаблицаПродаж.СтавкаНДС,
	|	ТаблицаПродаж.СуммаВключаетНДС,
	|	ТаблицаПродаж.Сумма,
	|	ТаблицаПродаж.СуммаСкидки,
	|	ТаблицаПродаж.СуммаНДС,
	|	ТаблицаПродаж.Количество,
	|	ТаблицаПродаж.КоэффициентДеления,
	//<<Портал-Юг, Давиденко 2019.03.26 [4.2.9 Особенности заполнения выпуска блюд по чекам]
	|	ТаблицаПродаж.ПЛ_Договор,
	|	ТаблицаПродаж.ПЛ_НоменклатураОткрытаяЦена,
	//<< Портал-Юг, Баринов, 2019.07.28 [4.2.9 Особенности заполнения выпуска блюд по чекам] 
	// В отдельном выпуске строки не должны быть свёрнуты
	|	ТаблицаПродаж.НомерСтроки,
	//>> Портал-Юг, Баринов, 2019.07.28
	//>>Портал-Юг, Давиденко 2019.03.26
	//+КоэффициентДеления2
	|	ТаблицаПродаж.КоличествоПоКоэффициенту,
	|	ТаблицаПродаж.СуммаПоКоэффициенту,
	|	ТаблицаПродаж.СуммаСкидкиПоКоэффициенту,
	|	ТаблицаПродаж.СуммаНДСПоКоэффициенту,
	//-КоэффициентДеления2
	|	ТаблицаПродаж.ДокументРегистратор,
	//>>Швецов. 15.01.2025 Розничные продажи алкоголя.Реквизиты для соответсвия
	|	ТаблицаПродаж.НомерЧека,
	|	ТаблицаПродаж.ДатаЧека,
	|	ТаблицаПродаж.ЕдиницаИзмерения,
	//<<Швецов. 15.01.2025 Розничные продажи алкоголя.Реквизиты для соответсвия
	|	ТаблицаПродаж.СоглашениеДляЗачетаАванса,
	|	ТаблицаПродаж.КлиентДляЗачетаАванса,
	|	ТаблицаПродаж.КонтрагентДляЗачетаАванса,
	|	ТаблицаПродаж.ДоговорКонтрагентаДляЗачетаАванса,
	|	ТаблицаПродаж.АналитикаКодАкциза КАК АналитикаКодАкциза,
	|	ТаблицаПродаж.ДатаПодключенияИСМП КАК ДатаПодключенияИСМП,
	|	ТаблицаПродаж.СрокРеализацииИСМП КАК СрокРеализацииИСМП,
	|	ТаблицаПродаж.ОбъемСливаИСМП КАК ОбъемСливаИСМП,
	|	ТаблицаПродаж.Фискальный КАК Фискальный,
	|	ТаблицаПродаж.ОсновнаяПозицияПродажаВРозлив КАК ОсновнаяПозицияПродажаВРозлив,
	|	ТаблицаПродаж.ОрганизацияЕГАИС КАК ОрганизацияЕГАИС,
	|	ТаблицаПродаж.МаркируемаяПродукцияИСМП КАК МаркируемаяПродукцияИСМП,
	|	ТаблицаПродаж.СправкаИСМП КАК СправкаИСМП
	|ПОМЕСТИТЬ ТаблицаПродаж
	|ИЗ
	|	&ТаблицаПродаж КАК ТаблицаПродаж
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ТаблицаПродаж.Организация,
	|	ТаблицаПродаж.Подразделение,
	//+группировка по дате смены
	|	"+?(ГруппироватьПоНомеруСмены,"ТаблицаПродаж.КассаККМ, ТаблицаПродаж.НомерСмены, ТаблицаПродаж.ДатаСмены,","")+"
	|	ТаблицаПродаж.Номенклатура,
	|	ТаблицаПродаж.Характеристика,
	|	ТаблицаПродаж.Серия,
	|	ТаблицаПродаж.СтатусУказанияСерий,
	|	ТаблицаПродаж.ВидДокумента,
	|	"+ВыборкаВидыСкладов+",
	|	ТаблицаПродаж.СтатьяСписанияТМЦ,
	|	ТаблицаПродаж.АналитикаСписанияТМЦ,
	|	ТаблицаПродаж.ВедущийТипОплаты,
	|	ТаблицаПродаж.СтавкаНДС,
	|	ТаблицаПродаж.СуммаВключаетНДС,
	|	ТаблицаПродаж.Сумма,
	|	ТаблицаПродаж.СуммаСкидки,
	|	ТаблицаПродаж.СуммаНДС,
	|	ТаблицаПродаж.КоэффициентДеления,
	//<<Портал-Юг, Давиденко 2019.03.26 [4.2.9 Особенности заполнения выпуска блюд по чекам]
	|	ТаблицаПродаж.ПЛ_Договор,
	|	ТаблицаПродаж.ПЛ_НоменклатураОткрытаяЦена,
	//<< Портал-Юг, Баринов, 2019.07.28 [4.2.9 Особенности заполнения выпуска блюд по чекам] 
	// В отдельном выпуске строки не должны быть свёрнуты
	|	ВЫБОР КОГДА ТаблицаПродаж.ПЛ_НоменклатураОткрытаяЦена <> Значение(Справочник.Номенклатура.ПустаяСсылка) ТОГДА ТаблицаПродаж.ДокументРегистратор ИНАЧЕ НЕОПРЕДЕЛЕНО КОНЕЦ КАК РегистраторДляСвертки,
	|	ВЫБОР КОГДА ТаблицаПродаж.ПЛ_НоменклатураОткрытаяЦена <> Значение(Справочник.Номенклатура.ПустаяСсылка) ТОГДА ТаблицаПродаж.НомерСтроки ИНАЧЕ 0 КОНЕЦ КАК НомерСтрокиДляСвертки,
	//>> Портал-Юг, Баринов, 2019.07.28
	//>>Портал-Юг, Давиденко 2019.03.26
	|	ТаблицаПродаж.Количество,
	//>>Швецов. 15.01.2025 Розничные продажи алкоголя.Реквизиты для соответсвия
	|	ТаблицаПродаж.НомерЧека,
	|	ТаблицаПродаж.ДатаЧека,
	|	ТаблицаПродаж.ЕдиницаИзмерения,
	//<<Швецов. 15.01.2025 Розничные продажи алкоголя.Реквизиты для соответсвия
	//+КоэффициентДеления2
	|	ТаблицаПродаж.КоличествоПоКоэффициенту,
	|	ТаблицаПродаж.СуммаПоКоэффициенту,
	|	ТаблицаПродаж.СуммаСкидкиПоКоэффициенту,
	|	ТаблицаПродаж.СуммаНДСПоКоэффициенту,
	//-КоэффициентДеления2
	|	ТаблицаПродаж.СоглашениеДляЗачетаАванса,
	|	ТаблицаПродаж.КлиентДляЗачетаАванса,
	|	ТаблицаПродаж.КонтрагентДляЗачетаАванса,
	|	ТаблицаПродаж.ДоговорКонтрагентаДляЗачетаАванса,
	|	ТаблицаПродаж.АналитикаКодАкциза КАК АналитикаКодАкциза,
	|	ТаблицаПродаж.ДатаПодключенияИСМП КАК ДатаПодключенияИСМП,
	|	ТаблицаПродаж.СрокРеализацииИСМП КАК СрокРеализацииИСМП,
	|	ТаблицаПродаж.ОбъемСливаИСМП КАК ОбъемСливаИСМП,
	|	ТаблицаПродаж.Фискальный КАК Фискальный,
	|	ТаблицаПродаж.ОсновнаяПозицияПродажаВРозлив КАК ОсновнаяПозицияПродажаВРозлив,
	|	ТаблицаПродаж.ОрганизацияЕГАИС КАК ОрганизацияЕГАИС,
	|	ТаблицаПродаж.МаркируемаяПродукцияИСМП КАК МаркируемаяПродукцияИСМП,
	|	ТаблицаПродаж.СправкаИСМП КАК СправкаИСМП
	|ПОМЕСТИТЬ ТаблицаПродажФильтр
	|ИЗ
	|	ТаблицаПродаж КАК ТаблицаПродаж
	|ГДЕ
	|	(НЕ ТаблицаПродаж.ДокументРегистратор В(&СписокНезаполненныхДокументов)) И
	|	"+ВидыДокументов+"
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПродаж.Организация,
	|	ТаблицаПродаж.Подразделение,
	//+группировка по дате смены
	|	"+?(ГруппироватьПоНомеруСмены,"ТаблицаПродаж.КассаККМ, ТаблицаПродаж.НомерСмены, ТаблицаПродаж.ДатаСмены,","")+"
	|	ТаблицаПродаж.Номенклатура,
	|	ТаблицаПродаж.Характеристика,
	|	ТаблицаПродаж.Серия,
	|	ТаблицаПродаж.СтатусУказанияСерий,
	|	ТаблицаПродаж.ВидДокумента,
	|	"+ВыборкаВидыСкладов+",
	|	ТаблицаПродаж.СтатьяСписанияТМЦ,
	|	ТаблицаПродаж.АналитикаСписанияТМЦ,
	|	ТаблицаПродаж.ВедущийТипОплаты,
	|	ТаблицаПродаж.СтавкаНДС,
	|	ТаблицаПродаж.СуммаВключаетНДС,
	|	ТаблицаПродаж.КоэффициентДеления,
	//<<Портал-Юг, Давиденко 2019.03.26 [4.2.9 Особенности заполнения выпуска блюд по чекам]
	|	ТаблицаПродаж.ПЛ_Договор,
	|	ТаблицаПродаж.ПЛ_НоменклатураОткрытаяЦена,
	//<< Портал-Юг, Баринов, 2019.07.28 [4.2.9 Особенности заполнения выпуска блюд по чекам]
	//>>Швецов. 15.01.2025 Розничные продажи алкоголя.Реквизиты для соответсвия
	|	ТаблицаПродаж.НомерЧека,
	|	ТаблицаПродаж.ДатаЧека,
	|	ТаблицаПродаж.ЕдиницаИзмерения,
	//<<Швецов. 15.01.2025 Розничные продажи алкоголя.Реквизиты для соответсвия
	// В отдельном выпуске строки не должны быть свёрнуты
	|	РегистраторДляСвертки,
	|	НомерСтрокиДляСвертки,
	//>> Портал-Юг, Баринов, 2019.07.28
	//>>Портал-Юг, Давиденко 2019.03.26
	|	Сумма(ТаблицаПродаж.Сумма) КАК Сумма,
	|	Сумма(ТаблицаПродаж.СуммаСкидки) КАК СуммаСкидки,
	|	Сумма(ТаблицаПродаж.СуммаНДС) КАК СуммаНДС,
	|	Сумма(ТаблицаПродаж.Количество) КАК Количество,
	//+КоэффициентДеления2
	|	Сумма(ТаблицаПродаж.КоличествоПоКоэффициенту) КАК КоличествоПоКоэффициенту,
	|	Сумма(ТаблицаПродаж.СуммаПоКоэффициенту) КАК СуммаПоКоэффициенту,
	|	Сумма(ТаблицаПродаж.СуммаСкидкиПоКоэффициенту) КАК СуммаСкидкиПоКоэффициенту,
	|	Сумма(ТаблицаПродаж.СуммаНДСПоКоэффициенту) КАК СуммаНДСПоКоэффициенту,
	//-КоэффициентДеления2
	|	ТаблицаПродаж.СоглашениеДляЗачетаАванса,
	|	ТаблицаПродаж.КлиентДляЗачетаАванса,
	|	ТаблицаПродаж.КонтрагентДляЗачетаАванса,
	|	ТаблицаПродаж.ДоговорКонтрагентаДляЗачетаАванса,
	|	ТаблицаПродаж.АналитикаКодАкциза КАК АналитикаКодАкциза,
	|	ТаблицаПродаж.ДатаПодключенияИСМП КАК ДатаПодключенияИСМП,
	|	ТаблицаПродаж.СрокРеализацииИСМП КАК СрокРеализацииИСМП,
	|	ТаблицаПродаж.ОбъемСливаИСМП КАК ОбъемСливаИСМП,
	|	ТаблицаПродаж.Фискальный КАК Фискальный,
	|	ТаблицаПродаж.ОсновнаяПозицияПродажаВРозлив КАК ОсновнаяПозицияПродажаВРозлив,
	|	ТаблицаПродаж.ОрганизацияЕГАИС КАК ОрганизацияЕГАИС,
	|	ТаблицаПродаж.МаркируемаяПродукцияИСМП КАК МаркируемаяПродукцияИСМП,
	|	ТаблицаПродаж.СправкаИСМП КАК СправкаИСМП
	|ИЗ
	|	ТаблицаПродажФильтр КАК ТаблицаПродаж
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПродаж.Организация,
	|	ТаблицаПродаж.Подразделение,
	//+группировка по дате смены
	|	"+?(ГруппироватьПоНомеруСмены,"ТаблицаПродаж.КассаККМ, ТаблицаПродаж.НомерСмены, ТаблицаПродаж.ДатаСмены,","")+"
	|	ТаблицаПродаж.Номенклатура,
	|	ТаблицаПродаж.Характеристика,
	|	ТаблицаПродаж.Серия,
	|	ТаблицаПродаж.СтатусУказанияСерий,
	|	ТаблицаПродаж.ВидДокумента,
	|	"+ВыборкаВидыСкладов+",
	//<<Портал-Юг, Давиденко 2019.03.26 [4.2.9 Особенности заполнения выпуска блюд по чекам]
	|	ТаблицаПродаж.ПЛ_Договор,
	|	ТаблицаПродаж.ПЛ_НоменклатураОткрытаяЦена,
	//>>Швецов. 15.01.2025 Розничные продажи алкоголя.Реквизиты для соответсвия
	|	ТаблицаПродаж.НомерЧека,
	|	ТаблицаПродаж.ДатаЧека,
	|	ТаблицаПродаж.ЕдиницаИзмерения,
	//<<Швецов. 15.01.2025 Розничные продажи алкоголя.Реквизиты для соответсвия
	//<< Портал-Юг, Баринов, 2019.07.28 [4.2.9 Особенности заполнения выпуска блюд по чекам] 
	// В отдельном выпуске строки не должны быть свёрнуты
	|	РегистраторДляСвертки,
	|	НомерСтрокиДляСвертки,
	//>> Портал-Юг, Баринов, 2019.07.28
	//>>Портал-Юг, Давиденко 2019.03.26
	|	ТаблицаПродаж.СтатьяСписанияТМЦ,
	|	ТаблицаПродаж.АналитикаСписанияТМЦ,
	|	ТаблицаПродаж.КоэффициентДеления,
	|	ТаблицаПродаж.ВедущийТипОплаты,
	|	ТаблицаПродаж.СуммаВключаетНДС,
	|	ТаблицаПродаж.СтавкаНДС,
	|	ТаблицаПродаж.СоглашениеДляЗачетаАванса,
	|	ТаблицаПродаж.КлиентДляЗачетаАванса,
	|	ТаблицаПродаж.КонтрагентДляЗачетаАванса,
	|	ТаблицаПродаж.ДоговорКонтрагентаДляЗачетаАванса,
	|	ТаблицаПродаж.АналитикаКодАкциза,
	|	ТаблицаПродаж.ДатаПодключенияИСМП,
	|	ТаблицаПродаж.СрокРеализацииИСМП,
	|	ТаблицаПродаж.ОбъемСливаИСМП,
	|	ТаблицаПродаж.Фискальный,
	|	ТаблицаПродаж.ОсновнаяПозицияПродажаВРозлив,
	|	ТаблицаПродаж.ОрганизацияЕГАИС,
	|	ТаблицаПродаж.МаркируемаяПродукцияИСМП,
	|	ТаблицаПродаж.СправкаИСМП
	|
	|ИТОГИ ПО
	|	Организация,
	|	Подразделение,
	//+группировка по дате смены
	|	"+?(ГруппироватьПоНомеруСмены,"ТаблицаПродаж.КассаККМ, ТаблицаПродаж.НомерСмены, ТаблицаПродаж.ДатаСмены,","")+"
	|	ВидДокумента,
	|	"+ГруппировкаВидыСкладов+",
	|	ТаблицаПродаж.СтатьяСписанияТМЦ,
	|	ТаблицаПродаж.АналитикаСписанияТМЦ,
	|	ТаблицаПродаж.СуммаВключаетНДС,
		//<<Портал-Юг, Давиденко 2019.03.27 [4.2.9 Особенности заполнения выпуска блюд по чекам]
	|	ТаблицаПродаж.ПЛ_НоменклатураОткрытаяЦена,
	//>>Портал-Юг, Давиденко 2019.03.27
	|	ТаблицаПродаж.СоглашениеДляЗачетаАванса,
	|	ТаблицаПродаж.КлиентДляЗачетаАванса,
	|	ТаблицаПродаж.КонтрагентДляЗачетаАванса,
	|	ТаблицаПродаж.ДоговорКонтрагентаДляЗачетаАванса,
	|	ТаблицаПродаж.АналитикаКодАкциза,
	|	ТаблицаПродаж.ВедущийТипОплаты
	|";
	
	Запрос.УстановитьПараметр("ТаблицаПродаж",ТаблицаПродаж);
	Запрос.УстановитьПараметр("ВидыСкладов",ВидыСкладов);
	Запрос.УстановитьПараметр("СписокНезаполненныхДокументов",СписокНезаполненныхДокументов);
	Запрос.УстановитьПараметр("НоменклатураПустаяСсылка",Справочники.Номенклатура.ПустаяСсылка());
	
	Результат = Запрос.Выполнить();
	Возврат Результат;
	
КонецФункции

// Процедура - Записать объект в таблицу соответствий
//
// Параметры:
//  Объект						 - ДокументОбъект - Объект целевого документа.
//
Процедура ЗаписатьОбъектВТаблицуСоответствий(Объект)
	СтрокиСоответствия = ВернутьСтрокиСоответствияПоСтруктуреТекущегоСостояния();
	Для Каждого СтрокаСоответствий Из СтрокиСоответствия Цикл
		СтрокаСоответствий.ЦелевойДокументОбъект = Объект;
		СтрокаСоответствий.ЦелевойДокументСсылка = Объект.Ссылка;
	КонецЦикла;
КонецПроцедуры

// Запись документа в БД и обновление регистра "Учет данных продаж"
Функция ЗаписатьДокумент(Объект, МассивДокументовКПроведению)
	СтрокиСоответствия = ТаблицаСоответствияРегистратораИДокумента.НайтиСтроки(Новый Структура("ЦелевойДокументОбъект",Объект));
	Если СтрокиСоответствия.Количество() > 0 Тогда
		СтрокаСоответствий = СтрокиСоответствия[0];
		// Проводить загружаемый документ
		СтрокаПараметров = ПараметрыКасс.Найти(СтрокаСоответствий.ДокументРегистратор.КассаККМ,"КассаККМ");
	КонецЕсли;
	// Проводить загружаемый документ
	Попытка
		ПровестиДокумент = СтрокаПараметров.ПроводитьЗагружаемыеДокументы;
	Исключение
		ПровестиДокумент = Истина;
		ТекстСообщения = ОписаниеОшибки();
		ЗаписьЖурналаРегистрации("ЗагрузкаИзДанныхПродаж", УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
	КонецПопытки;
	
	//<< Портал-Юг, Баринов, 2019.09.13 [б/н не обновлять обработанные выпуски по открытой цене]
	ПЛ_НеИзменятьДокумент = ПЛ_КлиентСервер.ЗначениеСвойства(Объект.ДополнительныеСвойства, "ПЛ_НеИзменятьДокумент", Ложь);
	Если ПЛ_НеИзменятьДокумент Тогда 
		Возврат Ложь;
	КонецЕсли;	
	//>> Портал-Юг, Баринов, 2019.09.13 
	
	//<< Портал-Юг, Баринов, 2019.03.29 [4.2.9 Особенности заполнения выпуска блюд по чекам]
	// Отдельный выпуск без рецептур не нужно сразу проводить, в нём не заполнены рецептуры.
	// Обработка проводит документ без проверок, несмотря на то, что он не будет корректно отражён в учёте.
	// Если документ сразу будет проведён, сложно будет найти те документы, которые нужно дообработать вручную.
	//<< Портал-Юг, Баринов, 2019.08.15 [9.09 Обособление продаж по открытой цене]
	//Если ПровестиДокумент И ПЛ_КлиентСервер.ЗначениеСвойства(СтрокаСоответствий, "ПЛ_ОтдельныйВыпускБезРецептур", Ложь) Тогда
	Если ПровестиДокумент
			И ПЛ_КлиентСервер.ЗначениеСвойства(СтрокаСоответствий, "ПЛ_НоменклатураОткрытаяЦена", Справочники.Номенклатура.ПустаяСсылка()) <> Справочники.Номенклатура.ПустаяСсылка() Тогда
	//>> Портал-Юг, Баринов, 2019.08.15
		ПровестиДокумент = Ложь;
			//<< шевалдин 08102020
			Если ЗначениеЗаполнено(Объект.Ссылка) Тогда 
				ВременноПолучитьПривилегированныйРежим=НЕ ПривилегированныйРежим();
				Если ВременноПолучитьПривилегированныйРежим Тогда
					УстановитьПривилегированныйРежим(Истина);
				КонецЕсли;
				МЗ=РегистрыСведений.ПЛ_ЛогОбщепит.СоздатьМенеджерЗаписи();
				МЗ.Док=Объект.Ссылка;
				МЗ.ДокОснование=Объект.Ссылка;
				МЗ.ДатаСобытия=ТекущаяДата();
				МЗ.ВидСобытия="ОтменаПроведения";
				МЗ.Описание="Документ не проводится, так как есть номенклатура по открытой цене";
				МЗ.Коммент="ЗаписатьДокумент";
				МЗ.Записать();
				Если ВременноПолучитьПривилегированныйРежим Тогда
					УстановитьПривилегированныйРежим(Ложь);
				КонецЕсли;
				
			КонецЕсли;
			
			//>>
		
	КонецЕсли;
	//>> Портал-Юг, Баринов, 2019.03.29

	
	// Пытаемся провести или записать документ
	Результат = Ложь;
	ДокументНеЗаписан = НЕ ЗначениеЗаполнено(Объект.Ссылка);
	Попытка
		//<<Загребалов И., Апрель-Софт, 19.01.2022.SD68139
		Если ТипЗнч(Объект) = Тип("ДокументОбъект.ВозвратТоваровОтКлиента") Тогда
			Если Объект.Товары.Количество() = 0 Тогда
				Возврат Результат;
			КонецЕсли;
		КонецЕсли;		
		//>>
		Объект.Записать(РежимЗаписиДокумента.Запись);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(?(ДокументНеЗаписан,"Создан","Обновлен")+" и записан документ "+Объект+".");	
		Результат = ЗначениеЗаполнено(Объект.Ссылка);
	Исключение
		ОтменитьТранзакцию();
		
		ТекстСообщения = ОписаниеОшибки();
		ЗаписьЖурналаРегистрации("ЗагрузкаИзДанныхПродаж", УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
		//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		
	КонецПопытки;
	Если Результат Тогда		
		Если МассивСохраненныхДокументов.Найти(Объект.Ссылка) = Неопределено Тогда
			МассивСохраненныхДокументов.Добавить(Объект.Ссылка);
		КонецЕсли;
		// вместо объекта в таблицу соответствия запишем ссылку
		Для Каждого СтрокаСоответствия Из СтрокиСоответствия Цикл
			СтрокаСоответствия.ЦелевойДокументСсылка = Объект.Ссылка;
		КонецЦикла;
		
		Если ПровестиДокумент ИЛИ Объект.Проведен Тогда
			МассивДокументовКПроведению.Добавить(Объект);
		КонецЕсли;
	КонецЕсли;
	Возврат Результат;		
КонецФункции

Функция ЗаполнитьДополнительныеПараметры()
	ДопПараметры = Новый Структура;
	//ДопПараметры.Вставить("СпособПодбораОсновнойРецептуры",Константы.питСпособРасчетаРецептур.Получить());
	ДопПараметры.Вставить("СпособПодбораОсновнойРецептуры",питОбщегоНазначенияСервер.ПолучитьЗначениеПоУмолчанию("СпособРасчетаРецептур"));
	ДопПараметры.Вставить("ПровестиДокумент",Истина);
	ДопПараметры.Вставить("ВозможностьИзмененияЦен", Ложь);
	
	Если СтруктураТекущихСостояний.ВидДокумента = "СписаниеТоваров" Тогда
		
	ИначеЕсли СтруктураТекущихСостояний.ВидДокумента = "АктОРеализации" Тогда
		
	ИначеЕсли СтруктураТекущихСостояний.ВидДокумента = "ВыпускСРозничнойРеализацией" ИЛИ СтруктураТекущихСостояний.ВидДокумента = "ВыпускСоСписанием" ИЛИ СтруктураТекущихСостояний.ВидДокумента = "ВыпускСПеремещением" Тогда
		
	ИначеЕсли СтруктураТекущихСостояний.ВидДокумента = "ВозвратОтПокупателя" Тогда
		
	КонецЕсли;
	
	Возврат ДопПараметры;
КонецФункции

Функция ВернутьСтрокиСоответствияПоСтруктуреТекущегоСостояния()
	// Найдем соответствия между регистраторами и целевыми документами
	Если СтруктураТекущихСостояний.ВидДокумента = "ВыпускСРозничнойРеализацией" Или СтруктураТекущихСостояний.ВидДокумента = "ВыпускСРеализацией" Тогда
		Если питФормироватьДокументыПроизводства22 Тогда
			СтруктураПоиска = Новый Структура("Организация,Подразделение,ВидДокумента,СкладПриготовления,СкладРеализации, ВедущийТипОплаты, СуммаВключаетНДС",СтруктураТекущихСостояний.Организация,СтруктураТекущихСостояний.Подразделение,СтруктураТекущихСостояний.ВидДокумента,СтруктураТекущихСостояний.СкладПриготовления,СтруктураТекущихСостояний.СкладРеализации,СтруктураТекущихСостояний.ВедущийТипОплаты, СтруктураТекущихСостояний.СуммаВключаетНДС);
		Иначе
			СтруктураПоиска = Новый Структура("Организация,Подразделение,ВидДокумента,СкладПриготовления, ВедущийТипОплаты, СуммаВключаетНДС",СтруктураТекущихСостояний.Организация,СтруктураТекущихСостояний.Подразделение,СтруктураТекущихСостояний.ВидДокумента,СтруктураТекущихСостояний.СкладПриготовления,СтруктураТекущихСостояний.ВедущийТипОплаты, СтруктураТекущихСостояний.СуммаВключаетНДС);
		КонецЕсли;
	ИначеЕсли СтруктураТекущихСостояний.ВидДокумента = "ВыпускСоСписанием"  Тогда
		СтруктураПоиска = Новый Структура("Организация,Подразделение,ВидДокумента,СкладПриготовления, СтатьяСписанияТМЦ, АналитикаСписанияТМЦ, СуммаВключаетНДС",СтруктураТекущихСостояний.Организация,СтруктураТекущихСостояний.Подразделение,СтруктураТекущихСостояний.ВидДокумента,СтруктураТекущихСостояний.СкладПриготовления, СтруктураТекущихСостояний.СтатьяСписанияТМЦ, СтруктураТекущихСостояний.АналитикаСписанияТМЦ, СтруктураТекущихСостояний.СуммаВключаетНДС);
	ИначеЕсли СтруктураТекущихСостояний.ВидДокумента = "ВыпускСПеремещением" Тогда
		СтруктураПоиска = Новый Структура("Организация,Подразделение,ВидДокумента,СкладПриготовления,СкладРеализации, СуммаВключаетНДС",СтруктураТекущихСостояний.Организация,СтруктураТекущихСостояний.Подразделение,СтруктураТекущихСостояний.ВидДокумента,СтруктураТекущихСостояний.СкладПриготовления,СтруктураТекущихСостояний.СкладРеализации, СтруктураТекущихСостояний.СуммаВключаетНДС);
	ИначеЕсли СтруктураТекущихСостояний.ВидДокумента = "СписаниеТоваров" Тогда
		СтруктураПоиска = Новый Структура("Организация,Подразделение,ВидДокумента,СкладРеализации, СтатьяСписанияТМЦ, СуммаВключаетНДС",СтруктураТекущихСостояний.Организация,СтруктураТекущихСостояний.Подразделение,СтруктураТекущихСостояний.ВидДокумента,СтруктураТекущихСостояний.СкладРеализации, СтруктураТекущихСостояний.СтатьяСписанияТМЦ, СтруктураТекущихСостояний.СуммаВключаетНДС);
	ИначеЕсли СтруктураТекущихСостояний.ВидДокумента = "АктОРеализации" Тогда
		СтруктураПоиска = Новый Структура("Организация,Подразделение,ВидДокумента,СкладРеализации, ВедущийТипОплаты, СуммаВключаетНДС",СтруктураТекущихСостояний.Организация,СтруктураТекущихСостояний.Подразделение,СтруктураТекущихСостояний.ВидДокумента,СтруктураТекущихСостояний.СкладРеализации, СтруктураТекущихСостояний.ВедущийТипОплаты, СтруктураТекущихСостояний.СуммаВключаетНДС);
	Иначе
		СтруктураПоиска = Новый Структура("Организация,Подразделение,ВидДокумента,СкладРеализации, СуммаВключаетНДС",СтруктураТекущихСостояний.Организация,СтруктураТекущихСостояний.Подразделение,СтруктураТекущихСостояний.ВидДокумента,СтруктураТекущихСостояний.СкладРеализации, СтруктураТекущихСостояний.СуммаВключаетНДС);
	КонецЕсли;
		//<<Портал-Юг, Давиденко 2019.03.27 [4.2.9 Особенности заполнения выпуска блюд по чекам]
	Если СтруктураТекущихСостояний.ВидДокумента = "ВыпускСРозничнойРеализацией"
		ИЛИ  СтруктураТекущихСостояний.ВидДокумента = "ВыпускСоСписанием"
		ИЛИ  СтруктураТекущихСостояний.ВидДокумента = "ВыпускСПеремещением"
		Тогда
		СтруктураПоиска.Вставить("ПЛ_НоменклатураОткрытаяЦена", СтруктураТекущихСостояний.ПЛ_НоменклатураОткрытаяЦена); 
	КонецЕсли;
	//>>Портал-Юг, Давиденко 2019.03.27
	Если ГруппироватьПоНомеруСмены Тогда
		СтруктураПоиска.Вставить("КассаККМ", СтруктураТекущихСостояний.КассаККМ);
		СтруктураПоиска.Вставить("НомерСмены", СтруктураТекущихСостояний.НомерСмены);
		//+группировка по дате смены
		СтруктураПоиска.Вставить("ДатаСмены", СтруктураТекущихСостояний.ДатаСмены);
	КонецЕсли;
	Если СтруктураТекущихСостояний.ВидДокумента = "ВыпускСРеализацией" Или СтруктураТекущихСостояний.ВидДокумента = "РеализацияТоваровУслуг"
		ИЛИ СтруктураТекущихСостояний.ВидДокумента = "ПоступлениеНаРасчетныйСчет" ИЛИ СтруктураТекущихСостояний.ВидДокумента = "ПоступлениеНаРасчетныйСчетВозврат"
		ИЛИ СтруктураТекущихСостояний.ВидДокумента = "ПриходныйКассовыйОрдер" Или СтруктураТекущихСостояний.ВидДокумента = "ПриходныйКассовыйОрдерВозврат" Тогда
		СтруктураПоиска.Вставить("КонтрагентДляЗачетаАванса",СтруктураТекущихСостояний.КонтрагентДляЗачетаАванса);
		СтруктураПоиска.Вставить("ДоговорКонтрагентаДляЗачетаАванса",СтруктураТекущихСостояний.ДоговорКонтрагентаДляЗачетаАванса);
		СтруктураПоиска.Вставить("СоглашениеДляЗачетаАванса",СтруктураТекущихСостояний.СоглашениеДляЗачетаАванса);
		СтруктураПоиска.Вставить("КлиентДляЗачетаАванса",СтруктураТекущихСостояний.КлиентДляЗачетаАванса);
	КонецЕсли;
	
	Если СтруктураТекущихСостояний.ВидДокумента = "УчетАлкоголяПиво" Тогда
		СтруктураПоиска.Вставить("АналитикаКодАкциза",СтруктураТекущихСостояний.АналитикаКодАкциза);
	КонецЕсли;
	
	СтрокиСоответствия = ТаблицаСоответствияРегистратораИДокумента.НайтиСтроки(СтруктураПоиска);
	
	Возврат СтрокиСоответствия;
	
КонецФункции

// СОЗДАНИЕ И ЗАПОЛНЕНИЕ ДОКУМЕНТОВ

// Возвращает заполненные данные объекта
Процедура ЗаполнитьДанныеОбъекта(ВыборкаСклад)
	ВыборкаНоменклатуры = ВыборкаСклад.Выбрать();
	
	// Заполним общие реквизиты шапки
	
	// Организация берется в зависимости от настройки в кассовом узле.
	// Либо из КУ, либо из КассыККМ.
	НайденныеКассы = ПараметрыКасс.НайтиСтроки(Новый Структура("КассаККМ", СтруктураТекущихСостояний.КассаККМ));
	Если НайденныеКассы.Количество() Тогда
		НайденнаяКасса = НайденныеКассы[0];
		Если НайденнаяКасса.ОрганизацияЦелевыхДокументовИзКассыККМ = Истина Тогда
			ДанныеОбъекта.Организация = НайденнаяКасса.Организация;
		Иначе
			ДанныеОбъекта.Организация = НайденнаяКасса.ОрганизацияКассовогоУзла;
		КонецЕсли;
	ИначеЕсли СтруктураТекущихСостояний.Свойство("Организация") Тогда
		ДанныеОбъекта.Организация = СтруктураТекущихСостояний.Организация;
	Иначе
		ДанныеОбъекта.Организация = Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
	
	ДанныеОбъекта.Подразделение = СтруктураТекущихСостояний.Подразделение;
	ДанныеОбъекта.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	
	// Найдем соответствия между регистраторами и целевыми документами
	СтрокиСоответствия = ВернутьСтрокиСоответствияПоСтруктуреТекущегоСостояния();
	
	СтрокаСоответствий = СтрокиСоответствия[0];
	
	Если ГруппироватьПоНомеруСмены Тогда
		ДанныеОбъекта.КассаККМ = СтруктураТекущихСостояний.КассаККМ;
		ДанныеОбъекта.НомерСмены = СтруктураТекущихСостояний.НомерСмены;
		//+группировка по дате смены
		ДанныеОбъекта.ДатаСмены = СтруктураТекущихСостояний.ДатаСмены;
	Иначе
		ДанныеОбъекта.КассаККМ = СтрокаСоответствий.ДокументРегистратор.КассаККМ;
	КонецЕсли;
	ДанныеОбъекта.ВалютаУчета			= СтрокаСоответствий.ДокументРегистратор.ВалютаДокумента;
	Если Не ЗначениеЗаполнено(ДанныеОбъекта.ВалютаУчета) Тогда
		ДанныеОбъекта.ВалютаУчета =  Константы.ВалютаРегламентированногоУчета.Получить();
	КонецЕсли;
	
	// << MRS #ERP-5021 ДенисламовАД <Adel.Denislamov@mriyaresort.com> 14.04.25, ()
	// определение вида цен
	Если СтруктураТекущихСостояний.Свойство("СкладРеализации") Тогда
		Стр = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтруктураТекущихСостояний.СкладРеализации, "РозничныйВидЦены, РозничныйВидЦены.ЦенаВключаетНДС");
		Если ЗначениеЗаполнено(Стр.РозничныйВидЦены) Тогда
			ДанныеОбъекта.ТипЦен = Стр.РозничныйВидЦены;
			//ДанныеОбъекта.ЦенаВключаетНДС = Стр.РозничныйВидЦеныЦенаВключаетНДС;
		Иначе
			ДанныеОбъекта.ТипЦен = Константы.питНормативнаяЦена.Получить();
		КонецЕсли;
	Иначе
		ДанныеОбъекта.ТипЦен = Константы.питНормативнаяЦена.Получить();  // исходная строка
	КонецЕсли;
	// >> MRS #ERP-5021 ДенисламовАД <Adel.Denislamov@mriyaresort.com> 14.04.25, ()
		
	// Запишем комментарий, массив оснований
	ТекстКомментария = "Создан в результате загрузки из документов чеки общепита: ";
	Для Каждого СтрокаСоответствия Из СтрокиСоответствия Цикл
		// Добавим регистратор в массив оснований
		Если ДанныеОбъекта.МассивОснований.Найти(СтрокаСоответствия.ДокументРегистратор) = Неопределено Тогда
			ДанныеОбъекта.МассивОснований.Добавить(СтрокаСоответствия.ДокументРегистратор);
			// Добавим регистратор в текст комментария
			ТекстКомментария = ТекстКомментария + СтрокаСоответствия.ДокументРегистратор.Номер + " от " + СтрокаСоответствия.ДокументРегистратор.Дата + ", ";	
		КонецЕсли;
	КонецЦикла;
	ТекстКомментария = Лев(ТекстКомментария,СтрДлина(ТекстКомментария)-2) + ".";
	ДанныеОбъекта.Комментарий = ТекстКомментария;
	
	// Установим дату в соответствии с настройками
	Если ДатаЦелевыхДокументов = 2 Тогда
		ДанныеОбъекта.Дата = ?(НЕ ЗначениеЗаполнено(ФиксированнаяДата),ТекущаяДата(),ФиксированнаяДата);
	Иначе
		ДатаДляУстановки = СтрокиСоответствия[0].ДокументРегистратор.Дата;
		Для Каждого СтрокаСоответствия Из СтрокиСоответствия Цикл
			ДокументОснование = СтрокаСоответствия.ДокументРегистратор;
			Если ДатаЦелевыхДокументов = 0 И ДатаДляУстановки > ДокументОснование.Дата ИЛИ
			ДатаЦелевыхДокументов = 1 И ДатаДляУстановки < ДокументОснование.Дата Тогда
				ДатаДляУстановки = ДокументОснование.Дата;	
			КонецЕсли;
		КонецЦикла;
		ДанныеОбъекта.Дата = ДатаДляУстановки;
	КонецЕсли;
	
	СуммаВычета = 0;
	// Заполним специфические данные для каждого типа
	Если СтруктураТекущихСостояний.ВидДокумента = "СписаниеТоваров" Тогда
		
		ДанныеОбъекта.ВидОперации			= Перечисления.ХозяйственныеОперации.СписаниеТоваровПоТребованию;
		ДанныеОбъекта.СкладРеализации		= СтруктураТекущихСостояний.СкладРеализации;
		ДанныеОбъекта.СтатьяСписанияТМЦ		= СтруктураТекущихСостояний.СтатьяСписанияТМЦ;
		ДанныеОбъекта.АналитикаСписанияТМЦ	= СтруктураТекущихСостояний.АналитикаСписанияТМЦ;
		
		// Заполним таблицу товаров и модификаторов
		Пока ВыборкаНоменклатуры.Следующий() Цикл
			НоваяСтрока = ДанныеОбъекта.Товары.Добавить();
			НоваяСтрока.Номенклатура = ВыборкаНоменклатуры.Номенклатура;
			НоваяСтрока.Характеристика = ВыборкаНоменклатуры.Характеристика;
			НоваяСтрока.Серия = ВыборкаНоменклатуры.Серия;
			НоваяСтрока.СтатусУказанияСерий = ВыборкаНоменклатуры.СтатусУказанияСерий;
			НоваяСтрока.Количество = ВыборкаНоменклатуры.КоличествоПоКоэффициенту;
			НоваяСтрока.ЕдиницаИзмерения = ВыборкаНоменклатуры.Номенклатура.ЕдиницаИзмерения;
			НоваяСтрока.Коэффициент = 1;
			НоваяСтрока.КоэффициентДеления = 1;
		КонецЦикла;
		ДанныеОбъекта.Товары.Свернуть("Номенклатура,Характеристика,Серия,СтатусУказанияСерий,ЕдиницаИзмерения,Коэффициент,КоэффициентДеления,СтавкаНДС,Сумма,ИдентификаторСтроки", "Количество");
		//Заполним модификаторы
		Для Каждого ВыборкаНоменклатуры Из ДанныеОбъекта.Товары Цикл
			ЗаполнитьМодификаторыДляНоменклатуры(ВыборкаНоменклатуры, СуммаВычета, ВыборкаНоменклатуры.КоэффициентДеления);
		КонецЦикла;
		
	ИначеЕсли СтруктураТекущихСостояний.ВидДокумента = "АктОРеализации" Тогда
		//ДанныеОбъекта.ВидОперации			= Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетККМОПродажах;
		ДанныеОбъекта.СкладПриготовления	= СтруктураТекущихСостояний.СкладПриготовления;
		ДанныеОбъекта.СкладРеализации		= СтруктураТекущихСостояний.СкладРеализации;
		ДанныеОбъекта.НомерСмены			= СтрокаСоответствий.ДокументРегистратор.НомерСмены;
		//+группировка по дате смены
		ДанныеОбъекта.ДатаСмены				= СтрокаСоответствий.ДокументРегистратор.ДатаСмены;
		// Флаг отложенные оплаты
		//Если ЗначениеЗаполнено(ДанныеОбъекта.КассаККМ) И ЗначениеЗаполнено(ДанныеОбъекта.КассаККМ.питКассовыйУзел) Тогда
		//	ДанныеОбъекта.ОтложитьОплату = ДанныеОбъекта.КассаККМ.питКассовыйУзел.ОтложитьОплату;
		//Иначе
		//	ДанныеОбъекта.ОтложитьОплату = питОбщегоНазначенияСервер.ПолучитьЗначениеПоУмолчанию("ОтложитьОплату");
		//КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеОбъекта.СкладРеализации) И ЗначениеЗаполнено(ДанныеОбъекта.СкладРеализации.УчетныйВидЦены) Тогда
			// для розницы берем тип цен из реквизита склада.
			ДанныеОбъекта.ТипЦен = ДанныеОбъекта.СкладРеализации.УчетныйВидЦены;
		КонецЕсли;
		
		// Заполним таблицу товаров и модификаторов
		Пока ВыборкаНоменклатуры.Следующий() Цикл
			НоваяСтрока = ДанныеОбъекта.Товары.Добавить();
			НоваяСтрока.Номенклатура = ВыборкаНоменклатуры.Номенклатура;
			НоваяСтрока.Характеристика = ВыборкаНоменклатуры.Характеристика;
			НоваяСтрока.Серия = ВыборкаНоменклатуры.Серия;
			НоваяСтрока.СтатусУказанияСерий = ВыборкаНоменклатуры.СтатусУказанияСерий;
			// +КоэффициентДеления2
			НоваяСтрока.Количество = ВыборкаНоменклатуры.КоличествоПоКоэффициенту;
			// -КоэффициентДеления2
			НоваяСтрока.ЕдиницаИзмерения = ВыборкаНоменклатуры.Номенклатура.ЕдиницаИзмерения;
			НоваяСтрока.Коэффициент = 1;
			// +КоэффициентДеления2
			НоваяСтрока.Сумма = ВыборкаНоменклатуры.СуммаПоКоэффициенту;
			НоваяСтрока.СуммаНДС = ВыборкаНоменклатуры.СуммаНДСПоКоэффициенту;
			// -КоэффициентДеления2
			НоваяСтрока.СтавкаНДС = ВыборкаНоменклатуры.СтавкаНДС;
			// +КоэффициентДеления2
			НоваяСтрока.СуммаРучнойСкидки	= ВыборкаНоменклатуры.СуммаСкидкиПоКоэффициенту;
			// -КоэффициентДеления2
			//+КоэффициентДеления
			//Если НоваяСтрока.Сумма + НоваяСтрока.СуммаРучнойСкидки = 0 Тогда
			//	НоваяСтрока.ПроцентРучнойСкидки = 0;
			//Иначе
			//	НоваяСтрока.ПроцентРучнойСкидки	= (НоваяСтрока.СуммаРучнойСкидки / (НоваяСтрока.Сумма + НоваяСтрока.СуммаРучнойСкидки)) * 100;
			//КонецЕсли;
			//НоваяСтрока.КоэффициентДеления = ВыборкаНоменклатуры.КоэффициентДеления;
			НоваяСтрока.КоэффициентДеления = 1;
			//-КоэффициентДеления
		КонецЦикла;
		//+КоэффициентДеления
		ДанныеОбъекта.Товары.Свернуть("ИдентификаторСтроки,Номенклатура,Характеристика,Серия,СтатусУказанияСерий,ЕдиницаИзмерения,Коэффициент,СтавкаНДС,ПроцентРучнойСкидки,КоэффициентДеления", "КоличествоЧеков,Количество,Сумма,СуммаНДС,СуммаРучнойСкидки");
		//ДанныеОбъекта.Товары.Свернуть("ИдентификаторСтроки,Номенклатура,Характеристика,Серия,СтатусУказанияСерий,ЕдиницаИзмерения,Коэффициент,СтавкаНДС,ПроцентРучнойСкидки", "КоэффициентДеления,КоличествоЧеков,Количество,Сумма,СуммаНДС,СуммаРучнойСкидки");
		//+КоэффициентДеления
		//Заполним модификаторы
		Для Каждого ВыборкаНоменклатуры Из ДанныеОбъекта.Товары Цикл
			ЗаполнитьМодификаторыДляНоменклатуры(ВыборкаНоменклатуры, СуммаВычета, ВыборкаНоменклатуры.КоэффициентДеления);
			СуммаВычета = СуммаВычета + ВычестьВозвратыИзТоваров(ВыборкаНоменклатуры, ВыборкаНоменклатуры.КоэффициентДеления);
		КонецЦикла;
		
		// Заполним таблицу оплаты, распределяя ее пропорционально общей товарной сумме
		ЗаполнитьТаблицуОплатДанныхОбъекта();
		
		ЗаполнитьТаблицуНачисленныхБонусовДанныхОбъекта();
		
		// Вычтем возвраты из оплат
		ВычестьВозвратыИзОплат(СуммаВычета);
	ИначеЕсли СтруктураТекущихСостояний.ВидДокумента = "ВыпускСРозничнойРеализацией" 
		Или СтруктураТекущихСостояний.ВидДокумента = "ВыпускСРеализацией" Тогда
			
		Если СтруктураТекущихСостояний.ВидДокумента = "ВыпускСРеализацией" Тогда 
			ДанныеОбъекта.Контрагент = СтруктураТекущихСостояний.КонтрагентДляЗачетаАванса;
			ДанныеОбъекта.Договор = СтруктураТекущихСостояний.ДоговорКонтрагентаДляЗачетаАванса;
			ДанныеОбъекта.Партнер = СтруктураТекущихСостояний.КлиентДляЗачетаАванса;
			ДанныеОбъекта.Соглашение = СтруктураТекущихСостояний.СоглашениеДляЗачетаАванса;
			ДанныеОбъекта.ВидОперации = Перечисления.питХозяйственныеОперации.ВыпускПродукцииСРеализацией;
		Иначе 
			ДанныеОбъекта.ВидОперации			= Перечисления.питХозяйственныеОперации.ВыпускПродукцииСРозничнойРеализацией;
		КонецЕсли;
		
		ДанныеОбъекта.СкладПриготовления	= СтруктураТекущихСостояний.СкладПриготовления;
		ДанныеОбъекта.СкладРеализации		= СтруктураТекущихСостояний.СкладРеализации;
		
		// Получим строку параметров касс
		СтрокаПараметров = ПараметрыКасс.Найти(ДанныеОбъекта.КассаККМ,"КассаККМ");
		
		// Производственные реквизиты
		ДанныеОбъекта.УчитыватьОстаткиБлюдНаСкладе 	= СтрокаПараметров.УчитыватьОстаткиБлюдНаСкладе;
		ДанныеОбъекта.РазрешитьНедовложения			= СтрокаПараметров.РазрешитьНедовложения;
		// Флаг отложенные оплаты
		Если ЗначениеЗаполнено(ДанныеОбъекта.КассаККМ) И ЗначениеЗаполнено(ДанныеОбъекта.КассаККМ.питКассовыйУзел) Тогда
			ДанныеОбъекта.ОтложитьОплату = ДанныеОбъекта.КассаККМ.питКассовыйУзел.ОтложитьОплату;
		Иначе
			ДанныеОбъекта.ОтложитьОплату = питОбщегоНазначенияСервер.ПолучитьЗначениеПоУмолчанию("ОтложитьОплату");
		КонецЕсли;
		
		//<< Портал-Юг, Баринов, 2019.08.15 [9.09 Обособление продаж по открытой цене]
		ДанныеОбъекта.ПЛ_Номенклатура = СтруктураТекущихСостояний.ПЛ_НоменклатураОткрытаяЦена;
		//>> Портал-Юг, Баринов, 2019.08.15
		
		// Заполним таблицу товаров и модификаторов
		Пока ВыборкаНоменклатуры.Следующий() Цикл
			НоваяСтрока = ДанныеОбъекта.Товары.Добавить();
			НоваяСтрока.Номенклатура = ВыборкаНоменклатуры.Номенклатура;
			НоваяСтрока.Характеристика = ВыборкаНоменклатуры.Характеристика;
			НоваяСтрока.СтатусУказанияСерий = ВыборкаНоменклатуры.СтатусУказанияСерий;
			//+КоэффициентДеления2
			НоваяСтрока.Количество = ВыборкаНоменклатуры.КоличествоПоКоэффициенту;
			//-КоэффициентДеления2	
			НоваяСтрока.ЕдиницаИзмерения = ВыборкаНоменклатуры.Номенклатура.ЕдиницаИзмерения;
			НоваяСтрока.Коэффициент = 1;
			//<<Портал-Юг, Давиденко 2019.03.26 [4.2.9 Особенности заполнения выпуска блюд по чекам]
			НоваяСтрока.ПЛ_Договор = ВыборкаНоменклатуры.ПЛ_Договор;
			//<< Портал-Юг, Баринов, 2019.08.15 [9.09 Обособление продаж по открытой цене]
			//НоваяСтрока.ПЛ_НоменклатураОткрытаяЦена = ВыборкаНоменклатуры.ПЛ_НоменклатураОткрытаяЦена;
			//>> Портал-Юг, Баринов, 2019.08.15 
			//<< Портал-Юг, Баринов, 2019.07.28 [4.2.9 Особенности заполнения выпуска блюд по чекам] 
			// Не сворачиваем строки в отдельном выпуске без рецептур
			//<< Портал-Юг, Баринов, 2019.08.15 [9.09 Обособление продаж по открытой цене]
			//Если НоваяСтрока.ПЛ_ОтдельныйВыпускБезРецептур Тогда 
			Если ЗначениеЗаполнено(ДанныеОбъекта.ПЛ_Номенклатура) Тогда 
			//>> Портал-Юг, Баринов, 2019.08.15
				НоваяСтрока.ПЛ_ИДСтроки = Строка(Новый УникальныйИдентификатор);
			КонецЕсли;	
			//>> Портал-Юг, Баринов, 2019.07.28
			//>>Портал-Юг, Давиденко 2019.03.26
			
			//>>Швецов. 15.01.2025 Розничные продажи алкоголя.Реквизиты для соответсвия
			НоваяСтрока.НомерЧека = ВыборкаНоменклатуры.НомерЧека;
			НоваяСтрока.ДатаЧека = ВыборкаНоменклатуры.ДатаЧека;
			//>>Швецов. 15.01.2025 Розничные продажи алкоголя.Реквизиты для соответсвия
			
			//+КоэффициентДеления2
			НоваяСтрока.Сумма = ВыборкаНоменклатуры.СуммаПоКоэффициенту;
			НоваяСтрока.СуммаНДС = ВыборкаНоменклатуры.СуммаНДСПоКоэффициенту;
			//-КоэффициентДеления2
			НоваяСтрока.СтавкаНДС = ВыборкаНоменклатуры.СтавкаНДС;
			//+КоэффициентДеления2
			НоваяСтрока.СуммаРучнойСкидки	= ВыборкаНоменклатуры.СуммаСкидкиПоКоэффициенту;
			//-КоэффициентДеления2
			//+КоэффициентДеления
			//Если НоваяСтрока.Сумма + НоваяСтрока.СуммаРучнойСкидки = 0 Тогда
			//	НоваяСтрока.ПроцентРучнойСкидки = 0;
			//Иначе
			//	НоваяСтрока.ПроцентРучнойСкидки	= (НоваяСтрока.СуммаРучнойСкидки / (НоваяСтрока.Сумма + НоваяСтрока.СуммаРучнойСкидки)) * 100;
			//КонецЕсли;
			//НоваяСтрока.КоэффициентДеления = ВыборкаНоменклатуры.КоэффициентДеления;
			НоваяСтрока.КоэффициентДеления = 1;
			//-КоэффициентДеления
			
			//>>Швецов. 15.01.2025 Розничные продажи алкоголя.Реквизиты для соответсвия
			АлкогольнаяПродукция =  ВыборкаНоменклатуры.Номенклатура.АлкогольнаяПродукция И НЕ ВыборкаНоменклатуры.Номенклатура.АлкогольнаяПродукцияВоВскрытойТаре И НЕ ВыборкаНоменклатуры.Номенклатура.ВидАлкогольнойПродукции.ВидЛицензии = Перечисления.ВидыЛицензийАлкогольнойПродукции.Пиво;
		
			Если АлкогольнаяПродукция Тогда
				
				//нужно найти проданную марку
				РезультатПоЧеку = MRS_ЗагрузкаЕГАИСФронт.ПолучитьАкцизнуюМаркуПоНомеруЧека(ВыборкаНоменклатуры.НомерЧека, ВыборкаНоменклатуры.ДатаЧека, ВыборкаНоменклатуры.Номенклатура);

				ВыборкаОбщийИтог = РезультатПоЧеку.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); 
				
				ВыборкаОбщийИтог.Следующий(); 
				
				КоличествоИтого = ВыборкаОбщийИтог.Количество;
				
				ВыборкаСерийПоНомеруЧека = ВыборкаОбщийИтог.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); //разные акцизы по одной номенклатуре в чеках
				
				КоличествоВыборки = ВыборкаСерийПоНомеруЧека.Количество();
				
				Пока ВыборкаСерийПоНомеруЧека.Следующий() Цикл

					Если КоличествоВыборки = 1 Тогда
						
						НоваяСтрока.Серия = ВыборкаСерийПоНомеруЧека.Серия;	
						
						НоваяСтрокаСерия 				= ДанныеОбъекта.Серии.Добавить();
						НоваяСтрокаСерия.Номенклатура	= ВыборкаНоменклатуры.Номенклатура;
						НоваяСтрокаСерия.Количество		= ВыборкаНоменклатуры.КоличествоПоКоэффициенту;
						НоваяСтрокаСерия.Серия          = ВыборкаСерийПоНомеруЧека.Серия
						
					ИначеЕсли КоличествоВыборки > 1 Тогда
						
						КоличествоПоКнопке = ВыборкаНоменклатуры.КоличествоПоКоэффициенту;

						ВыборкаСтроки = ВыборкаСерийПоНомеруЧека.Выбрать();
						КоличествоСтрокВыборки = ВыборкаСтроки.Количество(); 
					
						КоличествоПоСериям = КоличествоПоКнопке * КоличествоСтрокВыборки / КоличествоИтого;
					
						ВыборкаСтроки.Следующий();
						НоваяСтрока.Серия = ВыборкаСтроки.Серия;
						
						НоваяСтрокаСерия 				= ДанныеОбъекта.Серии.Добавить();
						НоваяСтрокаСерия.Номенклатура	= ВыборкаНоменклатуры.Номенклатура;
						НоваяСтрокаСерия.Количество		= КоличествоПоСериям;
						НоваяСтрокаСерия.Серия          = ВыборкаСерийПоНомеруЧека.Серия
						
					КонецЕсли;
					
				КонецЦикла;
				
			Иначе
				
				НоваяСтрока.Серия = ВыборкаНоменклатуры.Серия;
			
			КонецЕсли;	
	        //<<Швецов. 15.01.2025 Розничные продажи алкоголя.Реквизиты для соответсвия
			
		КонецЦикла;
		//+КоэффициентДеления 
		//<<Портал-Юг, Давиденко 2019.03.26 [4.2.9 Особенности заполнения выпуска блюд по чекам]		
		//ДанныеОбъекта.Товары.Свернуть("ИдентификаторСтроки,Номенклатура,Характеристика,Серия,СтатусУказанияСерий,ЕдиницаИзмерения,Коэффициент,СтавкаНДС,ПроцентРучнойСкидки,КоэффициентДеления", "Количество,Сумма,СуммаНДС,СуммаРучнойСкидки");
		ДанныеОбъекта.Товары.Свернуть("ИдентификаторСтроки,Номенклатура,Характеристика,Серия,СтатусУказанияСерий,ЕдиницаИзмерения,Коэффициент,СтавкаНДС,ПроцентРучнойСкидки,КоэффициентДеления,ПЛ_Договор,ПЛ_ИДСтроки", "Количество,Сумма,СуммаНДС,СуммаРучнойСкидки");
		//>>Портал-Юг, Давиденко 2019.03.26 
		//ДанныеОбъекта.Товары.Свернуть("ИдентификаторСтроки,Номенклатура,Характеристика,Серия,СтатусУказанияСерий,ЕдиницаИзмерения,Коэффициент,СтавкаНДС,ПроцентРучнойСкидки", "КоэффициентДеления,Количество,Сумма,СуммаНДС,СуммаРучнойСкидки");
		//-КоэффициентДеления
		//Заполним модификаторы
		Для Каждого ВыборкаНоменклатуры Из ДанныеОбъекта.Товары Цикл
			ЗаполнитьМодификаторыДляНоменклатуры(ВыборкаНоменклатуры, СуммаВычета, ВыборкаНоменклатуры.КоэффициентДеления);
			СуммаВычета = СуммаВычета + ВычестьВозвратыИзТоваров(ВыборкаНоменклатуры, ВыборкаНоменклатуры.КоэффициентДеления);
		КонецЦикла;

		//<< Портал-Юг, Баринов, 2019.09.14 [9.33 Уменьшение продаж на возвраты по открытой цене при формировании выпусков блюд]
		СуммаВычета = СуммаВычета + РаспределитьВозвратыПоПродажам(ДанныеОбъекта.Товары);
		//>> Портал-Юг, Баринов, 2019.09.14
		
		// Заполним таблицу оплаты, распределяя ее пропорционально общей товарной сумме
		//>> Швецов. 03.07.25. Переопределим логику процедуры
		//ЗаполнитьТаблицуОплатДанныхОбъекта();
		MRS_ЗаполнитьТаблицуОплатДанныхОбъекта();
		//<< Швецов. 03.07.25.
		
		ЗаполнитьТаблицуНачисленныхБонусовДанныхОбъекта();
		
		// Вычтем возвраты из оплат
		ВычестьВозвратыИзОплат(СуммаВычета);
	ИначеЕсли СтруктураТекущихСостояний.ВидДокумента = "ВыпускСоСписанием" Тогда
		
		ДанныеОбъекта.ВидОперации			= Перечисления.питХозяйственныеОперации.ВыпускПродукцииСоСписанием;
		ДанныеОбъекта.СкладПриготовления	= СтруктураТекущихСостояний.СкладПриготовления;
		ДанныеОбъекта.СтатьяСписанияТМЦ 	= СтруктураТекущихСостояний.СтатьяСписанияТМЦ;
		ДанныеОбъекта.АналитикаСписанияТМЦ 	= СтруктураТекущихСостояний.АналитикаСписанияТМЦ;
		
		// Получим строку параметров касс
		СтрокаПараметров = ПараметрыКасс.Найти(ДанныеОбъекта.КассаККМ,"КассаККМ");
		
		// Производственные реквизиты
		ДанныеОбъекта.УчитыватьОстаткиБлюдНаСкладе 	= СтрокаПараметров.УчитыватьОстаткиБлюдНаСкладе;
		ДанныеОбъекта.РазрешитьНедовложения			= СтрокаПараметров.РазрешитьНедовложения;
		// Флаг отложенные оплаты
		Если ЗначениеЗаполнено(ДанныеОбъекта.КассаККМ) И ЗначениеЗаполнено(ДанныеОбъекта.КассаККМ.питКассовыйУзел) Тогда
			ДанныеОбъекта.ОтложитьОплату = ДанныеОбъекта.КассаККМ.питКассовыйУзел.ОтложитьОплату;
		Иначе
			ДанныеОбъекта.ОтложитьОплату = питОбщегоНазначенияСервер.ПолучитьЗначениеПоУмолчанию("ОтложитьОплату");
		КонецЕсли;
		
		// Заполним таблицу товаров и модификаторов
		Пока ВыборкаНоменклатуры.Следующий() Цикл
			НоваяСтрока = ДанныеОбъекта.Товары.Добавить();
			НоваяСтрока.Номенклатура = ВыборкаНоменклатуры.Номенклатура;
			НоваяСтрока.Характеристика = ВыборкаНоменклатуры.Характеристика;
			НоваяСтрока.Серия = ВыборкаНоменклатуры.Серия;
			НоваяСтрока.СтатусУказанияСерий = ВыборкаНоменклатуры.СтатусУказанияСерий;
			//+КоэффициентДеления2
			НоваяСтрока.Количество = ВыборкаНоменклатуры.КоличествоПоКоэффициенту;
			//-КоэффициентДеления2
			НоваяСтрока.ЕдиницаИзмерения = ВыборкаНоменклатуры.Номенклатура.ЕдиницаИзмерения;
			НоваяСтрока.Коэффициент = 1;
			//+КоэффициентДеления2
			НоваяСтрока.Сумма = ВыборкаНоменклатуры.СуммаПоКоэффициенту;
			НоваяСтрока.СуммаНДС = ВыборкаНоменклатуры.СуммаНДСПоКоэффициенту;
			//-КоэффициентДеления2
			НоваяСтрока.СтавкаНДС = ВыборкаНоменклатуры.СтавкаНДС;
			//+КоэффициентДеления
			//НоваяСтрока.КоэффициентДеления = ВыборкаНоменклатуры.КоэффициентДеления;
			НоваяСтрока.КоэффициентДеления = 1;
			//-КоэффициентДеления
		КонецЦикла;
		//+КоэффициентДеления
		ДанныеОбъекта.Товары.Свернуть("ИдентификаторСтроки,Номенклатура,Характеристика,Серия,СтатусУказанияСерий,ЕдиницаИзмерения,Коэффициент,СтавкаНДС,КоэффициентДеления", "Количество,Сумма,СуммаНДС,СуммаРучнойСкидки");
		//ДанныеОбъекта.Товары.Свернуть("ИдентификаторСтроки,Номенклатура,Характеристика,Серия,СтатусУказанияСерий,ЕдиницаИзмерения,Коэффициент,СтавкаНДС", "КоэффициентДеления,Количество,Сумма,СуммаНДС,СуммаРучнойСкидки");
		//-КоэффициентДеления
		//Заполним модификаторы
		Для Каждого ВыборкаНоменклатуры Из ДанныеОбъекта.Товары Цикл
			ЗаполнитьМодификаторыДляНоменклатуры(ВыборкаНоменклатуры, СуммаВычета, ВыборкаНоменклатуры.КоэффициентДеления);
		КонецЦикла;
		
	ИначеЕсли СтруктураТекущихСостояний.ВидДокумента = "ВыпускСПеремещением" Тогда
		
		ДанныеОбъекта.ВидОперации			= Перечисления.питХозяйственныеОперации.ВыпускПродукцииСПеремещением;
		ДанныеОбъекта.СкладПриготовления	= СтруктураТекущихСостояний.СкладПриготовления;
		ДанныеОбъекта.СкладРеализации		= СтруктураТекущихСостояний.СкладРеализации;
		
		// Получим строку параметров касс
		СтрокаПараметров = ПараметрыКасс.Найти(ДанныеОбъекта.КассаККМ,"КассаККМ");
		
		// Производственные реквизиты
		ДанныеОбъекта.УчитыватьОстаткиБлюдНаСкладе 	= СтрокаПараметров.УчитыватьОстаткиБлюдНаСкладе;
		ДанныеОбъекта.РазрешитьНедовложения			= СтрокаПараметров.РазрешитьНедовложения;
		// Флаг отложенные оплаты
		Если ЗначениеЗаполнено(ДанныеОбъекта.КассаККМ) И ЗначениеЗаполнено(ДанныеОбъекта.КассаККМ.питКассовыйУзел) Тогда
			ДанныеОбъекта.ОтложитьОплату = ДанныеОбъекта.КассаККМ.питКассовыйУзел.ОтложитьОплату;
		Иначе
			ДанныеОбъекта.ОтложитьОплату = питОбщегоНазначенияСервер.ПолучитьЗначениеПоУмолчанию("ОтложитьОплату");
		КонецЕсли;
		
		// Заполним таблицу товаров и модификаторов
		Пока ВыборкаНоменклатуры.Следующий() Цикл
			//Если Не СтрокаПараметров.ЗагружатьТоварыВВыпускСПеремещением И ВыборкаНоменклатуры.Номенклатура.питВидНоменклатуры = Перечисления.питВидыНоменклатуры.Товар Тогда
			Если ВыборкаНоменклатуры.Номенклатура.питВидНоменклатуры = Перечисления.питВидыНоменклатуры.Товар Тогда
				Продолжить;
			КонецЕсли;
			
			НайденныеДанныеОбъекта = ДанныеОбъекта.Товары.НайтиСтроки(Новый Структура("Номенклатура, Характеристика,Серия", ВыборкаНоменклатуры.Номенклатура, ВыборкаНоменклатуры.Характеристика, ВыборкаНоменклатуры.Серия));
			ДубльНоменклатуры = НайденныеДанныеОбъекта.Количество();
			
			// модификаторы отдельно
			НоваяСтрока = ДанныеОбъекта.Товары.Добавить();
			НоваяСтрока.Номенклатура = ВыборкаНоменклатуры.Номенклатура;
			НоваяСтрока.Характеристика = ВыборкаНоменклатуры.Характеристика;
			НоваяСтрока.Серия = ВыборкаНоменклатуры.Серия;
			НоваяСтрока.СтатусУказанияСерий = ВыборкаНоменклатуры.СтатусУказанияСерий;
			//+КоэффициентДеления2
			НоваяСтрока.Количество = ВыборкаНоменклатуры.КоличествоПоКоэффициенту;
			//-КоэффициентДеления2
			НоваяСтрока.ЕдиницаИзмерения = ВыборкаНоменклатуры.Номенклатура.ЕдиницаИзмерения;
			НоваяСтрока.Коэффициент = 1;
			//+КоэффициентДеления2
			НоваяСтрока.Сумма = ВыборкаНоменклатуры.СуммаПоКоэффициенту;
			НоваяСтрока.СуммаНДС = ВыборкаНоменклатуры.СуммаНДСПоКоэффициенту;
			//-КоэффициентДеления2
			НоваяСтрока.СтавкаНДС = ВыборкаНоменклатуры.СтавкаНДС;
			//+КоэффициентДеления
			//НоваяСтрока.КоэффициентДеления = ВыборкаНоменклатуры.КоэффициентДеления;
			НоваяСтрока.КоэффициентДеления = 1;
			//-КоэффициентДеления
		КонецЦикла;
		//+КоэффициентДеления
		ДанныеОбъекта.Товары.Свернуть("ИдентификаторСтроки,Номенклатура,Характеристика,Серия,СтатусУказанияСерий,ЕдиницаИзмерения,Коэффициент,СтавкаНДС,КоэффициентДеления", "Количество,Сумма,СуммаНДС");
		//ДанныеОбъекта.Товары.Свернуть("ИдентификаторСтроки,Номенклатура,Характеристика,Серия,СтатусУказанияСерий,ЕдиницаИзмерения,Коэффициент,СтавкаНДС", "КоэффициентДеления,Количество,Сумма,СуммаНДС");
		//-КоэффициентДеления
		//Заполним модификаторы
		Для Каждого ВыборкаНоменклатуры Из ДанныеОбъекта.Товары Цикл
			ЗаполнитьМодификаторыДляНоменклатуры(ВыборкаНоменклатуры, СуммаВычета, ВыборкаНоменклатуры.КоэффициентДеления);
		КонецЦикла;
		
	ИначеЕсли СтруктураТекущихСостояний.ВидДокумента = "ВозвратОтПокупателя" Тогда
		ДанныеОбъекта.ВидОперации			= Перечисления.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя;
		ДанныеОбъекта.СкладРеализации		= СтруктураТекущихСостояний.СкладРеализации;
		
		//ДанныеОбъекта.Контрагент = СтруктураТекущихСостояний.КонтрагентДляЗачетаАванса;
		//ДанныеОбъекта.Договор = СтруктураТекущихСостояний.ДоговорКонтрагентаДляЗачетаАванса;
		//ДанныеОбъекта.Партнер = СтруктураТекущихСостояний.КлиентДляЗачетаАванса;
		//ДанныеОбъекта.Соглашение = СтруктураТекущихСостояний.СоглашениеДляЗачетаАванса;
		
		// Заполним таблицу товаров и модификаторов
		Пока ВыборкаНоменклатуры.Следующий() Цикл
			НайденныеДанныеОбъекта = ДанныеОбъекта.Товары.НайтиСтроки(Новый Структура("Номенклатура, Характеристика, Серия", ВыборкаНоменклатуры.Номенклатура, ВыборкаНоменклатуры.Характеристика, ВыборкаНоменклатуры.Серия));
			ДубльНоменклатуры = НайденныеДанныеОбъекта.Количество();
			
			//<< Портал-Юг, Баринов, 2019.09.15 [9.33 Уменьшение продаж на возвраты по открытой цене при формировании выпусков блюд]
			// В возврат имеет смысл включать только товары. Услуги и работы не будут отражены корректно, пусть сразу будет видно расхождение.
			Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыборкаНоменклатуры.Номенклатура, "ТипНоменклатуры") <> Перечисления.ТипыНоменклатуры.Товар Тогда
				// Да, просто игнорируем.
				Продолжить;
			КонецЕсли;
			//>> Портал-Юг, Баринов, 2019.09.15
			
			НоваяСтрока = ДанныеОбъекта.Товары.Добавить();
			НоваяСтрока.Номенклатура = ВыборкаНоменклатуры.Номенклатура;
			НоваяСтрока.Характеристика = ВыборкаНоменклатуры.Характеристика;
			НоваяСтрока.Серия = ВыборкаНоменклатуры.Серия;
			НоваяСтрока.СтатусУказанияСерий = ВыборкаНоменклатуры.СтатусУказанияСерий;
			//+КоэффициентДеления2
			НоваяСтрока.Количество = ВыборкаНоменклатуры.КоличествоПоКоэффициенту;
			НоваяСтрока.КоличествоУпаковок = ВыборкаНоменклатуры.КоличествоПоКоэффициенту;
			//-КоэффициентДеления2
			НоваяСтрока.ЕдиницаИзмерения = НоваяСтрока.Номенклатура.ЕдиницаИзмерения;
			НоваяСтрока.Коэффициент = 1;
			//+КоэффициентДеления2
			НоваяСтрока.Сумма = ВыборкаНоменклатуры.СуммаПоКоэффициенту;
			НоваяСтрока.СуммаНДС = ВыборкаНоменклатуры.СуммаНДСПоКоэффициенту;
			//-КоэффициентДеления2
			НоваяСтрока.СтавкаНДС = ВыборкаНоменклатуры.СтавкаНДС;
			//<<Портал-Юг, Финик 03.06.2020 [#inv99]
			НоваяСтрока.ПЛ_Договор = ВыборкаНоменклатуры.ПЛ_Договор;
			//>>Портал-Юг, Финик 03.06.2020 [#inv99]
			// Если еще данную номенклатуру не заполняли, тогда заполним информацию по модификаторам.
			Если НЕ ДубльНоменклатуры Тогда
				// В случае с возвратом модификаторы не заполняем, но общую сумму модификаторов прибавляем к сумме номенклатуры.
				ЗаполнитьМодификаторыДляНоменклатуры(НоваяСтрока, СуммаВычета);
			КонецЕсли;
		КонецЦикла;
		//<< ПЛ, Татаринов, 2021.05.30, Исправление ошибок после обновления
		//ДанныеОбъекта.Товары.Свернуть("Номенклатура, Характеристика, Серия, СтатусУказанияСерий, ЕдиницаИзмерения, Коэффициент, СтавкаНДС, Себестоимость","Количество, Сумма, СуммаНДС");
		ДанныеОбъекта.Товары.Свернуть("Номенклатура, Характеристика, Серия, СтатусУказанияСерий, ЕдиницаИзмерения, Коэффициент, СтавкаНДС, Себестоимость","Количество, Сумма, СуммаНДС, ПЛ_Договор");	
		//>> ПЛ, Татаринов, 2021.05.30
		Для каждого НоваяСтрокаТоваров Из ДанныеОбъекта.Товары Цикл
			ВычестьВозвратыИзВозвратов(НоваяСтрокаТоваров);
		КонецЦикла;
	ИначеЕсли СтруктураТекущихСостояний.ВидДокумента = "ПриходныйКассовыйОрдер" 
		ИЛИ СтруктураТекущихСостояний.ВидДокумента = "ПриходныйКассовыйОрдерВозврат" Тогда
		ДанныеОбъекта.Контрагент = СтруктураТекущихСостояний.КонтрагентДляЗачетаАванса;
		ДанныеОбъекта.Договор = СтруктураТекущихСостояний.ДоговорКонтрагентаДляЗачетаАванса;
		ДанныеОбъекта.Партнер = СтруктураТекущихСостояний.КлиентДляЗачетаАванса;
		ДанныеОбъекта.Соглашение = СтруктураТекущихСостояний.СоглашениеДляЗачетаАванса;
		Пока ВыборкаНоменклатуры.Следующий() Цикл
			ДанныеОбъекта.СуммаОплаты = ВыборкаНоменклатуры.Сумма * ВыборкаНоменклатуры.КоэффициентДеления;
		КонецЦикла;
	ИначеЕсли СтруктураТекущихСостояний.ВидДокумента = "ПоступлениеНаРасчетныйСчет" 
		ИЛИ СтруктураТекущихСостояний.ВидДокумента = "ПоступлениеНаРасчетныйСчетВозврат" Тогда
		ДанныеОбъекта.Контрагент = СтруктураТекущихСостояний.КонтрагентДляЗачетаАванса;
		ДанныеОбъекта.Договор = СтруктураТекущихСостояний.ДоговорКонтрагентаДляЗачетаАванса;
		ДанныеОбъекта.Партнер = СтруктураТекущихСостояний.КлиентДляЗачетаАванса;
		ДанныеОбъекта.Соглашение = СтруктураТекущихСостояний.СоглашениеДляЗачетаАванса;
		НайденныеТерминалы = ТаблицаЭквайринговыхТерминалов.НайтиСтроки(Новый Структура("КассаККМ, ВидОплаты", СтруктураТекущихСостояний.КассаККМ, СтруктураТекущихСостояний.ВедущийТипОплаты));
		Если НайденныеТерминалы.Количество() Тогда
			ДанныеОбъекта.ЭквайринговыйТерминал = НайденныеТерминалы[0].ЭквайринговыйТерминал;
			Если ЗначениеЗаполнено(ДанныеОбъекта.ЭквайринговыйТерминал) Тогда
				ДанныеОбъекта.ДоговорЭквайринга = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеОбъекта.ЭквайринговыйТерминал, "Владелец");
			КонецЕсли;
		КонецЕсли;
		Пока ВыборкаНоменклатуры.Следующий() Цикл
			ДанныеОбъекта.СуммаОплаты = ВыборкаНоменклатуры.Сумма * ВыборкаНоменклатуры.КоэффициентДеления;
		КонецЦикла;
	ИначеЕсли СтруктураТекущихСостояний.ВидДокумента = "РеализацияТоваровУслуг" Тогда
		ДанныеОбъекта.Контрагент = СтруктураТекущихСостояний.КонтрагентДляЗачетаАванса;
		ДанныеОбъекта.Договор = СтруктураТекущихСостояний.ДоговорКонтрагентаДляЗачетаАванса;
		ДанныеОбъекта.Партнер = СтруктураТекущихСостояний.КлиентДляЗачетаАванса;
		ДанныеОбъекта.Соглашение = СтруктураТекущихСостояний.СоглашениеДляЗачетаАванса;
		
		ДанныеОбъекта.Склад = СтруктураТекущихСостояний.СкладРеализации;
		
		// Заполним таблицу товаров и модификаторов
		Пока ВыборкаНоменклатуры.Следующий() Цикл
			Если ДанныеОбъекта.Товары.Найти(ВыборкаНоменклатуры.Номенклатура,"Номенклатура") = Неопределено Тогда
				ДубльНоменклатуры = Ложь;
			Иначе
				ДубльНоменклатуры = Истина;
			КонецЕсли;
			НоваяСтрока = ДанныеОбъекта.Товары.Добавить();
			НоваяСтрока.Номенклатура = ВыборкаНоменклатуры.Номенклатура;
			НоваяСтрока.Характеристика = ВыборкаНоменклатуры.Характеристика;
			НоваяСтрока.Серия = ВыборкаНоменклатуры.Серия;
			НоваяСтрока.СтатусУказанияСерий = ВыборкаНоменклатуры.СтатусУказанияСерий;
			//+КоэффициентДеления2
			НоваяСтрока.Количество = ВыборкаНоменклатуры.КоличествоПоКоэффициенту;
			//-КоэффициентДеления2
			НоваяСтрока.ЕдиницаИзмерения = ВыборкаНоменклатуры.Номенклатура.ЕдиницаИзмерения;
			НоваяСтрока.Коэффициент = 1;
			//+КоэффициентДеления2
			НоваяСтрока.Сумма = ВыборкаНоменклатуры.СуммаПоКоэффициенту;
			НоваяСтрока.СуммаНДС = ВыборкаНоменклатуры.СуммаНДСПоКоэффициенту;
			//-КоэффициентДеления2
			НоваяСтрока.СтавкаНДС = ВыборкаНоменклатуры.СтавкаНДС;
			//+КоэффициентДеления2
			НоваяСтрока.СуммаРучнойСкидки		= ВыборкаНоменклатуры.СуммаСкидкиПоКоэффициенту;
			//-КоэффициентДеления2
			//+КоэффициентДеления
			//Если НоваяСтрока.Сумма + НоваяСтрока.СуммаРучнойСкидки = 0 Тогда
			//	НоваяСтрока.ПроцентРучнойСкидки = 0;
			//Иначе
			//	НоваяСтрока.ПроцентРучнойСкидки	= (НоваяСтрока.СуммаРучнойСкидки / (НоваяСтрока.Сумма + НоваяСтрока.СуммаРучнойСкидки)) * 100;
			//КонецЕсли;
			//НоваяСтрока.КоэффициентДеления = ВыборкаНоменклатуры.КоэффициентДеления;
			НоваяСтрока.КоэффициентДеления = 1;
			//-КоэффициентДеления
		КонецЦикла;
		//+КоэффициентДеления
		ДанныеОбъекта.Товары.Свернуть("Номенклатура,Характеристика,Серия,СтатусУказанияСерий,ЕдиницаИзмерения,Коэффициент,СтавкаНДС,ПроцентРучнойСкидки,КоэффициентДеления,ИдентификаторСтроки", "Количество,Сумма,СуммаНДС,СуммаРучнойСкидки");
		//ДанныеОбъекта.Товары.Свернуть("ИдентификаторСтроки,Номенклатура,Характеристика,Серия,СтатусУказанияСерий,ЕдиницаИзмерения,Коэффициент,СтавкаНДС,ПроцентРучнойСкидки", "КоэффициентДеления,Количество,Сумма,СуммаНДС,СуммаРучнойСкидки");
		//-КоэффициентДеления
		//Заполним модификаторы
		Для Каждого ВыборкаНоменклатуры Из ДанныеОбъекта.Товары Цикл
			ЗаполнитьМодификаторыДляНоменклатуры(ВыборкаНоменклатуры, СуммаВычета, ВыборкаНоменклатуры.КоэффициентДеления);
				КонецЦикла;
	ИначеЕсли СтруктураТекущихСостояний.ВидДокумента = "УчетАлкоголяПиво" Тогда
		ДанныеОбъекта.СкладРеализации		= СтруктураТекущихСостояний.СкладРеализации;
		Пока ВыборкаНоменклатуры.Следующий() Цикл
			НоваяСтрокаУчет = ДанныеОбъекта.УчетАлкоголя.Добавить();
			НоваяСтрокаУчет.ДатаПодключенияИСМП = ВыборкаНоменклатуры.ДатаПодключенияИСМП;
			НоваяСтрокаУчет.АналитикаКодАкциза = ВыборкаНоменклатуры.АналитикаКодАкциза;
			НоваяСтрокаУчет.СрокРеализацииИСМП = ВыборкаНоменклатуры.СрокРеализацииИСМП;
			НоваяСтрокаУчет.ОбъемСливаИСМП = ВыборкаНоменклатуры.ОбъемСливаИСМП;
		КонецЦикла;
	ИначеЕсли СтруктураТекущихСостояний.ВидДокумента = "УчетАлкоголяКрепкийАлкогольРег2"
		ИЛИ СтруктураТекущихСостояний.ВидДокумента = "УчетАлкоголяКрепкийАлкогольРег1" Тогда
		ДанныеОбъекта.СкладРеализации		= СтруктураТекущихСостояний.СкладРеализации;
		Пока ВыборкаНоменклатуры.Следующий() Цикл
			ДанныеОбъекта.ОрганизацияЕГАИС = ВыборкаНоменклатуры.ОрганизацияЕГАИС;
			НоваяСтрока = ДанныеОбъекта.Товары.Добавить();
			НоваяСтрока.Номенклатура = ВыборкаНоменклатуры.Номенклатура;
			НоваяСтрока.Характеристика = ВыборкаНоменклатуры.Характеристика;
			НоваяСтрока.Серия = ВыборкаНоменклатуры.Серия;
			НоваяСтрока.СтатусУказанияСерий = ВыборкаНоменклатуры.СтатусУказанияСерий;
			НоваяСтрока.Количество = ВыборкаНоменклатуры.КоличествоПоКоэффициенту;
			НоваяСтрока.ЕдиницаИзмерения = ВыборкаНоменклатуры.Номенклатура.ЕдиницаИзмерения;
			НоваяСтрока.Коэффициент = 1;
			НоваяСтрока.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
			НоваяСтрока.МаркируемаяПродукцияИСМП = ВыборкаНоменклатуры.МаркируемаяПродукцияИСМП;
			НоваяСтрока.СправкаИСМП = ВыборкаНоменклатуры.СправкаИСМП;
			НоваяСтрока.АналитикаКодАкциза = ВыборкаНоменклатуры.АналитикаКодАкциза;
			НоваяСтрока.Цена = 0;
		КонецЦикла;
	КонецЕсли;
	
	// Удалим строки, где возвраты компенсировались в продажами
	Если НайденнаяКасса<>Неопределено И НайденнаяКасса.УчитыватьВозвратыПриЗагрузкеПродаж Тогда
		УдалитьСтрокиСНулевымКоличеством();
	КонецЕсли;
КонецПроцедуры

// Заполняет ТЧ Оплаты объекта
Функция ЗаполнитьТаблицуОплатДанныхОбъекта()
	// Получим общую сумму товаров данного документа
	
	// Получим Таблицу оплат по основаниям данного документа
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаОплат.ДокументРегистратор,
	|	ТаблицаОплат.ВидОплаты,
	|	ТаблицаОплат.Карточка,
	|	ТаблицаОплат.СуммаОплаты,
	|	ТаблицаОплат.Сдача,
	|	ТаблицаОплат.ТипОплаты
	|	,ТаблицаОплат.ВидОперации
	|ПОМЕСТИТЬ ТаблицаОплат
	|ИЗ
	|	&ТаблицаОплат КАК ТаблицаОплат
	|ГДЕ
	|	ТаблицаОплат.ДокументРегистратор В(&МассивОснований)
	// Отбор по виду операции, чтобы выбрать не все оплаты, 
	// а только подходящие для текущего вида операции данных объекта документа.
	|	И &ВидОперацииОтбор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОплат.ДокументРегистратор,
	|	ТаблицаОплат.ВидОплаты,
	|	ТаблицаОплат.ТипОплаты КАК ТипОплаты,
	|	ТаблицаОплат.Карточка,
	|	ТаблицаОплат.СуммаОплаты,
	|	ТаблицаОплат.Сдача
	|	,ТаблицаОплат.ВидОперации
	|ИЗ
	|	ТаблицаОплат КАК ТаблицаОплат");
	Запрос.УстановитьПараметр("ТаблицаОплат",ТаблицаОплат);
	Запрос.УстановитьПараметр("МассивОснований",ДанныеОбъекта.МассивОснований);
	
	// Отбор по виду операции, чтобы выбрать не все оплаты, 
	// а только подходящие для текущего вида операции данных объекта документа.
	Если СтруктураТекущихСостояний.ВидДокумента = "АктОРеализации"
		ИЛИ СтруктураТекущихСостояний.ВидДокумента = "ВыпускСРозничнойРеализацией" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ВидОперацииОтбор", "ТаблицаОплат.ВидОперации = &ВидОперации");
		Запрос.УстановитьПараметр("ВидОперации", Перечисления.питВидыОперацийПоЗагрузкеДанныхПродаж.Реализация);
	ИначеЕсли СтруктураТекущихСостояний.ВидДокумента = "ВыпускСРеализацией" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ВидОперацииОтбор", "ТаблицаОплат.ВидОперации = &ВидОперации");
		Запрос.УстановитьПараметр("ВидОперации", Перечисления.питВидыОперацийПоЗагрузкеДанныхПродаж.РеализацияОптовая); 
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ВидОперацииОтбор", "ИСТИНА");
	КонецЕсли;
	
	текТаблицаОплат = Запрос.Выполнить().Выгрузить();
	
	// Получим товарную сумму регистраторов документа
	// Выбираем только те виды документов,в которых есть ТЧ Оплаты: АктОРеализации,ВыпускСРозничнойРеализацией
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаПродаж.Сумма КАК СуммаВсего,
	|	ТаблицаПродаж.ДокументРегистратор,
	|	ТаблицаПродаж.Подразделение,
	|	ТаблицаПродаж.Организация,
	|	ТаблицаПродаж.СкладРеализации,
	|	ТаблицаПродаж.СкладПриготовления,
	|	ТаблицаПродаж.СтатьяСписанияТМЦ,
	|	ТаблицаПродаж.АналитикаСписанияТМЦ,
	|	ТаблицаПродаж.ВедущийТипОплаты,
	|	ТаблицаПродаж.КоэффициентДеления,
	//+группировка по дате смены
	|	"+?(ГруппироватьПоНомеруСмены,"ТаблицаПродаж.КассаККМ, ТаблицаПродаж.НомерСмены, ТаблицаПродаж.ДатаСмены,","")+"
	|	ТаблицаПродаж.ВидДокумента,
	|	ТаблицаПродаж.Номенклатура,
	|	ТаблицаПродаж.Характеристика,
	|	ТаблицаПродаж.Серия,
	|	ТаблицаПродаж.СтатусУказанияСерий,
	|	ТаблицаПродаж.КонтрагентДляЗачетаАванса,
	|	ТаблицаПродаж.ДоговорКонтрагентаДляЗачетаАванса,
	|	ТаблицаПродаж.КлиентДляЗачетаАванса,
	|	ТаблицаПродаж.СоглашениеДляЗачетаАванса
	|ПОМЕСТИТЬ ТаблицаПродаж 
	|ИЗ
	|	&ТаблицаПродаж КАК ТаблицаПродаж 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПродаж.Подразделение,
	|	ТаблицаПродаж.Организация,
	|	ТаблицаПродаж.СкладРеализации,
	|	ТаблицаПродаж.СкладПриготовления,
	|	ТаблицаПродаж.СтатьяСписанияТМЦ,
	|	ТаблицаПродаж.АналитикаСписанияТМЦ,
	|	ТаблицаПродаж.ВедущийТипОплаты,
	|	ТаблицаПродаж.КоэффициентДеления,
	//+группировка по дате смены
	|	"+?(ГруппироватьПоНомеруСмены,"ТаблицаПродаж.КассаККМ, ТаблицаПродаж.НомерСмены, ТаблицаПродаж.ДатаСмены,","")+"
	|	ТаблицаПродаж.ВидДокумента,
	|	ТаблицаПродаж.Номенклатура,
	|	ТаблицаПродаж.Характеристика,
	|	ТаблицаПродаж.Серия,
	|	ТаблицаПродаж.СтатусУказанияСерий,
	|	ТаблицаПродаж.ДокументРегистратор,
	|	ТаблицаПродаж.СуммаВсего,
	|	ТаблицаПродаж.КонтрагентДляЗачетаАванса,
	|	ТаблицаПродаж.ДоговорКонтрагентаДляЗачетаАванса,
	|	ТаблицаПродаж.КлиентДляЗачетаАванса,
	|	ТаблицаПродаж.СоглашениеДляЗачетаАванса
	|ИЗ
	|	ТаблицаПродаж КАК ТаблицаПродаж
	|ГДЕ
	|	ТаблицаПродаж.ДокументРегистратор В(&МассивОснований)
	|	И (ТаблицаПродаж.ВидДокумента <> ""ВыпускСПеремещением"")
	|ИТОГИ
	|	СУММА(СуммаВсего)
	|ПО
	|	ДокументРегистратор
	|");
	Запрос.УстановитьПараметр("МассивОснований",ДанныеОбъекта.МассивОснований);
	Запрос.УстановитьПараметр("ТаблицаПродаж",ТаблицаПродаж);
	
	// Получим сумму товаров документов оснований
	ВыборкаРегистратор = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	Пока ВыборкаРегистратор.Следующий() Цикл
		ТоварнаяСуммаОснований = 0;
		ТоварнаяСуммаДокумента = 0;
		МассивНоменклатурыМодификатора = Новый Массив;
		Выборка = ВыборкаРегистратор.Выбрать();
		Пока Выборка.Следующий() Цикл
			// структура поиска для модификаторов
			Если Выборка.ВидДокумента = "ВыпускСРозничнойРеализацией" Или Выборка.ВидДокумента = "ВыпускСРеализацией" Тогда 
				Если питФормироватьДокументыПроизводства22 Тогда
					СтруктураПоиска = Новый Структура("Организация,Подразделение,ВидДокумента,СкладПриготовления,СкладРеализации,ВедущийТипОплаты",Выборка.Организация,Выборка.Подразделение,Выборка.ВидДокумента,Выборка.СкладПриготовления,Выборка.СкладРеализации,Выборка.ВедущийТипОплаты);
				Иначе
					СтруктураПоиска = Новый Структура("Организация,Подразделение,ВидДокумента,СкладПриготовления,ВедущийТипОплаты",Выборка.Организация,Выборка.Подразделение,Выборка.ВидДокумента,Выборка.СкладПриготовления,Выборка.ВедущийТипОплаты);
				КонецЕсли;
			ИначеЕсли Выборка.ВидДокумента = "ВыпускСоСписанием"  Тогда
				СтруктураПоиска = Новый Структура("Организация,Подразделение,ВидДокумента,СкладПриготовления, СтатьяСписанияТМЦ, АналитикаСписанияТМЦ",Выборка.Организация,Выборка.Подразделение,Выборка.ВидДокумента,Выборка.СкладПриготовления, Выборка.СтатьяСписанияТМЦ, Выборка.АналитикаСписанияТМЦ);
			ИначеЕсли Выборка.ВидДокумента = "ВыпускСПеремещением" Тогда
				СтруктураПоиска = Новый Структура("Организация,Подразделение,ВидДокумента,СкладПриготовления,СкладРеализации",Выборка.Организация,Выборка.Подразделение,Выборка.ВидДокумента,Выборка.СкладПриготовления,Выборка.СкладРеализации);
			ИначеЕсли Выборка.ВидДокумента = "СписаниеТоваров" Тогда
				СтруктураПоиска = Новый Структура("Организация,Подразделение,ВидДокумента,СкладРеализации, СтатьяСписанияТМЦ",Выборка.Организация,Выборка.Подразделение,Выборка.ВидДокумента,Выборка.СкладРеализации, Выборка.СтатьяСписанияТМЦ);
			ИначеЕсли Выборка.ВидДокумента = "АктОРеализации" Тогда
				СтруктураПоиска = Новый Структура("Организация,Подразделение,ВидДокумента,СкладРеализации,ВедущийТипОплаты",Выборка.Организация,Выборка.Подразделение,Выборка.ВидДокумента,Выборка.СкладРеализации,Выборка.ВедущийТипОплаты);
			Иначе
				СтруктураПоиска = Новый Структура("Организация,Подразделение,ВидДокумента,СкладРеализации",Выборка.Организация,Выборка.Подразделение,Выборка.ВидДокумента,Выборка.СкладРеализации);
			КонецЕсли;
			Если ГруппироватьПоНомеруСмены Тогда
				СтруктураПоиска.Вставить("КассаККМ", Выборка.КассаККМ);
				СтруктураПоиска.Вставить("НомерСмены", Выборка.НомерСмены);
				//+группировка по дате смены
				СтруктураПоиска.Вставить("ДатаСмены", Выборка.ДатаСмены);
			КонецЕсли;
			Если СтруктураТекущихСостояний.ВидДокумента = "ВыпускСРеализацией" Или СтруктураТекущихСостояний.ВидДокумента = "РеализацияТоваровУслуг" Тогда
				СтруктураПоиска.Вставить("КонтрагентДляЗачетаАванса",Выборка.КонтрагентДляЗачетаАванса);
				СтруктураПоиска.Вставить("ДоговорКонтрагентаДляЗачетаАванса",Выборка.ДоговорКонтрагентаДляЗачетаАванса);
				СтруктураПоиска.Вставить("СоглашениеДляЗачетаАванса",Выборка.СоглашениеДляЗачетаАванса);
				СтруктураПоиска.Вставить("КлиентДляЗачетаАванса",Выборка.КлиентДляЗачетаАванса);
			КонецЕсли;
			ЭтоСтрокаОснования = Истина;
			ЭтоСтрокаЦелевогоДокумента = Истина;
			Для Каждого ПараметрСтруктуры Из СтруктураПоиска  Цикл
				Если СтруктураТекущихСостояний[ПараметрСтруктуры.Ключ] <> Выборка[ПараметрСтруктуры.Ключ] Тогда
					ЭтоСтрокаЦелевогоДокумента = Ложь;
					Если ПараметрСтруктуры.Ключ  <> "СкладПриготовления" И ПараметрСтруктуры.Ключ  <> "СкладРеализации" Тогда
						ЭтоСтрокаОснования = Ложь;
					КонецЕсли;
				КонецЕсли;
				Если НЕ ЭтоСтрокаОснования И НЕ ЭтоСтрокаЦелевогоДокумента Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если ЭтоСтрокаЦелевогоДокумента Тогда
				ТоварнаяСуммаДокумента = ТоварнаяСуммаДокумента + Выборка.СуммаВсего;
			КонецЕсли;
			Если ЭтоСтрокаОснования Тогда
				ТоварнаяСуммаОснований = ТоварнаяСуммаОснований + Выборка.СуммаВсего;
			КонецЕсли;
			
			СтруктураПоиска.Вставить("НоменклатураОсновнойПозиции", Выборка.Номенклатура);
			СтруктураПоиска.Вставить("ХарактеристикаОсновнойПозиции", Выборка.Характеристика);
			СтруктураПоиска.Вставить("СерияОсновнойПозиции", Выборка.Серия);
			СтруктураПоиска.Вставить("ДокументРегистратор", Выборка.ДокументРегистратор);
			Если МассивНоменклатурыМодификатора.Найти(Выборка.Номенклатура) = Неопределено Тогда
				МассивНоменклатурыМодификатора.Добавить(Выборка.Номенклатура);
				
				// добавим  сумму модификаторов на сумму оснований
				СтрокиМодификаторов = ТаблицаПродажМодификаторы.НайтиСтроки(СтруктураПоиска);
				Для Каждого СтрокаМодификатора Из СтрокиМодификаторов Цикл
					Если ЭтоСтрокаЦелевогоДокумента Тогда
						ТоварнаяСуммаДокумента = ТоварнаяСуммаДокумента + СтрокаМодификатора.Сумма;
					КонецЕсли;
					Если ЭтоСтрокаОснования Тогда
						ТоварнаяСуммаОснований = ТоварнаяСуммаОснований + СтрокаМодификатора.Сумма;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		// Найдем оплаты по данному ДПФ
		СтрокиОплат = текТаблицаОплат.НайтиСтроки(Новый Структура("ДокументРегистратор", ВыборкаРегистратор.ДокументРегистратор));
		
		Для Каждого СтрокаТаблицы Из СтрокиОплат Цикл
			НоваяСтрока = ДанныеОбъекта.Оплаты.Добавить();
			НоваяСтрока.ВидОплаты = СтрокаТаблицы.ВидОплаты;
			НоваяСтрока.Карточка = СтрокаТаблицы.Карточка;
			НоваяСтрока.Сумма = ?(ТоварнаяСуммаОснований = 0,0,СтрокаТаблицы.СуммаОплаты*ТоварнаяСуммаДокумента/ТоварнаяСуммаОснований);
			НоваяСтрока.СуммаВозврат = ?(ТоварнаяСуммаОснований = 0,0,СтрокаТаблицы.Сдача*ТоварнаяСуммаДокумента/ТоварнаяСуммаОснований);
			НоваяСтрока.ДатаОплаты = ?(СтрокаТаблицы.ТипОплаты = Перечисления.питТипыОплат.питБонусы, ВыборкаРегистратор.ДокументРегистратор.Дата, Дата("00010101"));
			НоваяСтрока.ВидОперации = СтрокаТаблицы.ВидОперации;
		КонецЦикла;
		
	КонецЦикла;
	
	// Свернем суммы оплат
	ДанныеОбъекта.Оплаты.Свернуть("ВидОплаты,Карточка,Контрагент,ДоговорВзаиморасчетов,ДатаОплаты,ВидОперации","Сумма,СуммаВозврат,КоличествоЧеков");

КонецФункции

//>>Швецов. 04.07.25 Переопределение метода получения суммы оплат для выпуска блюд
Функция MRS_ЗаполнитьТаблицуОплатДанныхОбъекта() Экспорт
	
	// Получим Таблицу оплат по основаниям данного документа
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаОплат.ДокументРегистратор,
	|	ТаблицаОплат.ВидОплаты,
	|	ТаблицаОплат.Карточка,
	|	ТаблицаОплат.СуммаОплаты,
	|	ТаблицаОплат.Сдача,
	|	ТаблицаОплат.ТипОплаты,
	|	ТаблицаОплат.ВидОперации
	|ПОМЕСТИТЬ ВТ_ТаблицаОплатОснования
	|ИЗ
	|	&ТаблицаОплат КАК ТаблицаОплат
	|ГДЕ
	|	ТаблицаОплат.ДокументРегистратор В(&МассивОснований)
	// Отбор по виду операции, чтобы выбрать не все оплаты, 
	// а только подходящие для текущего вида операции данных объекта документа.
	|	И &ВидОперацииОтбор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОплат.ДокументРегистратор,
	|	ТаблицаОплат.ВидОплаты,
	|	ТаблицаОплат.ТипОплаты КАК ТипОплаты,
	|	ТаблицаОплат.Карточка,
	|	ТаблицаОплат.СуммаОплаты,
	|	ТаблицаОплат.Сдача,
	|	ТаблицаОплат.ВидОперации
	|ПОМЕСТИТЬ ВТ_ТаблицаОплатОтбор
	|ИЗ
	|	ВТ_ТаблицаОплатОснования КАК ТаблицаОплат");
	Запрос.УстановитьПараметр("ТаблицаОплат",ТаблицаОплат);
	Запрос.УстановитьПараметр("МассивОснований",ДанныеОбъекта.МассивОснований);
	
	// Отбор по виду операции, чтобы выбрать не все оплаты, 
	// а только подходящие для текущего вида операции данных объекта документа.
	Если СтруктураТекущихСостояний.ВидДокумента = "АктОРеализации"
		ИЛИ СтруктураТекущихСостояний.ВидДокумента = "ВыпускСРозничнойРеализацией" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ВидОперацииОтбор", "ТаблицаОплат.ВидОперации = &ВидОперации");
		Запрос.УстановитьПараметр("ВидОперации", Перечисления.питВидыОперацийПоЗагрузкеДанныхПродаж.Реализация);
	ИначеЕсли СтруктураТекущихСостояний.ВидДокумента = "ВыпускСРеализацией" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ВидОперацииОтбор", "ТаблицаОплат.ВидОперации = &ВидОперации");
		Запрос.УстановитьПараметр("ВидОперации", Перечисления.питВидыОперацийПоЗагрузкеДанныхПродаж.РеализацияОптовая); 
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ВидОперацииОтбор", "ИСТИНА");
	КонецЕсли;
	
	МВТ = Новый МенеджерВременныхТаблиц();
	
	Запрос.МенеджерВременныхТаблиц = МВТ;
	Запрос.Выполнить();
	
	// Получим товарную сумму регистраторов документа и данные по оплатам
	// Выбираем только те виды документов, в которых есть ТЧ Оплаты: АктОРеализации, ВыпускСРозничнойРеализацией
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
		|	ТаблицаПродаж.Сумма КАК СуммаВсего,
		|	ТаблицаПродаж.ДокументРегистратор,
		|	ТаблицаПродаж.Подразделение,
		|	ТаблицаПродаж.Организация,
		|	ТаблицаПродаж.СкладРеализации,
		|	ТаблицаПродаж.СкладПриготовления,
		|	ТаблицаПродаж.СтатьяСписанияТМЦ,
		|	ТаблицаПродаж.АналитикаСписанияТМЦ,
		|	ТаблицаПродаж.ВедущийТипОплаты,
		|	ТаблицаПродаж.КоэффициентДеления,
		|	" + ?(ГруппироватьПоНомеруСмены, "ТаблицаПродаж.КассаККМ, ТаблицаПродаж.НомерСмены, ТаблицаПродаж.ДатаСмены,", "") + "
		|	ТаблицаПродаж.ВидДокумента,
		|	ТаблицаПродаж.Номенклатура,
		|	ТаблицаПродаж.Характеристика,
		|	ТаблицаПродаж.Серия,
		|	ТаблицаПродаж.СтатусУказанияСерий,
		|	ТаблицаПродаж.КонтрагентДляЗачетаАванса,
		|	ТаблицаПродаж.ДоговорКонтрагентаДляЗачетаАванса,
		|	ТаблицаПродаж.КлиентДляЗачетаАванса,
		|	ТаблицаПродаж.СоглашениеДляЗачетаАванса,
		|	ТаблицаПродаж.ПЛ_НоменклатураОткрытаяЦена
		|ПОМЕСТИТЬ ТаблицаПродаж
		|ИЗ
		|	&ТаблицаПродаж КАК ТаблицаПродаж
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаПродаж.Подразделение,
		|	ТаблицаПродаж.Организация,
		|	ТаблицаПродаж.СкладРеализации,
		|	ТаблицаПродаж.СкладПриготовления,
		|	ТаблицаПродаж.СтатьяСписанияТМЦ,
		|	ТаблицаПродаж.АналитикаСписанияТМЦ,
		|	ТаблицаПродаж.ВедущийТипОплаты,
		|	ТаблицаПродаж.КоэффициентДеления,
		|	" + ?(ГруппироватьПоНомеруСмены, "ТаблицаПродаж.КассаККМ, ТаблицаПродаж.НомерСмены, ТаблицаПродаж.ДатаСмены,", "") + "
		|	ТаблицаПродаж.ВидДокумента,
		|	ТаблицаПродаж.Номенклатура,
		|	ТаблицаПродаж.Характеристика,
		|	ТаблицаПродаж.Серия,
		|	ТаблицаПродаж.СтатусУказанияСерий,
		|	ТаблицаПродаж.ДокументРегистратор,
		|	ТаблицаПродаж.СуммаВсего,
		|	ТаблицаПродаж.КонтрагентДляЗачетаАванса,
		|	ТаблицаПродаж.ДоговорКонтрагентаДляЗачетаАванса,
		|	ТаблицаПродаж.КлиентДляЗачетаАванса,
		|	ТаблицаПродаж.СоглашениеДляЗачетаАванса,
		|	ТаблицаПродаж.ПЛ_НоменклатураОткрытаяЦена,
		|	ТаблицаОплат.ВидОплаты,
		|	ТаблицаОплат.ТипОплаты,
		|	ТаблицаОплат.Карточка,
		|	ТаблицаОплат.СуммаОплаты,
		|	ТаблицаОплат.Сдача,
		|	ТаблицаОплат.ВидОперации
		|ИЗ
		|	ТаблицаПродаж КАК ТаблицаПродаж
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТаблицаОплатОтбор КАК ТаблицаОплат
		|		ПО ТаблицаПродаж.ДокументРегистратор = ТаблицаОплат.ДокументРегистратор
		|ГДЕ
		|	ТаблицаПродаж.ДокументРегистратор В(&МассивОснований)
		|	И (ТаблицаПродаж.ВидДокумента <> ""ВыпускСПеремещением"")
		|	%УсловиеОткрытаяЦена%
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаПродаж.ПЛ_НоменклатураОткрытаяЦена
		|ИТОГИ
		|	СУММА(СуммаВсего),
		|	СУММА(ТаблицаОплат.СуммаОплаты),
		|	СУММА(ТаблицаОплат.Сдача)
		|ПО
		|	ТаблицаПродаж.ДокументРегистратор,
		|	ТаблицаПродаж.ПЛ_НоменклатураОткрытаяЦена");
	
	Запрос.УстановитьПараметр("МассивОснований", ДанныеОбъекта.МассивОснований);
	Запрос.УстановитьПараметр("ТаблицаПродаж", ТаблицаПродаж);

	// Формируем условие по открытой цене
	Если ЗначениеЗаполнено(ДанныеОбъекта.ПЛ_Номенклатура) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%УсловиеОткрытаяЦена%", "И ТаблицаПродаж.ПЛ_НоменклатураОткрытаяЦена <> Значение(Справочник.Номенклатура.ПустаяСсылка)");
		Запрос.УстановитьПараметр("ПЛ_Номенклатура", ДанныеОбъекта.ПЛ_Номенклатура); 
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%УсловиеОткрытаяЦена%", "И ТаблицаПродаж.ПЛ_НоменклатураОткрытаяЦена = Значение(Справочник.Номенклатура.ПустаяСсылка)");
	КонецЕсли;
	
	Запрос.МенеджерВременныхТаблиц = МВТ;
	
	// Получим сумму товаров и оплаты документов оснований
	ВыборкаРегистратор = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	СуммаОплатПоДокументам = 0;

	// Обход выборки по регистраторам
	Пока ВыборкаРегистратор.Следующий() Цикл
	    ВыборкаНоменклатура = ВыборкаРегистратор.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);

	    Пока ВыборкаНоменклатура.Следующий() Цикл

	        СуммаОплат = ВыборкаНоменклатура.СуммаВсего;
	        ЭтоНеоткрытаяЦена = ВыборкаНоменклатура.ПЛ_НоменклатураОткрытаяЦена = Справочники.Номенклатура.ПустаяСсылка();
			ОткрытаяЦенаДанныеОбъекта = ВыборкаНоменклатура.ПЛ_НоменклатураОткрытаяЦена = ДанныеОбъекта.ПЛ_Номенклатура;

	        Если ЭтоНеоткрытаяЦена Тогда
	            СуммаОплатПоДокументам = СуммаОплатПоДокументам + СуммаОплат;
	        ИначеЕсли ОткрытаяЦенаДанныеОбъекта Тогда
	            СуммаОплатПоДокументам = СуммаОплатПоДокументам + СуммаОплат;
			КонецЕсли;
	    КонецЦикла;
	КонецЦикла;
	
	//строка оплаты для выпуска блюд
	//тип и вид пока одинаковый во всех чеках (карта)
	ДанныеСтрокиОплаты = ТаблицаОплат[0];
	НоваяСтрока = ДанныеОбъекта.Оплаты.Добавить();
	НоваяСтрока.ВидОплаты = ДанныеСтрокиОплаты.ВидОплаты;
	НоваяСтрока.Карточка = ДанныеСтрокиОплаты.Карточка;
	НоваяСтрока.Сумма = СуммаОплатПоДокументам;
	НоваяСтрока.ДатаОплаты = ?(ДанныеСтрокиОплаты.ТипОплаты = Перечисления.питТипыОплат.питБонусы, ДанныеСтрокиОплаты.ДокументРегистратор.Дата, Дата("00010101"));
	НоваяСтрока.ВидОперации = ДанныеСтрокиОплаты.ВидОперации;
	
КонецФункции
//<<Швецов 04.07.25 

// Заполняет ТЧ "Начилсенные бонусы" объекта
Функция ЗаполнитьТаблицуНачисленныхБонусовДанныхОбъекта()
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	питДанныеПродажФронтаНачислениеБонусныхБаллов.Партнер КАК Партнер,
	|	питДанныеПродажФронтаНачислениеБонусныхБаллов.БонуснаяПрограммаЛояльности КАК БонуснаяПрограммаЛояльности,
	|	питДанныеПродажФронтаНачислениеБонусныхБаллов.ДатаНачисления КАК ДатаНачисления,
	|	питДанныеПродажФронтаНачислениеБонусныхБаллов.ДатаСписания КАК ДатаСписания,
	|	СУММА(питДанныеПродажФронтаНачислениеБонусныхБаллов.СуммаБонусныхБаллов) КАК СуммаБонусныхБаллов
	|ИЗ
	|	Документ.питДанныеПродажФронта.НачислениеБонусныхБаллов КАК питДанныеПродажФронтаНачислениеБонусныхБаллов
	|ГДЕ
	|	питДанныеПродажФронтаНачислениеБонусныхБаллов.Ссылка В(&МассивОснований)
	|
	|СГРУППИРОВАТЬ ПО
	|	питДанныеПродажФронтаНачислениеБонусныхБаллов.Партнер,
	|	питДанныеПродажФронтаНачислениеБонусныхБаллов.ДатаНачисления,
	|	питДанныеПродажФронтаНачислениеБонусныхБаллов.ДатаСписания,
	|	питДанныеПродажФронтаНачислениеБонусныхБаллов.БонуснаяПрограммаЛояльности");
	Запрос.УстановитьПараметр("МассивОснований",ДанныеОбъекта.МассивОснований);
	РезультатБонусы	= Запрос.Выполнить();
	Если НЕ РезультатБонусы.Пустой() Тогда
		ВыборкаБонусы	= РезультатБонусы.Выбрать();
		Пока ВыборкаБонусы.Следующий() Цикл
			НоваяСтрока = ДанныеОбъекта.НачислениеБонусныхБаллов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаБонусы);
		КонецЦикла;
	КонецЕсли;
	
КонецФункции

// Возвращает структуру метаданных объекта
Функция ПолучитьСтруктуруДанныхОбъекта()
	ДанныеОбъекта = Новый Структура;
	// Общие данные для документов
	ДанныеОбъекта.Вставить("Ответственный",				Справочники.Пользователи.ПустаяСсылка());
	ДанныеОбъекта.Вставить("Организация",				Справочники.Организации.ПустаяСсылка());
	ДанныеОбъекта.Вставить("Подразделение",		Справочники.СтруктураПредприятия.ПустаяСсылка());
	ДанныеОбъекта.Вставить("Комментарий",				"");
	ДанныеОбъекта.Вставить("Дата",						ТекущаяДата());
	ДанныеОбъекта.Вставить("СкладПриготовления",		Справочники.Склады.ПустаяСсылка());
	ДанныеОбъекта.Вставить("СкладРеализации", 			Справочники.Склады.ПустаяСсылка());
	ДанныеОбъекта.Вставить("ВалютаУчета", 				Справочники.Валюты.ПустаяСсылка());
	ДанныеОбъекта.Вставить("КассаККМ",	 				Справочники.КассыККМ.ПустаяСсылка());
	ДанныеОбъекта.Вставить("НомерСмены",	 			0);
	//+группировка по дате смены
	ДанныеОбъекта.Вставить("ДатаСмены",	 				Дата("00010101"));
	ДанныеОбъекта.Вставить("ПометкаУдаления",	 		Ложь);
	ДанныеОбъекта.Вставить("ТипЦен",		 			Справочники.ВидыЦен.ПустаяСсылка());
	ДанныеОбъекта.Вставить("СуммаВключаетНДС",		 	Истина);
		//<< Портал-Юг, Баринов, 2019.08.15 [9.09 Обособление продаж по открытой цене]
	ДанныеОбъекта.Вставить("ПЛ_Номенклатура",		 	Справочники.Номенклатура.ПустаяСсылка());
	//>> Портал-Юг, Баринов, 2019.08.15
	// дополнительные данные
	ДанныеОбъекта.Вставить("МассивОснований",	 		Новый Массив);
	ДанныеОбъекта.Вставить("ПровестиДокумент",	 		Истина);
	Если СтруктураТекущихСостояний.ВидДокумента = "СписаниеТоваров" Тогда
		ДанныеОбъекта.Вставить("ВидОперации",	 			Перечисления.ХозяйственныеОперации.ПустаяСсылка());
		ДанныеОбъекта.Вставить("Организация",	 			Справочники.Организации.ПустаяСсылка());
		ДанныеОбъекта.Вставить("СкладРеализации",	 					Справочники.Склады.ПустаяСсылка());
		ДанныеОбъекта.Вставить("Подразделение",	 			Справочники.СтруктураПредприятия.ПустаяСсылка());
		ДанныеОбъекта.Вставить("ДокументОснование", 		Неопределено);
		ДанныеОбъекта.Вставить("СтатьяСписанияТМЦ",			Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.СтатьиРасходов"));
		ДанныеОбъекта.Вставить("АналитикаСписанияТМЦ", Метаданные.ПланыВидовХарактеристик.СтатьиРасходов.Тип);
		
		// Вспомогательные переменные для накопления информации о структуре таблиц документа.
		ТаблицаТовары = Новый ТаблицаЗначений;
		ТаблицаТовары.Колонки.Добавить("Номенклатура",			Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ТаблицаТовары.Колонки.Добавить("Характеристика",		Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
		ТаблицаТовары.Колонки.Добавить("Серия",					Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
		ТаблицаТовары.Колонки.Добавить("СтатусУказанияСерий",	Новый ОписаниеТипов("Число"));
		ТаблицаТовары.Колонки.Добавить("Количество",			Новый ОписаниеТипов("Число"));
		ТаблицаТовары.Колонки.Добавить("ЕдиницаИзмерения",		Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
		ТаблицаТовары.Колонки.Добавить("Коэффициент",			Новый ОписаниеТипов("Число"));
		ТаблицаТовары.Колонки.Добавить("КоэффициентДеления",	Новый ОписаниеТипов("Число"));
		ТаблицаТовары.Колонки.Добавить("ИдентификаторСтроки",	Новый ОписаниеТипов("Строка"));
		ТаблицаТовары.Колонки.Добавить("СтавкаНДС",				Новый ОписаниеТипов("СправочникСсылка.СтавкиНДС"));
		ТаблицаТовары.Колонки.Добавить("Сумма",					Новый ОписаниеТипов("Число"));
		
		ДанныеОбъекта.Вставить("Товары",					ТаблицаТовары);
	ИначеЕсли СтруктураТекущихСостояний.ВидДокумента = "АктОРеализации" Тогда
		// Шапка
		ДанныеОбъекта.Вставить("ВидОперации",	 			Перечисления.ХозяйственныеОперации.ПустаяСсылка());
		ДанныеОбъекта.Вставить("НомерСмены",		 		0);
		//+группировка по дате смены
		ДанныеОбъекта.Вставить("ДатаСмены",		 			Дата("00010101"));
		ДанныеОбъекта.Вставить("КассаККМ",		 			Справочники.КассыККМ.ПустаяСсылка());
		ДанныеОбъекта.Вставить("ОтложитьОплату", Ложь);
		
		// Таблица "Товары"
		ТаблицаТовары = Новый ТаблицаЗначений;
		ТаблицаТовары.Колонки.Добавить("ИдентификаторСтроки",	Новый ОписаниеТипов("Строка"));
		ТаблицаТовары.Колонки.Добавить("Номенклатура",			Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ТаблицаТовары.Колонки.Добавить("Характеристика",		Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
		ТаблицаТовары.Колонки.Добавить("Серия",					Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
		ТаблицаТовары.Колонки.Добавить("СтатусУказанияСерий",	Новый ОписаниеТипов("Число"));
		ТаблицаТовары.Колонки.Добавить("Количество",			Новый ОписаниеТипов("Число"));
		ТаблицаТовары.Колонки.Добавить("КоличествоУпаковок",	Новый ОписаниеТипов("Число"));
		ТаблицаТовары.Колонки.Добавить("КоличествоПродано",		Новый ОписаниеТипов("Число"));
		ТаблицаТовары.Колонки.Добавить("КоличествоВозврат",		Новый ОписаниеТипов("Число"));
		ТаблицаТовары.Колонки.Добавить("ЕдиницаИзмерения",		Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
		ТаблицаТовары.Колонки.Добавить("Коэффициент",			Новый ОписаниеТипов("Число"));
		ТаблицаТовары.Колонки.Добавить("Сумма",					Новый ОписаниеТипов("Число"));
		ТаблицаТовары.Колонки.Добавить("СуммаНДС",				Новый ОписаниеТипов("Число"));
		ТаблицаТовары.Колонки.Добавить("СтавкаНДС",				Новый ОписаниеТипов("СправочникСсылка.СтавкиНДС"));
		ТаблицаТовары.Колонки.Добавить("КоличествоЧеков", 		Новый ОписаниеТипов("Число"));
		ТаблицаТовары.Колонки.Добавить("СуммаРучнойСкидки",		Новый ОписаниеТипов("Число"));
		ТаблицаТовары.Колонки.Добавить("ПроцентРучнойСкидки",	Новый ОписаниеТипов("Число"));
		ТаблицаТовары.Колонки.Добавить("КоэффициентДеления", 	Новый ОписаниеТипов("Число"));
		
		// Таблица "Модификаторы"
		ТаблицаМодификаторы = Новый ТаблицаЗначений;
		ТаблицаМодификаторы.Колонки.Добавить("ИдентификаторСтроки",			 Новый ОписаниеТипов("Строка"));
		ТаблицаМодификаторы.Колонки.Добавить("Номенклатура",				 Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ТаблицаМодификаторы.Колонки.Добавить("Характеристика",				 Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
		ТаблицаМодификаторы.Колонки.Добавить("Серия",						 Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
		ТаблицаМодификаторы.Колонки.Добавить("СтатусУказанияСерий",			 Новый ОписаниеТипов("Число"));
		ТаблицаМодификаторы.Колонки.Добавить("ЕдиницаИзмеренияНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
		ТаблицаМодификаторы.Колонки.Добавить("Модификатор",					 Новый ОписаниеТипов("СправочникСсылка.питМодификаторы"));
		ТаблицаМодификаторы.Колонки.Добавить("Количество",					 Новый ОписаниеТипов("Число"));
		ТаблицаМодификаторы.Колонки.Добавить("КоличествоНоменклатуры",		 Новый ОписаниеТипов("Число"));
		ТаблицаМодификаторы.Колонки.Добавить("КоличествоУпаковокНоменклатуры", Новый ОписаниеТипов("Число"));
		ТаблицаМодификаторы.Колонки.Добавить("Сумма",						 Новый ОписаниеТипов("Число"));
		ТаблицаМодификаторы.Колонки.Добавить("Цена",						 Новый ОписаниеТипов("Число"));
		
		// Таблица "Оплаты"
		ТаблицаОплаты = Новый ТаблицаЗначений;
		ТаблицаОплаты.Колонки.Добавить("ВидОплаты", 			Новый ОписаниеТипов("СправочникСсылка.питВидыОплатОрганизаций"));
		ТаблицаОплаты.Колонки.Добавить("Карточка", 				Новый ОписаниеТипов("СправочникСсылка.питКарточки"));
		ТаблицаОплаты.Колонки.Добавить("Контрагент", 			Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
		ТаблицаОплаты.Колонки.Добавить("ДоговорВзаиморасчетов", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
		ТаблицаОплаты.Колонки.Добавить("Сумма", 				Новый ОписаниеТипов("Число"));
		ТаблицаОплаты.Колонки.Добавить("СуммаВозврат", 			Новый ОписаниеТипов("Число"));
		ТаблицаОплаты.Колонки.Добавить("КоличествоЧеков", 		Новый ОписаниеТипов("Число"));
		ТаблицаОплаты.Колонки.Добавить("ДатаОплаты",	 		Новый ОписаниеТипов("Дата"));
		ТаблицаОплаты.Колонки.Добавить("ВидОперации",	 		Новый ОписаниеТипов("ПеречислениеСсылка.питВидыОперацийПоЗагрузкеДанныхПродаж"));
		
		// Таблица "НачислениеБонусныхБаллов"
		НачислениеБонусныхБаллов = Новый ТаблицаЗначений;
		НачислениеБонусныхБаллов.Колонки.Добавить("Партнер",						Новый ОписаниеТипов("СправочникСсылка.Партнеры"));
		НачислениеБонусныхБаллов.Колонки.Добавить("БонуснаяПрограммаЛояльности",	Новый ОписаниеТипов("СправочникСсылка.БонусныеПрограммыЛояльности"));
		НачислениеБонусныхБаллов.Колонки.Добавить("ДатаНачисления",					Новый ОписаниеТипов("Дата"));
		НачислениеБонусныхБаллов.Колонки.Добавить("ДатаСписания",					Новый ОписаниеТипов("Дата"));
		НачислениеБонусныхБаллов.Колонки.Добавить("СуммаБонусныхБаллов",			Новый ОписаниеТипов("Число"));
		
		ДанныеОбъекта.Вставить("Товары",					ТаблицаТовары);
		ДанныеОбъекта.Вставить("Оплаты",					ТаблицаОплаты);
		ДанныеОбъекта.Вставить("Модификаторы",				ТаблицаМодификаторы);
		ДанныеОбъекта.Вставить("НачислениеБонусныхБаллов",	НачислениеБонусныхБаллов);
		
	ИначеЕсли СтруктураТекущихСостояний.ВидДокумента = "ВыпускСРозничнойРеализацией" 
		ИЛИ СтруктураТекущихСостояний.ВидДокумента = "ВыпускСоСписанием" 
		ИЛИ СтруктураТекущихСостояний.ВидДокумента = "ВыпускСПеремещением" 
		ИЛИ СтруктураТекущихСостояний.ВидДокумента = "ВыпускСРеализацией" Тогда
		
		Если  СтруктураТекущихСостояний.ВидДокумента = "ВыпускСРеализацией" Тогда
			ДанныеОбъекта.Вставить("Контрагент",		Справочники.Контрагенты.ПустаяСсылка());
			ДанныеОбъекта.Вставить("Договор",		Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
			ДанныеОбъекта.Вставить("Партнер",Справочники.Партнеры.ПустаяСсылка());
			ДанныеОбъекта.Вставить("Соглашение",Справочники.СоглашенияСКлиентами.ПустаяСсылка());
		КонецЕсли;
		
		ДанныеОбъекта.Вставить("КассаККМ",		 			Справочники.КассыККМ.ПустаяСсылка());
		ДанныеОбъекта.Вставить("ВидОперации",	 			Перечисления.питХозяйственныеОперации.ПустаяСсылка());
		ДанныеОбъекта.Вставить("УчитыватьОстаткиБлюдНаСкладе",		 	Истина);
		ДанныеОбъекта.Вставить("ОтложитьОплату", Ложь);
		ДанныеОбъекта.Вставить("РазрешитьНедовложения",				 	Истина);
		//>>Швецов. 15.01.2025 Розничные продажи алкоголя.Реквизиты для соответсвия
		ДанныеОбъекта.Вставить("НомерЧека",Новый ОписаниеТипов("Число"));
		ДанныеОбъекта.Вставить("ДатаЧека",Новый ОписаниеТипов("Дата"));
		//<<Швецов. 15.01.2025 Розничные продажи алкоголя.Реквизиты для соответсвия
		Если СтруктураТекущихСостояний.ВидДокумента = "ВыпускСоСписанием" Тогда
			ДанныеОбъекта.Вставить("СтатьяСписанияТМЦ", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.СтатьиРасходов"));
			ДанныеОбъекта.Вставить("АналитикаСписанияТМЦ", Метаданные.ПланыВидовХарактеристик.СтатьиРасходов.Тип);
		КонецЕсли;
		
		// Таблица "Товары"
		ТаблицаТовары = Новый ТаблицаЗначений;
		ТаблицаТовары.Колонки.Добавить("ИдентификаторСтроки",	Новый ОписаниеТипов("Строка"));
		ТаблицаТовары.Колонки.Добавить("Номенклатура",			Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ТаблицаТовары.Колонки.Добавить("Характеристика",		Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
		ТаблицаТовары.Колонки.Добавить("Серия",					Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
		ТаблицаТовары.Колонки.Добавить("СтатусУказанияСерий",	Новый ОписаниеТипов("Число"));
		ТаблицаТовары.Колонки.Добавить("Количество",			Новый ОписаниеТипов("Число"));
		ТаблицаТовары.Колонки.Добавить("ЕдиницаИзмерения",		Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
		ТаблицаТовары.Колонки.Добавить("Коэффициент",			Новый ОписаниеТипов("Число"));
		ТаблицаТовары.Колонки.Добавить("Сумма",					Новый ОписаниеТипов("Число"));
		ТаблицаТовары.Колонки.Добавить("СуммаНДС",				Новый ОписаниеТипов("Число"));
		ТаблицаТовары.Колонки.Добавить("СтавкаНДС",				Новый ОписаниеТипов("СправочникСсылка.СтавкиНДС"));
		ТаблицаТовары.Колонки.Добавить("СуммаРучнойСкидки",		Новый ОписаниеТипов("Число"));
		ТаблицаТовары.Колонки.Добавить("ПроцентРучнойСкидки",	Новый ОписаниеТипов("Число"));
		ТаблицаТовары.Колонки.Добавить("КоэффициентДеления", 	Новый ОписаниеТипов("Число"));
		//<<Портал-Юг, Давиденко 2019.03.26 [4.2.9 Особенности заполнения выпуска блюд по чекам]
		ТаблицаТовары.Колонки.Добавить("ПЛ_Договор",			Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
		//<< Портал-Юг, Баринов, 2019.08.15 [9.09 Обособление продаж по открытой цене]
		//ТаблицаТовары.Колонки.Добавить("ПЛ_ОтдельныйВыпускБезРецептур", Новый ОписаниеТипов("Булево"));
		//>> Портал-Юг, Баринов, 2019.08.15
		//<< Портал-Юг, Баринов, 2019.07.28 [4.2.9 Особенности заполнения выпуска блюд по чекам] 
		// Для предотвращения свёртки строк в отдельном выпуске без рецептур
		ТаблицаТовары.Колонки.Добавить("ПЛ_ИДСтроки", 			Новый ОписаниеТипов("Строка"));
		//>> Портал-Юг, Баринов, 2019.07.28
		//>>Портал-Юг, Давиденко 2019.03.26
		
		//>>Швецов. 25.02.2025 Розничные продажи алкоголя.Реквизиты для соответсвия
		ТаблицаТовары.Колонки.Добавить("НомерЧека", 		Новый ОписаниеТипов("Число"));
		ТаблицаТовары.Колонки.Добавить("ДатаЧека",      	Новый ОписаниеТипов("Дата"));
		ТаблицаТовары.Колонки.Добавить("MRS_ПозицияВЧеке",	Новый ОписаниеТипов("Число"));  //29.09.25
		//<<Швецов. 15.01.2025 Розничные продажи алкоголя.Реквизиты для соответсвия
		
		//>>Швецов. 02.04.2025 Розничные продажи алкоголя.Данные серий
		ТаблицаСерии = Новый ТаблицаЗначений;
		ТаблицаСерии.Колонки.Добавить("Номенклатура",			Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ТаблицаСерии.Колонки.Добавить("Серия",					Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
		ТаблицаСерии.Колонки.Добавить("Количество",			Новый ОписаниеТипов("Число"));
        //<<Швецов. 02.04.2025 Розничные продажи алкоголя.Данные серий
		
		// Таблица "Модификаторы"
		ТаблицаМодификаторы = Новый ТаблицаЗначений;
		ТаблицаМодификаторы.Колонки.Добавить("ИдентификаторСтроки",				Новый ОписаниеТипов("Строка"));
		ТаблицаМодификаторы.Колонки.Добавить("Номенклатура",					Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ТаблицаМодификаторы.Колонки.Добавить("Характеристика",					Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
		ТаблицаМодификаторы.Колонки.Добавить("Серия",							Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
		ТаблицаМодификаторы.Колонки.Добавить("СтатусУказанияСерий",				Новый ОписаниеТипов("Число"));
		ТаблицаМодификаторы.Колонки.Добавить("ЕдиницаИзмеренияНоменклатуры",	Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
		ТаблицаМодификаторы.Колонки.Добавить("Модификатор",						Новый ОписаниеТипов("СправочникСсылка.питМодификаторы"));
		ТаблицаМодификаторы.Колонки.Добавить("Количество",						Новый ОписаниеТипов("Число"));
		ТаблицаМодификаторы.Колонки.Добавить("КоличествоНоменклатуры",			Новый ОписаниеТипов("Число"));
		ТаблицаМодификаторы.Колонки.Добавить("КоличествоУпаковокНоменклатуры",	Новый ОписаниеТипов("Число"));
		ТаблицаМодификаторы.Колонки.Добавить("Сумма",							Новый ОписаниеТипов("Число"));
		ТаблицаМодификаторы.Колонки.Добавить("Цена",							Новый ОписаниеТипов("Число"));
		ТаблицаМодификаторы.Колонки.Добавить("СуммаСкидки",						Новый ОписаниеТипов("Число"));
		
		ДанныеОбъекта.Вставить("Товары",					ТаблицаТовары);
		ДанныеОбъекта.Вставить("Модификаторы",				ТаблицаМодификаторы);
		//>>Швецов. 02.04.2025 Розничные продажи алкоголя.Данные серий
		ДанныеОбъекта.Вставить("Серии", 					ТаблицаСерии);
        //<<Швецов. 02.04.2025 Розничные продажи алкоголя.Данные серий

		// Таблица "Оплаты"
		ТаблицаОплаты = Новый ТаблицаЗначений;
		ТаблицаОплаты.Колонки.Добавить("ВидОплаты", 			Новый ОписаниеТипов("СправочникСсылка.питВидыОплатОрганизаций"));
		ТаблицаОплаты.Колонки.Добавить("Карточка", 				Новый ОписаниеТипов("СправочникСсылка.питКарточки"));
		ТаблицаОплаты.Колонки.Добавить("Контрагент", 			Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
		ТаблицаОплаты.Колонки.Добавить("ДоговорВзаиморасчетов", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
		ТаблицаОплаты.Колонки.Добавить("Сумма", 				Новый ОписаниеТипов("Число"));
		ТаблицаОплаты.Колонки.Добавить("СуммаВозврат", 			Новый ОписаниеТипов("Число"));
		ТаблицаОплаты.Колонки.Добавить("КоличествоЧеков", 		Новый ОписаниеТипов("Число"));
		ТаблицаОплаты.Колонки.Добавить("ДатаОплаты",	 		Новый ОписаниеТипов("Дата"));
		ТаблицаОплаты.Колонки.Добавить("ВидОперации",	 		Новый ОписаниеТипов("ПеречислениеСсылка.питВидыОперацийПоЗагрузкеДанныхПродаж"));
		
		// Таблица "НачислениеБонусныхБаллов"
		НачислениеБонусныхБаллов = Новый ТаблицаЗначений;
		НачислениеБонусныхБаллов.Колонки.Добавить("Партнер",						Новый ОписаниеТипов("СправочникСсылка.Партнеры"));
		НачислениеБонусныхБаллов.Колонки.Добавить("БонуснаяПрограммаЛояльности",	Новый ОписаниеТипов("СправочникСсылка.БонусныеПрограммыЛояльности"));
		НачислениеБонусныхБаллов.Колонки.Добавить("ДатаНачисления",					Новый ОписаниеТипов("Дата"));
		НачислениеБонусныхБаллов.Колонки.Добавить("ДатаСписания",					Новый ОписаниеТипов("Дата"));
		НачислениеБонусныхБаллов.Колонки.Добавить("СуммаБонусныхБаллов",			Новый ОписаниеТипов("Число"));
		
		ДанныеОбъекта.Вставить("Оплаты",					ТаблицаОплаты);
		ДанныеОбъекта.Вставить("НачислениеБонусныхБаллов",	НачислениеБонусныхБаллов);
		
		//>> Швецов. 29.09.25 
		ТаблицаУчетАлкоголя = Новый ТаблицаЗначений;
		ТаблицаУчетАлкоголя.Колонки.Добавить("Номенклатура", 				Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ТаблицаУчетАлкоголя.Колонки.Добавить("Количество", 					Новый ОписаниеТипов("Число"));
		ТаблицаУчетАлкоголя.Колонки.Добавить("ЕдиницаИзмерения", 			Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
		ТаблицаУчетАлкоголя.Колонки.Добавить("КодАкциза", 					Новый ОписаниеТипов("Строка"));
		ТаблицаУчетАлкоголя.Колонки.Добавить("ШтрихкодУпаковки", 			Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров"));
		ТаблицаУчетАлкоголя.Колонки.Добавить("АлкогольнаяПродукция", 		Новый ОписаниеТипов("СправочникСсылка.КлассификаторАлкогольнойПродукцииЕГАИС"));
		ТаблицаУчетАлкоголя.Колонки.Добавить("КоличествоВМЛ", 				Новый ОписаниеТипов("Число"));
		ТаблицаУчетАлкоголя.Колонки.Добавить("НомерСтрокиОсновнойПозиции", 	Новый ОписаниеТипов("Число"));
		ДанныеОбъекта.Вставить("ТаблицаУчетАлкоголя",	НачислениеБонусныхБаллов);
		//<<
	ИначеЕсли СтруктураТекущихСостояний.ВидДокумента = "ВозвратОтПокупателя" Тогда
		ДанныеОбъекта.Вставить("ВидОперации",	 			Перечисления.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя);
		//ДанныеОбъекта.Вставить("Контрагент",				Справочники.Контрагенты.ПустаяСсылка());
		//ДанныеОбъекта.Вставить("Договор",					Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
		//ДанныеОбъекта.Вставить("Партнер",					Справочники.Партнеры.ПустаяСсылка());
		//ДанныеОбъекта.Вставить("Соглашение",				Справочники.СоглашенияСКлиентами.ПустаяСсылка());
		// Таблица "Товары"
		ТаблицаТовары = Новый ТаблицаЗначений;
		ТаблицаТовары.Колонки.Добавить("ИдентификаторСтроки",	Новый ОписаниеТипов("Строка"));
		ТаблицаТовары.Колонки.Добавить("Номенклатура",			Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ТаблицаТовары.Колонки.Добавить("Характеристика",		Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
		ТаблицаТовары.Колонки.Добавить("Серия",					Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
		ТаблицаТовары.Колонки.Добавить("СтатусУказанияСерий",	Новый ОписаниеТипов("Число"));
		ТаблицаТовары.Колонки.Добавить("Количество",			Новый ОписаниеТипов("Число"));
		ТаблицаТовары.Колонки.Добавить("КоличествоУпаковок",	Новый ОписаниеТипов("Число"));
		ТаблицаТовары.Колонки.Добавить("ЕдиницаИзмерения",		Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
		ТаблицаТовары.Колонки.Добавить("Коэффициент",			Новый ОписаниеТипов("Число"));
		ТаблицаТовары.Колонки.Добавить("Сумма",					Новый ОписаниеТипов("Число"));
		ТаблицаТовары.Колонки.Добавить("СуммаНДС",				Новый ОписаниеТипов("Число"));
		ТаблицаТовары.Колонки.Добавить("СтавкаНДС",				Новый ОписаниеТипов("СправочникСсылка.СтавкиНДС"));
		ТаблицаТовары.Колонки.Добавить("Себестоимость", 		Новый ОписаниеТипов("Число"));
		ТаблицаТовары.Колонки.Добавить("СуммаРучнойСкидки",		Новый ОписаниеТипов("Число"));
		ТаблицаТовары.Колонки.Добавить("ПроцентРучнойСкидки",	Новый ОписаниеТипов("Число"));
		
		//<<Портал-Юг, Финик 03.06.2020 [#inv99]
		ТаблицаТовары.Колонки.Добавить("ПЛ_Договор",			Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
		//>>Портал-Юг, Финик 03.06.2020 [#inv99]	
		
		ДанныеОбъекта.Вставить("Товары",ТаблицаТовары);
		
	ИначеЕсли СтруктураТекущихСостояний.ВидДокумента = "ПриходныйКассовыйОрдер"
		ИЛИ СтруктураТекущихСостояний.ВидДокумента = "ПриходныйКассовыйОрдерВозврат" Тогда
		ДанныеОбъекта.Вставить("Контрагент",				Справочники.Контрагенты.ПустаяСсылка());
		ДанныеОбъекта.Вставить("Договор",					Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
		ДанныеОбъекта.Вставить("Партнер",					Справочники.Партнеры.ПустаяСсылка());
		ДанныеОбъекта.Вставить("Соглашение",				Справочники.СоглашенияСКлиентами.ПустаяСсылка());
		
		ДанныеОбъекта.Вставить("СуммаОплаты",0);
		
	ИначеЕсли СтруктураТекущихСостояний.ВидДокумента = "ПоступлениеНаРасчетныйСчет"
		ИЛИ СтруктураТекущихСостояний.ВидДокумента = "ПоступлениеНаРасчетныйСчетВозврат" Тогда
		ДанныеОбъекта.Вставить("Контрагент",				Справочники.Контрагенты.ПустаяСсылка());
		ДанныеОбъекта.Вставить("Договор",					Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
		ДанныеОбъекта.Вставить("Партнер",					Справочники.Партнеры.ПустаяСсылка());
		ДанныеОбъекта.Вставить("Соглашение",				Справочники.СоглашенияСКлиентами.ПустаяСсылка());
		
		ДанныеОбъекта.Вставить("ЭквайринговыйТерминал",		Справочники.ЭквайринговыеТерминалы.ПустаяСсылка());
		ДанныеОбъекта.Вставить("ДоговорЭквайринга",			Справочники.ДоговорыЭквайринга.ПустаяСсылка());
		
		ДанныеОбъекта.Вставить("СуммаОплаты",0);
		
	ИначеЕсли СтруктураТекущихСостояний.ВидДокумента = "РеализацияТоваровУслуг" Тогда
		ДанныеОбъекта.Вставить("Контрагент",Справочники.Контрагенты.ПустаяСсылка());
		ДанныеОбъекта.Вставить("Договор",Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
		ДанныеОбъекта.Вставить("Партнер",Справочники.Партнеры.ПустаяСсылка());
		ДанныеОбъекта.Вставить("Соглашение",Справочники.СоглашенияСКлиентами.ПустаяСсылка());
		
		ДанныеОбъекта.Вставить("Склад",Справочники.Склады.ПустаяСсылка());
		
		// Таблица "Товары"
		ТаблицаТовары = Новый ТаблицаЗначений;
		ТаблицаТовары.Колонки.Добавить("Номенклатура",			Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ТаблицаТовары.Колонки.Добавить("Количество",			Новый ОписаниеТипов("Число"));
		ТаблицаТовары.Колонки.Добавить("ЕдиницаИзмерения",		Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
		ТаблицаТовары.Колонки.Добавить("Характеристика",		Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
		ТаблицаТовары.Колонки.Добавить("Серия",					Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
		ТаблицаТовары.Колонки.Добавить("СтатусУказанияСерий",	Новый ОписаниеТипов("Число"));
		ТаблицаТовары.Колонки.Добавить("Коэффициент",			Новый ОписаниеТипов("Число"));
		ТаблицаТовары.Колонки.Добавить("Сумма",					Новый ОписаниеТипов("Число"));
		ТаблицаТовары.Колонки.Добавить("СуммаНДС",				Новый ОписаниеТипов("Число"));
		ТаблицаТовары.Колонки.Добавить("СтавкаНДС",				Новый ОписаниеТипов("СправочникСсылка.СтавкиНДС"));
		ТаблицаТовары.Колонки.Добавить("СуммаРучнойСкидки",		Новый ОписаниеТипов("Число"));
		ТаблицаТовары.Колонки.Добавить("ПроцентРучнойСкидки",	Новый ОписаниеТипов("Число"));
		ТаблицаТовары.Колонки.Добавить("КоэффициентДеления", 	Новый ОписаниеТипов("Число"));
		ТаблицаТовары.Колонки.Добавить("ИдентификаторСтроки",	Новый ОписаниеТипов("Строка"));
		
		// Таблица "Модификаторы"
		ТаблицаМодификаторы = Новый ТаблицаЗначений;
		ТаблицаМодификаторы.Колонки.Добавить("Номенклатура",				 Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ТаблицаМодификаторы.Колонки.Добавить("Характеристика",				 Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
		ТаблицаМодификаторы.Колонки.Добавить("Серия",						 Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
		ТаблицаМодификаторы.Колонки.Добавить("СтатусУказанияСерий",			 Новый ОписаниеТипов("Число"));
		ТаблицаМодификаторы.Колонки.Добавить("ЕдиницаИзмеренияНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
		ТаблицаМодификаторы.Колонки.Добавить("Модификатор",					 Новый ОписаниеТипов("СправочникСсылка.питМодификаторы"));
		ТаблицаМодификаторы.Колонки.Добавить("Количество",					 Новый ОписаниеТипов("Число"));
		ТаблицаМодификаторы.Колонки.Добавить("КоличествоНоменклатуры",		 Новый ОписаниеТипов("Число"));
		ТаблицаМодификаторы.Колонки.Добавить("Сумма",						 Новый ОписаниеТипов("Число"));
		ТаблицаМодификаторы.Колонки.Добавить("Цена",						 Новый ОписаниеТипов("Число"));

		ДанныеОбъекта.Вставить("Товары",					ТаблицаТовары);
		ДанныеОбъекта.Вставить("Модификаторы",				ТаблицаМодификаторы);
	ИначеЕсли СтруктураТекущихСостояний.ВидДокумента = "УчетАлкоголяПиво" Тогда
		// Таблица "Товары"
		ТаблицаУчетАлкоголя = Новый ТаблицаЗначений;
		ТаблицаУчетАлкоголя.Колонки.Добавить("ДатаПодключенияИСМП",	Новый ОписаниеТипов("Дата"));
		ТаблицаУчетАлкоголя.Колонки.Добавить("АналитикаКодАкциза",	Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров"));
		ТаблицаУчетАлкоголя.Колонки.Добавить("СрокРеализацииИСМП",	Новый ОписаниеТипов("Дата"));
		ТаблицаУчетАлкоголя.Колонки.Добавить("ОбъемСливаИСМП",	Новый ОписаниеТипов("Число"));
		ДанныеОбъекта.Вставить("УчетАлкоголя", ТаблицаУчетАлкоголя);
	ИначеЕсли СтруктураТекущихСостояний.ВидДокумента = "УчетАлкоголяКрепкийАлкогольРег2"
		ИЛИ СтруктураТекущихСостояний.ВидДокумента = "УчетАлкоголяКрепкийАлкогольРег1" Тогда
		// Таблица "Товары"
		ДанныеОбъекта.Вставить("ОрганизацияЕГАИС", Справочники.КлассификаторОрганизацийЕГАИС.ПустаяСсылка());
		ТаблицаТовары = Новый ТаблицаЗначений;
		ТаблицаТовары.Колонки.Добавить("Номенклатура",			Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ТаблицаТовары.Колонки.Добавить("Количество",			Новый ОписаниеТипов("Число"));
		ТаблицаТовары.Колонки.Добавить("ЕдиницаИзмерения",		Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
		ТаблицаТовары.Колонки.Добавить("Характеристика",		Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
		ТаблицаТовары.Колонки.Добавить("Серия",					Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
		ТаблицаТовары.Колонки.Добавить("СтатусУказанияСерий",	Новый ОписаниеТипов("Число"));
		ТаблицаТовары.Колонки.Добавить("Коэффициент",			Новый ОписаниеТипов("Число"));
		ТаблицаТовары.Колонки.Добавить("ИдентификаторСтроки",	Новый ОписаниеТипов("Строка"));
		ТаблицаТовары.Колонки.Добавить("МаркируемаяПродукцияИСМП", Новый ОписаниеТипов("СправочникСсылка.КлассификаторАлкогольнойПродукцииЕГАИС"));
		ТаблицаТовары.Колонки.Добавить("СправкаИСМП",			Новый ОписаниеТипов("СправочникСсылка.Справки2ЕГАИС"));
		ТаблицаТовары.Колонки.Добавить("АналитикаКодАкциза",	Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров"));
		ТаблицаТовары.Колонки.Добавить("Цена",					 Новый ОписаниеТипов("Число"));
		ДанныеОбъекта.Вставить("Товары", ТаблицаТовары);
	КонецЕсли;
	Возврат ДанныеОбъекта
КонецФункции

// Заполняет ТЧ модификаторы для переданной строки товара
Процедура ЗаполнитьМодификаторыДляНоменклатуры(СтрокаТоваров, СуммаВычета,  КоэффициентДеления = 1)
	Если СтруктураТекущихСостояний.ВидДокумента = "АктОРеализации" 
		ИЛИ СтруктураТекущихСостояний.ВидДокумента = "СписаниеТоваров"
		ИЛИ СтруктураТекущихСостояний.ВидДокумента = "РеализацияТоваровУслуг"
		ИЛИ СтруктураТекущихСостояний.ВидДокумента = "ВыпускСРозничнойРеализацией" 
		ИЛИ СтруктураТекущихСостояний.ВидДокумента = "ВыпускСРеализацией" 
		ИЛИ СтруктураТекущихСостояний.ВидДокумента = "ВыпускСПеремещением" 
		ИЛИ СтруктураТекущихСостояний.ВидДокумента = "ВыпускСоСписанием" Тогда
		ИдентификаторСтроки = Новый УникальныйИдентификатор;
		СтрокаТоваров.ИдентификаторСтроки = ИдентификаторСтроки;
	КонецЕсли;
	
	Если СтрНайти(СтруктураТекущихСостояний.ВидДокумента, "Выпуск") <> 0 Тогда
		ЗаполнятьТЧМодификаторы = Истина;
	Иначе
		ЗаполнятьТЧМодификаторы = Ложь;
	КонецЕсли;
	
	// Найдем для данной номенклатуры идентификаторы строк
	// Запишем объект в таблицу соответствий
	Если СтруктураТекущихСостояний.ВидДокумента = "ВыпускСРозничнойРеализацией" Тогда 
		Если питФормироватьДокументыПроизводства22 Тогда
			СтруктураПоиска = Новый Структура("Организация,Подразделение,ВидДокумента,СкладПриготовления,СкладРеализации,ВедущийТипОплаты, СуммаВключаетНДС",СтруктураТекущихСостояний.Организация,СтруктураТекущихСостояний.Подразделение,СтруктураТекущихСостояний.ВидДокумента,СтруктураТекущихСостояний.СкладПриготовления,СтруктураТекущихСостояний.СкладРеализации, СтруктураТекущихСостояний.ВедущийТипОплаты, СтруктураТекущихСостояний.СуммаВключаетНДС);
		Иначе
			СтруктураПоиска = Новый Структура("Организация,Подразделение,ВидДокумента,СкладПриготовления,ВедущийТипОплаты, СуммаВключаетНДС",СтруктураТекущихСостояний.Организация,СтруктураТекущихСостояний.Подразделение,СтруктураТекущихСостояний.ВидДокумента,СтруктураТекущихСостояний.СкладПриготовления, СтруктураТекущихСостояний.ВедущийТипОплаты, СтруктураТекущихСостояний.СуммаВключаетНДС);
		КонецЕсли;
	ИначеЕсли СтруктураТекущихСостояний.ВидДокумента = "ВыпускСоСписанием"  Тогда
		СтруктураПоиска = Новый Структура("Организация,Подразделение,ВидДокумента,СкладПриготовления,СтатьяСписанияТМЦ,АналитикаСписанияТМЦ, СуммаВключаетНДС",СтруктураТекущихСостояний.Организация,СтруктураТекущихСостояний.Подразделение,СтруктураТекущихСостояний.ВидДокумента,СтруктураТекущихСостояний.СкладПриготовления, СтруктураТекущихСостояний.СтатьяСписанияТМЦ, СтруктураТекущихСостояний.АналитикаСписанияТМЦ, СтруктураТекущихСостояний.СуммаВключаетНДС);
	ИначеЕсли СтруктураТекущихСостояний.ВидДокумента = "ВыпускСПеремещением" Тогда
		СтруктураПоиска = Новый Структура("Организация,Подразделение,ВидДокумента,СкладПриготовления,СкладРеализации, СуммаВключаетНДС",СтруктураТекущихСостояний.Организация,СтруктураТекущихСостояний.Подразделение,СтруктураТекущихСостояний.ВидДокумента,СтруктураТекущихСостояний.СкладПриготовления,СтруктураТекущихСостояний.СкладРеализации, СтруктураТекущихСостояний.СуммаВключаетНДС);
	ИначеЕсли СтруктураТекущихСостояний.ВидДокумента = "СписаниеТоваров" Тогда
		СтруктураПоиска = Новый Структура("Организация,Подразделение,ВидДокумента,СкладРеализации, СтатьяСписанияТМЦ, СуммаВключаетНДС",СтруктураТекущихСостояний.Организация,СтруктураТекущихСостояний.Подразделение,СтруктураТекущихСостояний.ВидДокумента,СтруктураТекущихСостояний.СкладРеализации, СтруктураТекущихСостояний.СтатьяСписанияТМЦ, СтруктураТекущихСостояний.СуммаВключаетНДС);
	ИначеЕсли СтруктураТекущихСостояний.ВидДокумента = "АктОРеализации" Тогда
		СтруктураПоиска = Новый Структура("Организация,Подразделение,ВидДокумента,СкладРеализации,ВедущийТипОплаты, СуммаВключаетНДС",СтруктураТекущихСостояний.Организация,СтруктураТекущихСостояний.Подразделение,СтруктураТекущихСостояний.ВидДокумента,СтруктураТекущихСостояний.СкладРеализации, СтруктураТекущихСостояний.ВедущийТипОплаты, СтруктураТекущихСостояний.СуммаВключаетНДС);
	Иначе
		СтруктураПоиска = Новый Структура("Организация,Подразделение,ВидДокумента,СкладРеализации, СуммаВключаетНДС",СтруктураТекущихСостояний.Организация,СтруктураТекущихСостояний.Подразделение,СтруктураТекущихСостояний.ВидДокумента,СтруктураТекущихСостояний.СкладРеализации, СтруктураТекущихСостояний.СуммаВключаетНДС);
	КонецЕсли;
	Если ГруппироватьПоНомеруСмены Тогда
		СтруктураПоиска.Вставить("КассаККМ", СтруктураТекущихСостояний.КассаККМ);
		СтруктураПоиска.Вставить("НомерСмены", СтруктураТекущихСостояний.НомерСмены);
		//+группировка по дате смены
		СтруктураПоиска.Вставить("ДатаСмены", СтруктураТекущихСостояний.ДатаСмены);
	КонецЕсли;
	// ищем нужную номенклатуру
	СтруктураПоиска.Вставить("НоменклатураОсновнойПозиции", СтрокаТоваров.Номенклатура);
	СтруктураПоиска.Вставить("ХарактеристикаОсновнойПозиции", СтрокаТоваров.Характеристика);
	СтруктураПоиска.Вставить("СерияОсновнойПозиции", СтрокаТоваров.Серия);
	МодификаторыНоменклатуры = ТаблицаПродажМодификаторы.НайтиСтроки(СтруктураПоиска);
	Для Каждого СтрокаИдентификатор Из МодификаторыНоменклатуры Цикл
		
		Если СтруктураТекущихСостояний.ВидДокумента = "ВозвратОтПокупателя" Тогда
			// В случае с возвратом модификаторы не заполняем, но общую сумму модификаторов прибавляем к сумме номенклатуры.
			//+КоэффициентДеления2
			СтрокаТоваров.Сумма = СтрокаТоваров.Сумма + СтрокаИдентификатор.СуммаПоКоэффициенту;
			СтрокаТоваров.СуммаРучнойСкидки = СтрокаТоваров.СуммаРучнойСкидки + СтрокаИдентификатор.СуммаСкидкиПоКоэффициенту;
			//-КоэффициентДеления2
			
		ИначеЕсли СтруктураТекущихСостояний.ВидДокумента = "СписаниеТоваров"
			ИЛИ СтруктураТекущихСостояний.ВидДокумента = "АктОРеализации" 
			ИЛИ СтруктураТекущихСостояний.ВидДокумента = "РеализацияТоваровУслуг" 
			//ИЛИ СтруктураТекущихСостояний.ВидДокумента = "ВыпускСПеремещением" 
			Тогда
			
			НайденныеСтрокиДанныеОбъекта = ДанныеОбъекта.Товары.НайтиСтроки(Новый Структура("Номенклатура, Характеристика, Серия", СтрокаИдентификатор.Номенклатура, СтрокаИдентификатор.Характеристика, СтрокаИдентификатор.Серия));
			Если НайденныеСтрокиДанныеОбъекта.Количество() Тогда
				НоваяСтрока = НайденныеСтрокиДанныеОбъекта[0];
			Иначе
				НоваяСтрока = ДанныеОбъекта.Товары.Добавить();
				НоваяСтрока.Номенклатура = СтрокаИдентификатор.Номенклатура;
				НоваяСтрока.Характеристика = СтрокаИдентификатор.Характеристика;
				НоваяСтрока.Серия = СтрокаИдентификатор.Серия;
				НоваяСтрока.СтатусУказанияСерий = СтрокаИдентификатор.СтатусУказанияСерий;
				НоваяСтрока.ЕдиницаИзмерения = СтрокаИдентификатор.Модификатор.ЕдиницаИзмеренияНоменклатуры;
				НоваяСтрока.Коэффициент = питОбщегоНазначения.ПолучитьКоэффициентУпаковки(СтрокаИдентификатор.Номенклатура, СтрокаИдентификатор.Модификатор.ЕдиницаИзмеренияНоменклатуры, УпаковкиКэшированныеЗначения);
				НоваяСтрока.СтавкаНДС = СтрокаТоваров.СтавкаНДС;
				НоваяСтрока.ИдентификаторСтроки = ИдентификаторСтроки;
				Если НЕ СтруктураТекущихСостояний.ВидДокумента = "СписаниеТоваров" Тогда
					НоваяСтрока.СтавкаНДС = СтрокаТоваров.СтавкаНДС;
				КонецЕсли;
			КонецЕсли;
			
			//+КоэффициентДеления2
			НоваяСтрока.Количество			= НоваяСтрока.Количество + СтрокаИдентификатор.КоличествоМодификатораПоКоэффициенту;
			//-КоэффициентДеления2
			
			Если НЕ СтруктураТекущихСостояний.ВидДокумента = "СписаниеТоваров" Тогда
				//+КоэффициентДеления2
				// номенклатуру модификатора спишем по партиям
				Если СтрокаТоваров.Номенклатура.питВидНоменклатуры = Перечисления.питВидыНоменклатуры.БизнесЛанч ИЛИ СтрокаТоваров.Номенклатура.питВидНоменклатуры = Перечисления.питВидыНоменклатуры.Услуга Тогда
					// Добавим сумму модификаторов для товаров
					СтрокаТоваров.Сумма = СтрокаТоваров.Сумма + СтрокаИдентификатор.СуммаПоКоэффициенту;
					СтрокаТоваров.СуммаРучнойСкидки = СтрокаТоваров.СуммаРучнойСкидки + СтрокаИдентификатор.СуммаСкидкиПоКоэффициенту;
				Иначе
					НоваяСтрока.Сумма = НоваяСтрока.Сумма + СтрокаИдентификатор.СуммаПоКоэффициенту;
				КонецЕсли;
				//-КоэффициентДеления2  
			КонецЕсли;
			
			СуммаВычета = СуммаВычета + ВычестьВозвратыИзМодификаторов(НоваяСтрока);
		ИначеЕсли СтруктураТекущихСостояний.ВидДокумента = "РеализацияТоваровУслуг" Тогда
			//РеализацияТоваровУслуг не имеет ТЧ Модификаторы
			//+КоэффициентДеления2
			СтрокаТоваров.Сумма = СтрокаТоваров.Сумма + СтрокаИдентификатор.СуммаПоКоэффициенту;
			СтрокаТоваров.СуммаРучнойСкидки = СтрокаТоваров.СуммаРучнойСкидки + СтрокаИдентификатор.СуммаСкидкиПоКоэффициенту;
			//-КоэффициентДеления2
		Иначе
			СтруктураМодификатор = Новый Структура("Номенклатура, Характеристика, Серия, Модификатор, ЕдиницаИзмеренияНоменклатуры ,ИдентификаторСтроки", СтрокаИдентификатор.Номенклатура, СтрокаИдентификатор.Характеристика, СтрокаИдентификатор.Серия, СтрокаИдентификатор.Модификатор, СтрокаИдентификатор.Модификатор.ЕдиницаИзмеренияНоменклатуры, ИдентификаторСтроки);
			ДобавленныеМодификаторы = ДанныеОбъекта.Модификаторы.НайтиСтроки(СтруктураМодификатор);
			Если ДобавленныеМодификаторы.Количество() > 0 Тогда
				НоваяСтрока = ДобавленныеМодификаторы[0];
				
				//+КоэффициентДеления2
				НоваяСтрока.КоличествоНоменклатуры			= НоваяСтрока.КоличествоНоменклатуры + СтрокаИдентификатор.КоличествоНоменклатурыПоКоэффициенту;
				НоваяСтрока.КоличествоУпаковокНоменклатуры	= НоваяСтрока.КоличествоУпаковокНоменклатуры + СтрокаИдентификатор.КоличествоУпаковокНоменклатурыПоКоэффициенту;
				
				НоваяСтрока.Сумма = НоваяСтрока.Сумма + СтрокаИдентификатор.СуммаПоКоэффициенту;
				НоваяСтрока.Количество = НоваяСтрока.Количество + СтрокаИдентификатор.КоличествоМодификатораПоКоэффициенту;
				//-КоэффициентДеления2
				
			Иначе
				
				НоваяСтрока = ДанныеОбъекта.Модификаторы.Добавить();
				НоваяСтрока.Номенклатура = СтрокаИдентификатор.Номенклатура;
				НоваяСтрока.Характеристика = СтрокаИдентификатор.Характеристика;
				НоваяСтрока.Серия = СтрокаИдентификатор.Серия;
				НоваяСтрока.СтатусУказанияСерий = СтрокаИдентификатор.СтатусУказанияСерий;
				НоваяСтрока.Модификатор = СтрокаИдентификатор.Модификатор;
				НоваяСтрока.ЕдиницаИзмеренияНоменклатуры = СтрокаИдентификатор.Модификатор.ЕдиницаИзмеренияНоменклатуры;
				
				//+КоэффициентДеления2
				НоваяСтрока.КоличествоНоменклатуры			= СтрокаИдентификатор.КоличествоНоменклатурыПоКоэффициенту;
				НоваяСтрока.КоличествоУпаковокНоменклатуры	= СтрокаИдентификатор.КоличествоУпаковокНоменклатурыПоКоэффициенту;
				
				НоваяСтрока.Сумма = СтрокаИдентификатор.СуммаПоКоэффициенту;
				НоваяСтрока.Количество = СтрокаИдентификатор.КоличествоМодификатораПоКоэффициенту;
				//-КоэффициентДеления2
				НоваяСтрока.ИдентификаторСтроки = ИдентификаторСтроки;
			КонецЕсли;
			НоваяСтрока.Цена = ?(НоваяСтрока.Количество = 0,0,НоваяСтрока.Сумма / НоваяСтрока.Количество);
			
			// Добавим сумму модификаторов для товаров
			//+КоэффициентДеления2
			СтрокаТоваров.Сумма = СтрокаТоваров.Сумма + СтрокаИдентификатор.СуммаПоКоэффициенту;
			СтрокаТоваров.СуммаРучнойСкидки = СтрокаТоваров.СуммаРучнойСкидки + СтрокаИдентификатор.СуммаСкидкиПоКоэффициенту;
			//-КоэффициентДеления2
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры

// сворачиваем продажи и возврат, возвращает сумму вычета
Функция ВычестьВозвратыИзТоваров(СтрокаТоваров, КоэффициентДеления = 1)
	СуммаВычета = 0;
	
	СтрокаПараметров = ПараметрыКасс.Найти(СтруктураТекущихСостояний.КассаККМ,"КассаККМ");
	Если СтрокаПараметров = Неопределено Тогда
		УчитыватьВозвратыПриЗагрузкеПродаж = Ложь;
	Иначе
		УчитыватьВозвратыПриЗагрузкеПродаж = СтрокаПараметров.УчитыватьВозвратыПриЗагрузкеПродаж;
	КонецЕсли;
	Если НЕ УчитыватьВозвратыПриЗагрузкеПродаж Тогда
		Возврат 0;
	КонецЕсли;
	// Вначале для модификаторов
	Если СтруктураТекущихСостояний.ВидДокумента = "ВыпускСРозничнойРеализацией" Тогда 
		Если питФормироватьДокументыПроизводства22 Тогда
			СтруктураПоиска = Новый Структура("Организация,Подразделение,СкладРеализации",СтруктураТекущихСостояний.Организация,СтруктураТекущихСостояний.Подразделение,СтруктураТекущихСостояний.СкладРеализации);
		Иначе
			СтруктураПоиска = Новый Структура("Организация,Подразделение,СкладРеализации",СтруктураТекущихСостояний.Организация,СтруктураТекущихСостояний.Подразделение,СтруктураТекущихСостояний.СкладПриготовления);
		КонецЕсли;
	ИначеЕсли СтруктураТекущихСостояний.ВидДокумента = "АктОРеализации" Тогда
		СтруктураПоиска = Новый Структура("Организация,Подразделение,СкладРеализации",СтруктураТекущихСостояний.Организация,СтруктураТекущихСостояний.Подразделение,СтруктураТекущихСостояний.СкладРеализации);
	Иначе
		СтруктураПоиска = Новый Структура("Организация,Подразделение,СкладРеализации",СтруктураТекущихСостояний.Организация,СтруктураТекущихСостояний.Подразделение,СтруктураТекущихСостояний.СкладРеализации);
	КонецЕсли;
	Если СтруктураТекущихСостояний.ВидДокумента = "ВыпускСРеализацией" Или СтруктураТекущихСостояний.ВидДокумента = "РеализацияТоваровУслуг" Тогда
		СтруктураПоиска.Вставить("КонтрагентДляЗачетаАванса",СтруктураТекущихСостояний.КонтрагентДляЗачетаАванса);
		СтруктураПоиска.Вставить("ДоговорКонтрагентаДляЗачетаАванса",СтруктураТекущихСостояний.ДоговорКонтрагентаДляЗачетаАванса);
		СтруктураПоиска.Вставить("СоглашениеДляЗачетаАванса",СтруктураТекущихСостояний.СоглашениеДляЗачетаАванса);
		СтруктураПоиска.Вставить("КлиентДляЗачетаАванса",СтруктураТекущихСостояний.КлиентДляЗачетаАванса);
	КонецЕсли;
	СтруктураПоиска.Вставить("ВидДокумента", "ВозвратОтПокупателя");
		
	Если ГруппироватьПоНомеруСмены Тогда
		СтруктураПоиска.Вставить("КассаККМ", СтруктураТекущихСостояний.КассаККМ);
		СтруктураПоиска.Вставить("НомерСмены", СтруктураТекущихСостояний.НомерСмены);
		//+группировка по дате смены
		СтруктураПоиска.Вставить("ДатаСмены", СтруктураТекущихСостояний.ДатаСмены);
	КонецЕсли;
		
	НайденныеМодификаторы = ДанныеОбъекта.Модификаторы.НайтиСтроки(Новый Структура("ИдентификаторСтроки", СтрокаТоваров.ИдентификаторСтроки));
	Для Каждого СтрокаМодификатора Из НайденныеМодификаторы Цикл
		// ищем нужную номенклатуру
		СтруктураПоиска.Вставить("Номенклатура", СтрокаМодификатора.Номенклатура);
		СтруктураПоиска.Вставить("Характеристика", СтрокаМодификатора.Характеристика);
		СтруктураПоиска.Вставить("Серия", СтрокаМодификатора.Серия);
		СтруктураПоиска.Вставить("НоменклатураОсновнойПозиции", СтрокаТоваров.Номенклатура);
		СтруктураПоиска.Вставить("ХарактеристикаОсновнойПозиции", СтрокаТоваров.Характеристика);
		СтруктураПоиска.Вставить("СерияОсновнойПозиции", СтрокаТоваров.Серия);
		СтрокиВозвратовМодификаторов = ТаблицаПродажМодификаторы.НайтиСтроки(СтруктураПоиска);
		Для Каждого СтрокаВозврата Из СтрокиВозвратовМодификаторов Цикл
			Если СтрокаВозврата.КоличествоМодификатора <=  СтрокаМодификатора.Количество Тогда
				КоличествоКВычету = СтрокаВозврата.КоличествоМодификатора;
				КоличествоКВычетуНоменклатуры = СтрокаВозврата.КоличествоНоменклатуры;
				СуммаКВычету = СтрокаВозврата.Сумма;
				СуммаВычета = СуммаВычета + СтрокаВозврата.Сумма;
			Иначе
				КоличествоКВычету = СтрокаМодификатора.Количество;
				КоличествоКВычетуНоменклатуры = СтрокаМодификатора.КоличествоНоменклатуры;
				СуммаКВычету = СтрокаМодификатора.Сумма;
				СуммаВычета = СуммаВычета + СтрокаМодификатора.Сумма;
			КонецЕсли;
			СтрокаМодификатора.Количество = СтрокаМодификатора.Количество - КоличествоКВычету;
			СтрокаВозврата.КоличествоМодификатора = СтрокаВозврата.КоличествоМодификатора - КоличествоКВычету;
			
			СтрокаМодификатора.КоличествоНоменклатуры = СтрокаМодификатора.КоличествоНоменклатуры - КоличествоКВычетуНоменклатуры;
			СтрокаВозврата.КоличествоНоменклатуры = СтрокаВозврата.КоличествоНоменклатуры - КоличествоКВычетуНоменклатуры;
			
			СтрокаМодификатора.Сумма = СтрокаМодификатора.Сумма - СуммаКВычету;
			СтрокаВозврата.Сумма = СтрокаВозврата.Сумма - СуммаКВычету;
			
			// Вычтем сумму из товаров
			СтрокаТоваров.Сумма = СтрокаТоваров.Сумма - СуммаКВычету;
			
		КонецЦикла;
	КонецЦикла;
	
	// Найдем для данной номенклатуры идентификаторы строк
	// Запишем объект в таблицу соответствий
	Если СтруктураТекущихСостояний.ВидДокумента = "ВыпускСРозничнойРеализацией" Тогда 
		Если питФормироватьДокументыПроизводства22 Тогда
			СтруктураПоиска = Новый Структура("Организация,Подразделение,СкладРеализации",СтруктураТекущихСостояний.Организация,СтруктураТекущихСостояний.Подразделение,СтруктураТекущихСостояний.СкладРеализации);
		Иначе
			СтруктураПоиска = Новый Структура("Организация,Подразделение,СкладРеализации",СтруктураТекущихСостояний.Организация,СтруктураТекущихСостояний.Подразделение,СтруктураТекущихСостояний.СкладПриготовления);
		КонецЕсли;
	ИначеЕсли СтруктураТекущихСостояний.ВидДокумента = "АктОРеализации" Тогда
		СтруктураПоиска = Новый Структура("Организация,Подразделение,СкладРеализации",СтруктураТекущихСостояний.Организация,СтруктураТекущихСостояний.Подразделение,СтруктураТекущихСостояний.СкладРеализации);
	Иначе
		Возврат 0;
	КонецЕсли;
	СтруктураПоиска.Вставить("ВидДокумента", "ВозвратОтПокупателя");
	Если ГруппироватьПоНомеруСмены Тогда
		СтруктураПоиска.Вставить("КассаККМ", СтруктураТекущихСостояний.КассаККМ);
		СтруктураПоиска.Вставить("НомерСмены", СтруктураТекущихСостояний.НомерСмены);
		//+группировка по дате смены
		СтруктураПоиска.Вставить("ДатаСмены", СтруктураТекущихСостояний.ДатаСмены);
	КонецЕсли;
	
	// ищем нужную номенклатуру
	СтруктураПоиска.Вставить("Номенклатура", СтрокаТоваров.Номенклатура);
	СтруктураПоиска.Вставить("Характеристика", СтрокаТоваров.Характеристика);
	СтруктураПоиска.Вставить("Серия", СтрокаТоваров.Серия);
	СтруктураПоиска.Вставить("СтавкаНДС", СтрокаТоваров.СтавкаНДС);
	//<< Портал-Юг, Баринов, 2019.09.14 [4.2.9 Особенности заполнения выпуска блюд по чекам]
	СтруктураПоиска.Вставить("ПЛ_Договор", СтрокаТоваров.ПЛ_Договор);
	СтруктураПоиска.Вставить("ПЛ_НоменклатураОткрытаяЦена", СтруктураТекущихСостояний.ПЛ_НоменклатураОткрытаяЦена);
	Если ЗначениеЗаполнено(СтруктураТекущихСостояний.ПЛ_НоменклатураОткрытаяЦена) Тогда
		// Для открытой цены используем отдельный алгоритм учёта возвратов
		Возврат СуммаВычета;
	КонецЕсли; 
	//>> Портал-Юг, Баринов, 2019.09.14

	СтрокиВозвратов = ТаблицаПродаж.НайтиСтроки(СтруктураПоиска);
	
	Для Каждого СтрокаВозврата Из СтрокиВозвратов Цикл
		Если СтрокаВозврата.Количество <= СтрокаТоваров.Количество Тогда
			КоличествоКВычету = СтрокаВозврата.Количество;
			СуммаКВычету = СтрокаВозврата.Сумма;
			СуммаВычета = СуммаВычета + СтрокаВозврата.Сумма;
		Иначе
			КоличествоКВычету = СтрокаТоваров.Количество;
			СуммаКВычету = СтрокаТоваров.Сумма;
			СуммаВычета = СуммаВычета + СтрокаТоваров.Сумма;
		КонецЕсли;
		СтрокаТоваров.Количество = СтрокаТоваров.Количество - КоличествоКВычету;
		СтрокаВозврата.Количество = СтрокаВозврата.Количество - КоличествоКВычету;
		
		СтрокаТоваров.Сумма = СтрокаТоваров.Сумма - СуммаКВычету;
		СтрокаВозврата.Сумма = СтрокаВозврата.Сумма - СуммаКВычету;
		
		//<< Портал-Юг, Баринов, 2019.09.14 [9.33 Уменьшение продаж на возвраты по открытой цене при формировании выпусков блюд]
		Если СтрокаВозврата.Количество = 0 Тогда
			СуммаСкидкиКВычету = СтрокаВозврата.СуммаСкидки;
		Иначе
			СуммаСкидкиКВычету = СтрокаТоваров.СуммаРучнойСкидки;
		КонецЕсли;
		СтрокаВозврата.СуммаСкидки = СтрокаВозврата.СуммаСкидки - СуммаСкидкиКВычету;
		СтрокаТоваров.СуммаРучнойСкидки = СтрокаТоваров.СуммаРучнойСкидки - СуммаСкидкиКВычету;
		
		Если СтрокаТоваров.Сумма + СтрокаТоваров.СуммаРучнойСкидки = 0 Тогда
			СтрокаТоваров.ПроцентРучнойСкидки = 0;
		Иначе
			СтрокаТоваров.ПроцентРучнойСкидки	= (СтрокаТоваров.СуммаРучнойСкидки / (СтрокаТоваров.Сумма + СтрокаТоваров.СуммаРучнойСкидки)) * 100;
		КонецЕсли;		
		//>> Портал-Юг, Баринов, 2019.09.14

		
		Если СтрокаТоваров.Количество = 0 Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СуммаВычета;
КонецФункции  

// Если стоит настройка "УчитыватьВозвратыПриЗагрузкеПродаж", то из док. "ВозвратОтПокупателя" вычитаем те же строки что вычли из продаж
Процедура ВычестьВозвратыИзВозвратов(СтрокаТоваров)
	
	СтрокаПараметров = ПараметрыКасс.Найти(СтруктураТекущихСостояний.КассаККМ,"КассаККМ");
	Если СтрокаПараметров = Неопределено Тогда
		УчитыватьВозвратыПриЗагрузкеПродаж = Ложь;
	Иначе
		УчитыватьВозвратыПриЗагрузкеПродаж = СтрокаПараметров.УчитыватьВозвратыПриЗагрузкеПродаж;
	КонецЕсли;
	Если НЕ УчитыватьВозвратыПриЗагрузкеПродаж Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("Организация,Подразделение,СкладРеализации",СтруктураТекущихСостояний.Организация,СтруктураТекущихСостояний.Подразделение,СтруктураТекущихСостояний.СкладРеализации);
	СтруктураПоиска.Вставить("ВидДокумента", "ВозвратОтПокупателя");
	Если ГруппироватьПоНомеруСмены Тогда
		СтруктураПоиска.Вставить("КассаККМ", СтруктураТекущихСостояний.КассаККМ);
		СтруктураПоиска.Вставить("НомерСмены", СтруктураТекущихСостояний.НомерСмены);
		//+группировка по дате смены
		СтруктураПоиска.Вставить("ДатаСмены", СтруктураТекущихСостояний.ДатаСмены);
	КонецЕсли;
	// ищем нужную номенклатуру
	СтруктураПоиска.Вставить("Номенклатура", СтрокаТоваров.Номенклатура);
	СтруктураПоиска.Вставить("Характеристика", СтрокаТоваров.Характеристика);
	СтруктураПоиска.Вставить("Серия", СтрокаТоваров.Серия);
	СтруктураПоиска.Вставить("СтавкаНДС", СтрокаТоваров.СтавкаНДС);
	СтрокиВозвратов = ТаблицаПродаж.НайтиСтроки(СтруктураПоиска);
	
	СуммаВозвратов = 0;
	КоличествоВозвратов = 0;
	Для Каждого СтрокаВозврата Из СтрокиВозвратов Цикл
		СуммаВозвратов = СуммаВозвратов + СтрокаВозврата.Сумма;
		КоличествоВозвратов = КоличествоВозвратов + СтрокаВозврата.Количество;
	КонецЦикла;
	
	СтрокаТоваров.Сумма = СуммаВозвратов;
	СтрокаТоваров.Количество = КоличествоВозвратов;
	
КонецПроцедуры

Функция ВычестьВозвратыИзМодификаторов(СтрокаМодификатора)
	СуммаВычета = 0;
	
	СтрокаПараметров = ПараметрыКасс.Найти(СтруктураТекущихСостояний.КассаККМ,"КассаККМ");
	Если СтрокаПараметров = Неопределено Тогда
		УчитыватьВозвратыПриЗагрузкеПродаж = Ложь;
	Иначе
		УчитыватьВозвратыПриЗагрузкеПродаж = СтрокаПараметров.УчитыватьВозвратыПриЗагрузкеПродаж;
	КонецЕсли;
	Если НЕ УчитыватьВозвратыПриЗагрузкеПродаж Тогда
		Возврат 0;
	КонецЕсли;
	// Вначале для модификаторов
	Если СтруктураТекущихСостояний.ВидДокумента = "ВыпускСРозничнойРеализацией" Тогда 
		Если питФормироватьДокументыПроизводства22 Тогда
			СтруктураПоиска = Новый Структура("Организация,Подразделение,СкладРеализации",СтруктураТекущихСостояний.Организация,СтруктураТекущихСостояний.Подразделение,СтруктураТекущихСостояний.СкладРеализации);
		Иначе
			СтруктураПоиска = Новый Структура("Организация,Подразделение,СкладРеализации",СтруктураТекущихСостояний.Организация,СтруктураТекущихСостояний.Подразделение,СтруктураТекущихСостояний.СкладПриготовления);
		КонецЕсли;
	ИначеЕсли СтруктураТекущихСостояний.ВидДокумента = "АктОРеализации" Тогда
		СтруктураПоиска = Новый Структура("Организация,Подразделение,СкладРеализации",СтруктураТекущихСостояний.Организация,СтруктураТекущихСостояний.Подразделение,СтруктураТекущихСостояний.СкладРеализации);
	Иначе 
		Возврат 0;
	КонецЕсли;
	СтруктураПоиска.Вставить("ВидДокумента", "ВозвратОтПокупателя");
	Если ГруппироватьПоНомеруСмены Тогда
		СтруктураПоиска.Вставить("КассаККМ", СтруктураТекущихСостояний.КассаККМ);
		СтруктураПоиска.Вставить("НомерСмены", СтруктураТекущихСостояний.НомерСмены);
		//+группировка по дате смены
		СтруктураПоиска.Вставить("ДатаСмены", СтруктураТекущихСостояний.ДатаСмены);
	КонецЕсли;
	
	// ищем нужную номенклатуру
	СтруктураПоиска.Вставить("Номенклатура", СтрокаМодификатора.Номенклатура);
	СтруктураПоиска.Вставить("Характеристика", СтрокаМодификатора.Характеристика);
	СтруктураПоиска.Вставить("Серия", СтрокаМодификатора.Серия);
	СтрокиВозвратовМодификаторов = ТаблицаПродажМодификаторы.НайтиСтроки(СтруктураПоиска);
	Для Каждого СтрокаВозврата Из СтрокиВозвратовМодификаторов Цикл
		Если СтрокаВозврата.КоличествоМодификатора <=  СтрокаМодификатора.Количество Тогда
			КоличествоКВычету = СтрокаВозврата.КоличествоМодификатора;
			КоличествоКВычетуНоменклатуры = СтрокаВозврата.КоличествоНоменклатуры;
			СуммаКВычету = СтрокаВозврата.Сумма;
			СуммаВычета = СуммаВычета + СтрокаВозврата.Сумма;
		Иначе
			КоличествоКВычету = СтрокаМодификатора.Количество;
			СуммаКВычету = СтрокаМодификатора.Сумма;
			СуммаВычета = СуммаВычета + СтрокаМодификатора.Сумма;
		КонецЕсли;
		СтрокаМодификатора.Количество = СтрокаМодификатора.Количество - КоличествоКВычету;
		СтрокаВозврата.КоличествоМодификатора = СтрокаВозврата.КоличествоМодификатора - КоличествоКВычету;
		
		СтрокаМодификатора.Сумма = СтрокаМодификатора.Сумма - СуммаКВычету;
		СтрокаВозврата.Сумма = СтрокаВозврата.Сумма - СуммаКВычету;
		
		//// Вычтем сумму из товаров
		//СтрокаТоваров = ДанныеОбъекта.Товары.Найти(СтрокаМодификатора.ИдентификаторСтроки);
		//Если СтрокаТоваров <> Неопределено Тогда
		//	СтрокаТоваров.Сумма = СтрокаТоваров.Сумма - СуммаКВычету;
		//КонецЕсли;
	КонецЦикла;
	
	Возврат СуммаВычета;
КонецФункции

// сворачиваем оплаты продаж и возвратов
Процедура ВычестьВозвратыИзОплат(СуммаВычета)
	СуммаКВычету = 0;
	Для Каждого СтрокаОплат Из ДанныеОбъекта.Оплаты Цикл
		СуммаКВычету = Мин(СтрокаОплат.Сумма - СтрокаОплат.СуммаВозврат, СуммаВычета);
		
		СтрокаОплат.Сумма = СтрокаОплат.Сумма - СуммаКВычету;
		СуммаВычета = СуммаВычета - СуммаКВычету;
		
		Если СуммаВычета = 0 Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Удалим строки с нулевым количеством
Процедура УдалитьСтрокиСНулевымКоличеством()
	// Обработка свернутых строк возвратов и продаж
	МассивСтрокДляУдаления = Новый Массив;
	Если СтруктураТекущихСостояний.ВидДокумента <> "СписаниеТоваров" 
		И СтруктураТекущихСостояний.ВидДокумента <> "ВозвратОтПокупателя" 
		И СтруктураТекущихСостояний.ВидДокумента <> "ПриходныйКассовыйОрдер" 
		И СтруктураТекущихСостояний.ВидДокумента <> "ПоступлениеНаРасчетныйСчет"
		И СтруктураТекущихСостояний.ВидДокумента <> "ПриходныйКассовыйОрдерВозврат" 
		И СтруктураТекущихСостояний.ВидДокумента <> "ПоступлениеНаРасчетныйСчетВозврат" Тогда
		Для Каждого СтрокаМодификатора Из ДанныеОбъекта.Модификаторы Цикл
			Если СтрокаМодификатора.Количество = 0 Тогда
				МассивСтрокДляУдаления.Добавить(СтрокаМодификатора);
			КонецЕсли;
		КонецЦикла;
		Для Каждого СтрокаМассива Из МассивСтрокДляУдаления Цикл
			ДанныеОбъекта.Модификаторы.Удалить(СтрокаМассива);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураТекущихСостояний.ВидДокумента <> "ПриходныйКассовыйОрдер" 
		И СтруктураТекущихСостояний.ВидДокумента <> "ПоступлениеНаРасчетныйСчет"
		И СтруктураТекущихСостояний.ВидДокумента <> "ПриходныйКассовыйОрдерВозврат" 
		И СтруктураТекущихСостояний.ВидДокумента <> "ПоступлениеНаРасчетныйСчетВозврат" Тогда
		// Удалим строки ТЧ с 0 количеством
		МассивСтрокДляУдаления.Очистить();
		Для Каждого СтрокаТоваров Из ДанныеОбъекта.Товары Цикл
			Если СтрокаТоваров.Количество = 0 Тогда
				МассивСтрокДляУдаления.Добавить(СтрокаТоваров);
			КонецЕсли;
		КонецЦикла;
		Для Каждого СтрокаМассива Из МассивСтрокДляУдаления Цикл
			ДанныеОбъекта.Товары.Удалить(СтрокаМассива);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураТекущихСостояний.ВидДокумента = "ВыпускСРозничнойРеализацией" ИЛИ СтруктураТекущихСостояний.ВидДокумента = "АктОРеализации" Тогда
		// Удалим строки ТЧ с 0 оплатой
		МассивСтрокДляУдаления.Очистить();
		Для Каждого СтрокаОплат Из ДанныеОбъекта.Оплаты Цикл
			Если (СтрокаОплат.Сумма - СтрокаОплат.СуммаВозврат) = 0 Тогда
				МассивСтрокДляУдаления.Добавить(СтрокаОплат);
			КонецЕсли;
		КонецЦикла;
		Для Каждого СтрокаМассива Из МассивСтрокДляУдаления Цикл
			ДанныеОбъекта.Оплаты.Удалить(СтрокаМассива);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// Процедура для создания документа определенного вида
Процедура СоздатьДокумент(Отказ = Ложь)
	Если СтруктураТекущихСостояний.ВидДокумента = "АктОРеализации" Тогда
		СоздатьДокументОтчетОРозничныхПродажах();	
	ИначеЕсли СтруктураТекущихСостояний.ВидДокумента = "СписаниеТоваров" Тогда
		СоздатьДокументСписаниеТоваров();
	ИначеЕсли СтруктураТекущихСостояний.ВидДокумента = "ВыпускСРозничнойРеализацией" Тогда
		СоздатьДокументПриготовлениеБлюд();	
	ИначеЕсли СтруктураТекущихСостояний.ВидДокумента = "ВыпускСРеализацией" Тогда
		СоздатьДокументПриготовлениеБлюд();	
	ИначеЕсли СтруктураТекущихСостояний.ВидДокумента = "ВыпускСоСписанием" Тогда
		СоздатьДокументПриготовлениеБлюд();	
	ИначеЕсли СтруктураТекущихСостояний.ВидДокумента = "ВыпускСПеремещением" Тогда
		СоздатьДокументПриготовлениеБлюд();	
	ИначеЕсли СтруктураТекущихСостояний.ВидДокумента = "ВозвратОтПокупателя" Тогда
		СоздатьДокументВозвратОтПокупателя();	
	ИначеЕсли СтруктураТекущихСостояний.ВидДокумента = "ПоступлениеНаРасчетныйСчет" 
		ИЛИ СтруктураТекущихСостояний.ВидДокумента = "ПоступлениеНаРасчетныйСчетВозврат" Тогда
		СоздатьДокументПоступлениеНаРасчетныйСчет(СтруктураТекущихСостояний.ВидДокумента);	
	ИначеЕсли СтруктураТекущихСостояний.ВидДокумента = "ПриходныйКассовыйОрдер"
		ИЛИ СтруктураТекущихСостояний.ВидДокумента = "ПриходныйКассовыйОрдерВозврат" Тогда
		СоздатьДокументПриходныйКассовыйОрдер(СтруктураТекущихСостояний.ВидДокумента);	
	ИначеЕсли СтруктураТекущихСостояний.ВидДокумента = "РеализацияТоваровУслуг" Тогда
		СоздатьДокументРеализацияТоваровУслуг();	
	ИначеЕсли СтруктураТекущихСостояний.ВидДокумента = "УчетАлкоголяПиво" Тогда
		СоздатьДокументПодключениеКегаКОборудованиюРозливаИСМП();	
	ИначеЕсли СтруктураТекущихСостояний.ВидДокумента = "УчетАлкоголяКрепкийАлкогольРег1"
		ИЛИ СтруктураТекущихСостояний.ВидДокумента = "УчетАлкоголяКрепкийАлкогольРег2" Тогда
		СоздатьДокументАктСписанияЕГАИС();	
	КонецЕсли
КонецПроцедуры

Функция СоздатьДокументПодключениеКегаКОборудованиюРозливаИСМП(Отказ = Ложь)
	
	Для каждого СтрокаУчет Из ДанныеОбъекта.УчетАлкоголя Цикл
		
		// Получим существующий объект
		Объект = ПолучитьСуществующийДокументПриемник(
			"ВЫРАЗИТЬ(УчетДанныхПродаж.ДокументПриемник КАК Документ.ПодключениеКегаКОборудованиюРозливаИСМП).КодМаркировки = &КодМаркировки",
			Новый Структура("КодМаркировки", СтрокаУчет.АналитикаКодАкциза)); 
		Если Объект <> Неопределено И ЗначениеЗаполнено(Объект.Номер) И Объект.Проведен Тогда
			Попытка
				Объект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			Исключение
				ТекстСообщения = ОписаниеОшибки();
				ЗаписьЖурналаРегистрации("ЗагрузкаИзДанныхПродаж", УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
			КонецПопытки;
		КонецЕсли;
		
		// Заполнение шапки документа
		ЗаполнитьШапкуДокументаПодключениеКегаКОборудованиюРозливаИСМП(Объект);
		
		// Дата документа
		Если НЕ ЗначениеЗаполнено(Объект.Дата) Тогда
			Объект.Дата = ДанныеОбъекта.Дата;
		КонецЕсли; 
		
		Объект.Организация = ДанныеОбъекта.Организация;
		ДанныеОбъекта.Свойство("ПометкаУдаления", Объект.ПометкаУдаления);
		
		Объект.Подразделение = ДанныеОбъекта.Подразделение;
		Объект.Склад = ДанныеОбъекта.СкладРеализации;
		Объект.ДатаПодключения = СтрокаУчет.ДатаПодключенияИСМП;
		Объект.КодМаркировки = СтрокаУчет.АналитикаКодАкциза;
		Объект.СрокРеализации = СтрокаУчет.СрокРеализацииИСМП;
		Объект.ОбъемСлива = СтрокаУчет.ОбъемСливаИСМП/1000;
		Объект.Ответственный = Пользователи.ТекущийПользователь();
		
		РеквизитыАдреса = Новый Структура;
		РеквизитыАдреса.Вставить("Значение");
		РеквизитыАдреса.Вставить("Представление");
		
		МассивСсылок = Новый Массив;
		МассивСсылок.Добавить(Объект.Склад);
		МассивСсылок.Добавить(Объект.Организация);
		Для Каждого ТекСсылка Из МассивСсылок Цикл
			КонтактнаяИнформацияСклада = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(ТекСсылка,
				Перечисления.ТипыКонтактнойИнформации.Адрес, Объект.ДатаПодключения, Ложь);
			Для Каждого ТекСтрока Из КонтактнаяИнформацияСклада Цикл
				Если ТекСтрока.Вид = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации Тогда
					РеквизитыАдреса.Значение = ТекСтрока.ЗначенияПолей;
					РеквизитыАдреса.Представление = ТекСтрока.Представление;
				ИначеЕсли РеквизитыАдреса.Значение = Неопределено Тогда
					РеквизитыАдреса.Значение = ТекСтрока.ЗначенияПолей;
					РеквизитыАдреса.Представление = ТекСтрока.Представление;
				КонецЕсли;
			КонецЦикла;
			Если НЕ РеквизитыАдреса.Значение = Неопределено Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Объект.АдресПодключения = РеквизитыАдреса.Значение;
		Объект.АдресПодключенияСтрокой = РеквизитыАдреса.Представление;
		
		КодФИАС = "";
		Если ПолучитьЗначениеПоОрганизации(ДопПараметры, ДанныеОбъекта.Организация,
			"ЭтоИндивидуальныйПредприниматель") Тогда
			МодульИнтеграцияИСМП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияИСМП");
			КодФИАС = МодульИнтеграцияИСМП.ИдентификаторФИАСПоДаннымАдреса(Объект.АдресПодключения).Идентификатор;
		КонецЕсли;
		Объект.КодФИАС = КодФИАС;
		
		НоваяСтрока = ТаблицаОбъектов.Добавить();
		НоваяСтрока.Объект = Объект;
		НоваяСтрока.Дата = НачалоДня(Объект.Дата);
		
		ЗаписатьОбъектВТаблицуСоответствий(Объект);
		
	КонецЦикла;
	
КонецФункции

Функция СоздатьДокументАктСписанияЕГАИС(Отказ = Ложь)
	
	ДопСоединение = "		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.АктСписанияЕГАИС КАК АктСписанияЕГАИСРегистр1
	|		ПО УчетДанныхПродаж.ДокументПриемник = АктСписанияЕГАИСРегистр1.Ссылка
	|			И (АктСписанияЕГАИСРегистр1.ВидДокумента = &ВидОперацииАктСписанияЕГАИСРегистр1)
	|			И (АктСписанияЕГАИСРегистр1.ПричинаСписания = ЗНАЧЕНИЕ(Перечисление.ПричиныСписанийЕГАИС.питПриготовление))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
	|		ПО (АктСписанияЕГАИСРегистр1.Ссылка = СтатусыДокументовЕГАИС.Документ)
	|";
	ДопОтбор = "СтатусыДокументовЕГАИС.Статус = &СтатусЧерновикАктСписанияЕГАИС
	|	И СтатусыДокументовЕГАИС.ДальнейшееДействие1 = &ДальнейшееДействиеЕГАИС";
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("СтатусЧерновикАктСписанияЕГАИС", Перечисления.СтатусыОбработкиАктаСписанияЕГАИС.Черновик);
	ДопПараметры.Вставить("ДальнейшееДействиеЕГАИС", Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПередайтеДанные);
	ДопПараметры.Вставить("ВидОперацииАктСписанияЕГАИСРегистр1", Перечисления.ВидыДокументовЕГАИС.АктСписанияИзРегистра1);
	
	// Получим существующий объект
	Объект = ПолучитьСуществующийДокументПриемник(ДопОтбор, ДопПараметры, ДопСоединение); 
	Если Объект <> Неопределено И ЗначениеЗаполнено(Объект.Номер) И Объект.Проведен Тогда
		Попытка
			Объект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Исключение
			ТекстСообщения = ОписаниеОшибки();
			ЗаписьЖурналаРегистрации("ЗагрузкаИзДанныхПродаж", УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
		КонецПопытки;
	КонецЕсли;
	
	// Заполнение шапки документа
	ЗаполнитьШапкуДокументаАктСписанияЕГАИС(Объект);
	
	// Дата документа
	Если НЕ ЗначениеЗаполнено(Объект.Дата) Тогда
		Объект.Дата = ДанныеОбъекта.Дата;
	КонецЕсли;
	Если СтруктураТекущихСостояний.ВидДокумента = "УчетАлкоголяКрепкийАлкогольРег2" Тогда
		Объект.ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктСписанияИзРегистра2;
		Объект.ПричинаСписания = Перечисления.ПричиныСписанийЕГАИС.Реализация;
	Иначе
		Объект.ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктСписанияИзРегистра1;
		Объект.ПричинаСписания = Перечисления.ПричиныСписанийЕГАИС.питПриготовление;
	КонецЕсли;
	Объект.ОрганизацияЕГАИС         = ДанныеОбъекта.ОрганизацияЕГАИС;
	Если НЕ ЗначениеЗаполнено(Объект.Номер) Тогда
		Объект.УстановитьНовыйНомер();
	КонецЕсли;
	
	// Товары
	Объект.Товары.Очистить();
	Объект.АкцизныеМарки.Очистить();
	Объект.Комментарий = "";
	
	Если Объект.ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктСписанияИзРегистра2 Тогда
		Валюта = Константы.ВалютаУправленческогоУчета.Получить();
		ВидЦен = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеОбъекта.СкладРеализации, "РозничныйВидЦены");
		ЦеныРассчитаны = ЦеныПредприятияЗаполнениеСервер.ЗаполнитьЦены(
			ДанныеОбъекта.Товары,
			, // Массив строк или структура отбора
			Новый Структура( // Параметры заполнения
				"Дата, Валюта, ВидЦены",
				Объект.Дата,
				Валюта,
				ВидЦен),
			Новый Структура( // Структура действий с измененными строками
				"ПересчитатьСумму",
				"Количество"));
	КонецЕсли;
	
	Для каждого ТекСтрока Из ДанныеОбъекта.Товары Цикл
		Если ТекСтрока.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = Объект.Товары.Добавить();
		НоваяСтрока.АлкогольнаяПродукция    = ТекСтрока.МаркируемаяПродукцияИСМП;
		НоваяСтрока.Номенклатура            = ТекСтрока.Номенклатура;
		НоваяСтрока.Справка2                = ТекСтрока.СправкаИСМП;
		НоваяСтрока.ИдентификаторСтроки     = ТекСтрока.ИдентификаторСтроки;
		Если НоваяСтрока.Номенклатура.ЕдиницаИзмерения = ТекСтрока.ЕдиницаИзмерения Тогда
			НоваяСтрока.Упаковка = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
		Иначе
			НоваяСтрока.Упаковка = ТекСтрока.ЕдиницаИзмерения;
		КонецЕсли;
		
		Если Объект.ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктСписанияИзРегистра2 Тогда
			НоваяСтрока.Количество = ТекСтрока.Количество;
			НоваяСтрока.Цена = ТекСтрока.Цена;
			НоваяСтрока.Сумма = ТекСтрока.Цена * ТекСтрока.Количество;
		Иначе
			НоваяСтрока.Количество = питОбщегоНазначения.ПеревестиОбъемИзМиллилитров(
				ТекСтрока.Номенклатура,
				ТекСтрока.ЕдиницаИзмерения,
				ТекСтрока.Количество);
			
			НоваяСтрокаАМ = Объект.АкцизныеМарки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаАМ, НоваяСтрока);
			НоваяСтрокаАМ.ШтрихкодУпаковки = ТекСтрока.АналитикаКодАкциза;
			НоваяСтрокаАМ.АкцизнаяМарка = ТекСтрока.АналитикаКодАкциза;
			НоваяСтрокаАМ.ЧастичноеВыбытиеКоличество = ТекСтрока.Количество;
			НоваяСтрокаАМ.ЧастичноеВыбытиеВариантУчета = Перечисления.ВариантыУчетаЧастичногоВыбытияИС.ТекущаяНоменклатура;
			НоваяСтрокаАМ.ЧастичноеВыбытиеНоменклатура = НоваяСтрока.Номенклатура;
			НоваяСтрокаАМ.ЧастичноеВыбытиеХарактеристика = НоваяСтрока.Характеристика;
			НоваяСтрокаАМ.ИдентификаторСтроки = Неопределено;
			НоваяСтрокаАМ.Количество = 1;
			НоваяСтрока.Сумма = 0;
			НоваяСтрока.Цена = 0;
		КонецЕсли;
		
		НоваяСтрока.КоличествоУпаковок = НоваяСтрока.Количество;
	КонецЦикла;
	
	НоваяСтрока = ТаблицаОбъектов.Добавить();
	НоваяСтрока.Объект = Объект;
	НоваяСтрока.Дата = НачалоДня(Объект.Дата);
	
	ЗаписатьОбъектВТаблицуСоответствий(Объект);
	
КонецФункции

Функция ПолучитьЗначениеПоОрганизации(ДопПараметры, Организация, ПолучаемоеСвойство, Подразделение = Неопределено)
	
	Результат = Неопределено;
	
	ДанныеПоОрганизации = Новый Структура;
	
	Если ПолучаемоеСвойство = "Касса" Тогда
		Результат = Справочники.Кассы.ПолучитьКассуПоУмолчанию(Организация);
	ИначеЕсли ПолучаемоеСвойство = "БанковскийСчет" Тогда
		Результат = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "БанковскийСчетПоУмолчанию");
	ИначеЕсли ПолучаемоеСвойство = "ЭтоИндивидуальныйПредприниматель" Тогда
		МодульИнтеграцияИС = ОбщегоНазначения.ОбщийМодуль("МодульИнтеграцияИС");
		РеквизитыОрганизации = МодульИнтеграцияИС.ИННКППGLNОрганизации(Организация, Подразделение);
		Результат = (СтрДлина(РеквизитыОрганизации.ИНН) > 10);
	КонецЕсли;
	
	ДанныеПоОрганизации.Вставить(ПолучаемоеСвойство, Результат);
	
	Возврат Результат;
КонецФункции

Процедура ВыполнитьПослеЗаписиЦелевогоДокумента(Документ, ДопПараметры)
	
	Если ТипЗнч(Документ) = Тип("ДокументОбъект.ПодключениеКегаКОборудованиюРозливаИСМП") Тогда
		ПослеЗаписиДокументаПодключениеКегаКОборудованиюРозливаИСМП(Документ, ДопПараметры);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеЗаписиДокументаПодключениеКегаКОборудованиюРозливаИСМП(Документ, ДопПараметры)
	
	ДанныеПодключения = РегистрыСведений.КегиНаОборудованииРозливаИСМП.ИнициализироватьДанныеПодключенияКОборудованию();
	ЗаполнитьЗначенияСвойств(ДанныеПодключения, Документ);
	
	Если НЕ ЗначениеЗаполнено(ДанныеПодключения.КодМаркировки) Тогда
		Возврат;
	КонецЕсли;
	ДанныеПодключения.Документ = Документ.Ссылка;
	
	ДанныеЗаписи = РегистрыСведений.СтатусыДокументовИСМП.ЗначенияПоУмолчанию(Документ.Ссылка);
	//Если ДанныеЗаписи.Статус = Перечисления.СтатусыОбработкиПодключениеКОборудованиюРозливаИСМП.Черновик Тогда
	//	ДанныеЗаписи.Статус = Перечисления.СтатусыОбработкиПодключениеКОборудованиюРозливаИСМП.ПодключеноКОборудованию;
	//КонецЕсли;
	РегистрыСведений.СтатусыДокументовИСМП.ВыполнитьЗаписьВРегистр(ДанныеЗаписи);
	
	СохраненныеДанные = РегистрыСведений.КегиНаОборудованииРозливаИСМП.ПолучитьПодключениеКОборудованию(ДанныеПодключения.КодМаркировки)[ДанныеПодключения.КодМаркировки];
	Если СохраненныеДанные = Неопределено Тогда
		ДанныеПодключения.Статус = Перечисления.СтатусыПодключенияКОборудованиюРозливаИСМП.Подключено;
	ИначеЕсли НЕ ЗначениеЗаполнено(СохраненныеДанные.Статус) Тогда
		СохраненныеДанные.Статус = Перечисления.СтатусыПодключенияКОборудованиюРозливаИСМП.Подключено;
	КонецЕсли;
	
	РегистрыСведений.КегиНаОборудованииРозливаИСМП.УстановитьПодключениеКОборудованию(ДанныеПодключения, СохраненныеДанные);
	
КонецПроцедуры

// Создает документ "Реализация товаров услуг" при обмене с фронт-офисом.
//
// Параметры:
//	Отказ			  - Булево. Флаг отказа от создания документа при ошибке.
//
// Возвращаемое значение:
//	Нет	
//
Процедура СоздатьДокументРеализацияТоваровУслуг(Отказ = Ложь)
	
	// Получим существующий объект
	Объект = ПолучитьСуществующийДокументПриемник(); 
	Если Объект <> Неопределено И ЗначениеЗаполнено(Объект.Номер) И Объект.Проведен Тогда
		Попытка
			Объект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Исключение
			ТекстСообщения = ОписаниеОшибки();
			ЗаписьЖурналаРегистрации("ЗагрузкаИзДанныхПродаж", УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
		КонецПопытки;
	КонецЕсли;
	// Заполнение шапки документа
	ЗаполнитьШапкуРеализацияТоваровУслуг(Объект);
	
	// Прочие реквизиты
	Объект.Товары.Очистить();
	
	// Товары
	Для Каждого ТекСтрока Из ДанныеОбъекта.Товары Цикл
		Если Не ЗначениеЗаполнено(ТекСтрока.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Объект.Товары.Добавить();
		ЗаполнитьСтрокуТоваров(НоваяСтрока, ТекСтрока, Объект);
				
	КонецЦикла; 
	
	НоваяСтрока = ТаблицаОбъектов.Добавить();
	НоваяСтрока.Объект = Объект;
	НоваяСтрока.Дата = НачалоДня(Объект.Дата);
	
	ЗаписатьОбъектВТаблицуСоответствий(Объект);
	
КонецПроцедуры // СоздатьДокументРеализацияТоваровУслуг()


// Создает документ "Поступление безналичных денежных средств" при обмене с фронт-офисом.
//
// Параметры:
//	Отказ			  - Булево. Флаг отказа от создания документа при ошибке.
//
// Возвращаемое значение:
//	Нет	
//
Процедура СоздатьДокументПоступлениеНаРасчетныйСчет(ВидДокумента, Отказ = Ложь)
	
	// Получим существующий объект
	Объект = ПолучитьСуществующийДокументПриемник(); 
	Если Объект <> Неопределено И ЗначениеЗаполнено(Объект.Номер) И Объект.Проведен Тогда
		Попытка
			Объект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Исключение
			ТекстСообщения = ОписаниеОшибки();
			ЗаписьЖурналаРегистрации("ЗагрузкаИзДанныхПродаж", УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
		КонецПопытки;
	КонецЕсли;
	// Заполнение шапки документа
	ЗаполнитьШапкуПоступлениеНаРасчетныйСчет(ВидДокумента, Объект);
	
	Объект["РасшифровкаПлатежа"].Очистить();
	
	ТекСтрока = Объект["РасшифровкаПлатежа"].Добавить();
	ТекСтрока.Сумма = Объект.СуммаДокумента;
	
	МодульУчетнаяПолитика = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("РегламентированныйУчетПодсистемы") Тогда
		МодульУчетнаяПолитика = ОбщегоНазначения.ОбщийМодуль("УчетнаяПолитика");
	КонецЕсли;
	Если МодульУчетнаяПолитика <> Неопределено И
		МодульУчетнаяПолитика.СистемаНалогообложения(Объект.Организация, Объект.Дата) = Перечисления.СистемыНалогообложения.Упрощенная Тогда
		Если НЕ питПроизводствоПовтИсп.ПолучитьИмяОсновнойКонфигурации() = "ERPWE" Тогда
			ТекСтрока.СтавкаНДС = УчетНДСЛокализация.СтавкаНДСПоПеречислению(Перечисления.СтавкиНДС.БезНДС);
		Иначе
			ТекСтрока.СтавкаНДС = питОбщегоНазначения.СтавкаНДСПоЧислу();
		КонецЕсли;
	Иначе
		Если НЕ питПроизводствоПовтИсп.ПолучитьИмяОсновнойКонфигурации() = "ERPWE" Тогда
			ТекСтрока.СтавкаНДС = УчетНДСЛокализация.СтавкаНДСПоПеречислению(Перечисления.СтавкиНДС.НДС20);
		Иначе
			ТекСтрока.СтавкаНДС = питОбщегоНазначения.СтавкаНДСПоЧислу(20);
		КонецЕсли;
		ТекСтрока.СуммаНДС = ТекСтрока.Сумма * 20 / 120;
	КонецЕсли;
	ТекСтрока.СуммаВзаиморасчетов = ТекСтрока.Сумма;
	
	Если ВидДокумента = "ПоступлениеНаРасчетныйСчет" Тогда
		ТекСтрока.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.ПоступлениеОплатыОтКлиента;
	Иначе
		ТекСтрока.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.ВозвратОплатыКлиенту;
	КонецЕсли;
	ТекСтрока.Партнер = Объект.Партнер;
	ТекСтрока.КурсЧислительВзаиморасчетов = 1;
	ТекСтрока.КурсЗнаменательВзаиморасчетов = 1;
	ТекСтрока.ВалютаВзаиморасчетов = Объект.Валюта;
	//ТекСтрока.ОбъектРасчетов
	Если ТекСтрока.СуммаНДС <> 0 Тогда
		Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
	Иначе
		Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
	КонецЕсли;
	// По умолчанию
	Если НЕ ЗначениеЗаполнено(Объект.Партнер) Тогда
		Объект.Партнер					= Справочники.Партнеры.РозничныйПокупатель;
		ТекСтрока.Партнер				= Объект.Партнер;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Объект.Контрагент				= Справочники.Контрагенты.РозничныйПокупатель;
	КонецЕсли;
	
	НоваяСтрока = ТаблицаОбъектов.Добавить();
	НоваяСтрока.Объект = Объект;
	НоваяСтрока.Дата = НачалоДня(Объект.Дата);
	
	ЗаписатьОбъектВТаблицуСоответствий(Объект);
	
КонецПроцедуры // СоздатьДокументПоступлениеБезналичныхДенежныхСредств()

// Создает документ "Закрытие смены" при обмене с фронт-офисом.
//
// Параметры:
//	Отказ			  - Булево. Флаг отказа от создания документа при ошибке.
//
// Возвращаемое значение:
//	Нет	
//
Процедура СоздатьДокументПриходныйКассовыйОрдер(ВидДокумента, Отказ = Ложь)
	
	СтрокаПараметров = ПараметрыКасс.Найти(СтруктураТекущихСостояний.КассаККМ, "КассаККМ");
	Если СтрокаПараметров = Неопределено Тогда
		СтрокаПараметров = СтруктураТекущихСостояний.КассаККМ.питКассовыйУзел;
	КонецЕсли;
	Если СтрокаПараметров.ЗапретитьПовторнуюЗагрузкуДанныхПродаж И Не АдминистративныйРежимПерезагрузки Тогда
		Объект = Неопределено;
		// Заполнение шапки документа
		ЗаполнитьШапкуПриходныйКассовыйОрдер(ВидДокумента, Объект);
	Иначе
		// Получим существующий объект
		Объект = ПолучитьСуществующийДокументПриемник(); 
		Если Объект = Неопределено Тогда
			ЗаполнитьШапкуПриходныйКассовыйОрдер(ВидДокумента, Объект);
		Иначе
			ОбновитьВремяКомментарийДокумента(Объект);
		КонецЕсли;
	КонецЕсли;
	
	// Прочие реквизиты
	
	Объект["РасшифровкаПлатежа"].Очистить();
	
	ТекСтрока = Объект["РасшифровкаПлатежа"].Добавить();
	ТекСтрока.Сумма = Объект.СуммаДокумента;
	ТекСтрока.СуммаВзаиморасчетов = Объект.СуммаДокумента;
	МодульУчетнаяПолитика = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("РегламентированныйУчетПодсистемы") Тогда
		МодульУчетнаяПолитика = ОбщегоНазначения.ОбщийМодуль("УчетнаяПолитика");
	КонецЕсли;
	Если МодульУчетнаяПолитика <> Неопределено 
		И МодульУчетнаяПолитика.СистемаНалогообложения(Объект.Организация, Объект.Дата) = Перечисления.СистемыНалогообложения.Упрощенная Тогда
		Если НЕ питПроизводствоПовтИсп.ПолучитьИмяОсновнойКонфигурации() = "ERPWE" Тогда
			ТекСтрока.СтавкаНДС	= УчетНДСЛокализация.СтавкаНДСПоПеречислению(Перечисления.СтавкиНДС.БезНДС);
		Иначе
			ТекСтрока.СтавкаНДС	= питОбщегоНазначения.СтавкаНДСПоЧислу();
		КонецЕсли;
	Иначе
		Если НЕ питПроизводствоПовтИсп.ПолучитьИмяОсновнойКонфигурации() = "ERPWE" Тогда
			ТекСтрока.СтавкаНДС	= УчетНДСЛокализация.СтавкаНДСПоПеречислению(Перечисления.СтавкиНДС.НДС20);
		Иначе
			ТекСтрока.СтавкаНДС	= питОбщегоНазначения.СтавкаНДСПоЧислу(20);
		КонецЕсли;
		ТекСтрока.СуммаНДС = ТекСтрока.Сумма * 20 / 120;
	КонецЕсли;
	
	Если ВидДокумента = "ПриходныйКассовыйОрдер" Тогда
		ТекСтрока.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.ПоступлениеОплатыОтКлиента;
	Иначе
		ТекСтрока.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.ВозвратОплатыКлиенту;
	КонецЕсли;
	ТекСтрока.Партнер = Объект.Партнер;
	ТекСтрока.КурсЧислительВзаиморасчетов = 1;
	ТекСтрока.КурсЗнаменательВзаиморасчетов = 1;
	ТекСтрока.ВалютаВзаиморасчетов = Объект.Валюта;
	ТекСтрока.Организация = Объект.Организация;
	//ТекСтрока.ОбъектРасчетов
	Если ТекСтрока.СуммаНДС <> 0 Тогда
		Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
	Иначе
		Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
	КонецЕсли;
	Если ВидДокумента = "ПриходныйКассовыйОрдер" И ПустаяСтрока(Объект.ВТомЧислеНДС) Тогда
		Объект.ВТомЧислеНДС = ДенежныеСредстваСервер.ТекстСуммаНДСПлатежа(Объект.Организация, Объект.Валюта, Объект.РасшифровкаПлатежа, Ложь);
	КонецЕсли;
	// По умолчанию
	Если НЕ ЗначениеЗаполнено(Объект.Партнер) Тогда
		Объект.Партнер					= Справочники.Партнеры.РозничныйПокупатель;
		ТекСтрока.Партнер				= Объект.Партнер;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Объект.Контрагент				= Справочники.Контрагенты.РозничныйПокупатель;
	КонецЕсли;
	
	НоваяСтрока = ТаблицаОбъектов.Добавить();
	НоваяСтрока.Объект = Объект;
	НоваяСтрока.Дата = НачалоДня(Объект.Дата);
	
	ЗаписатьОбъектВТаблицуСоответствий(Объект);
	
КонецПроцедуры // СоздатьДокументЗакрытиеСмены()

// Создает документ "Закрытие смены" при обмене с фронт-офисом.
//
// Параметры:
//	Отказ			  - Булево. Флаг отказа от создания документа при ошибке.
//
// Возвращаемое значение:
//	Нет	
//
Процедура СоздатьДокументОтчетОРозничныхПродажах(Отказ = Ложь)
		
	// Получим существующий объект
	Объект = ПолучитьСуществующийДокументПриемник(); 
	Если Объект <> Неопределено И ЗначениеЗаполнено(Объект.Номер) И Объект.Проведен Тогда
		Попытка
			Объект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Исключение
			ТекстСообщения = ОписаниеОшибки();
			ЗаписьЖурналаРегистрации("ЗагрузкаИзДанныхПродаж", УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
		КонецПопытки;
	КонецЕсли;
	// Заполнение шапки документа
	ЗаполнитьШапкуДокументаОтчетОРозничныхПродажах(Объект);
	
	// Товары
	Объект.Товары.Очистить();
	Для Каждого ТекСтрока Из ДанныеОбъекта.Товары Цикл
		Если Не ЗначениеЗаполнено(ТекСтрока.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Объект.Товары.Добавить();
		ЗаполнитьСтрокуТоваров(НоваяСтрока, ТекСтрока, Объект);
				
	КонецЦикла; 
	//Документы.ОтчетОРозничныхПродажах.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "Товары");
	
	// Оплаты
	Объект.ОплатаПлатежнымиКартами.Очистить();
	Объект.ПодарочныеСертификаты.Очистить();
	Объект.НачислениеБонусныхБаллов.Очистить();
	Объект.ОплатаБонуснымиБаллами.Очистить();
	
	Для Каждого ТекСтрока Из ДанныеОбъекта.Оплаты Цикл
		ВидОплаты 	= ТекСтрока.ВидОплаты; // Получен по таблице предопределенных элементов
		ТипОплаты = ВидОплаты.ТипОплаты;
		// Банковский кредит или платежная карта - поиск только по виду оплаты
		Если ТипОплаты = Перечисления.питТипыОплат.Наличные Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстОшибкиОплаты = "";
		Если ТипОплаты = Перечисления.питТипыОплат.ПодарочныйСертификатСторонний Или ТипОплаты = Перечисления.питТипыОплат.ПодарочныйСертификатСобственный
			Или ТипОплаты = Перечисления.питТипыОплат.питТалоныИКупоны Тогда
			НоваяСтрока = Объект.ПодарочныеСертификаты.Добавить();
			ЗаполнитьСтрокуОплатыСертификата(НоваяСтрока, ТекСтрока, Объект, Отказ, ТекстОшибкиОплаты);
		ИначеЕсли ТипОплаты = Перечисления.питТипыОплат.питБонусы Тогда
			НоваяСтрока = Объект.ОплатаБонуснымиБаллами.Добавить();
			ЗаполнитьСтрокуОплатыБонуснымиБаллами(НоваяСтрока, ТекСтрока, Объект, Отказ, ТекстОшибкиОплаты);
		Иначе
			НоваяСтрока = Объект.ОплатаПлатежнымиКартами.Добавить();
			ЗаполнитьСтрокуОплаты(НоваяСтрока, ТекСтрока, Объект, Отказ, ТекстОшибкиОплаты);
		КонецЕсли;
		Если Отказ Тогда
			Для каждого ТекОснованиеЧек Из ДанныеОбъекта.МассивОснований Цикл
				СписокИсключающихДокументов.Добавить(ТекОснованиеЧек);
			КонецЦикла;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибкиОплаты);
			Прервать;
		КонецЕсли; 
	КонецЦикла;
	
	Для каждого ТекНачислениеБонусов Из ДанныеОбъекта.НачислениеБонусныхБаллов Цикл
		НовСтрокаБонусы = Объект.НачислениеБонусныхБаллов.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрокаБонусы, ТекНачислениеБонусов);
	КонецЦикла;
	
	РаспределитьБонусыПоТоварам(Объект, Отказ);
	
	Если Отказ Тогда
		Объект = Неопределено;
		Возврат;
	КонецЕсли; 
	
	// Прочие реквизиты
	Объект.СуммаДокумента 	= Объект.Товары.Итог("Сумма");
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ОтчетОРозничныхПродажах));
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	питПроизводство.ЗаполнитьСерииВТЧСерииПоТЧТовары(Объект, ПараметрыУказанияСерий);
	питПроизводство.ЗаполнитьСерииВТЧТоварыПоТЧСерииПоСебестоимости(Объект, ПараметрыУказанияСерий, Ложь);
	
	НоваяСтрока = ТаблицаОбъектов.Добавить();
	НоваяСтрока.Объект = Объект;
	НоваяСтрока.Дата = НачалоДня(Объект.Дата);
	
	ЗаписатьОбъектВТаблицуСоответствий(Объект);
	
КонецПроцедуры // СоздатьДокументЗакрытиеСмены()

// Создает документ "Выпуск продукции" при обмене с фронт-офисом.
//
// Параметры:
//	Отказ			  - Булево. Флаг отказа от создания документа при ошибке.
//
// Возвращаемое значение:
//	Нет	
//
Процедура СоздатьДокументПриготовлениеБлюд(Отказ = Ложь)
	
	// Получим существующий объект
	Объект = ПолучитьСуществующийДокументПриемник(); 

	//<< Портал-Юг, Баринов, 2019.09.13 [б/н не обновлять обработанные выпуски по открытой цене]
	// Выпуск обработан, если хотя бы в одной строке изменена номенклатура или заполнена рецептура
	// По открытой цене имеют смысл только выпуски с реализацией, сразу проверим вид операции, чтобы исключить лишние проверки
	ПЛ_НеИзменятьДокумент = Ложь;
	Если Объект <> Неопределено
		И Объект.ХозяйственнаяОперация = Перечисления.питХозяйственныеОперации.ВыпускПродукцииСРозничнойРеализацией
		И ЗначениеЗаполнено(Объект.ПЛ_Номенклатура)
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ПЛ_Номенклатура, "питПродажаПоСвободнойЦене") Тогда
		Для каждого СтрокаТовары Из Объект.Товары Цикл
			Если СтрокаТовары.Номенклатура <> Объект.ПЛ_Номенклатура ИЛИ ЗначениеЗаполнено(СтрокаТовары.Рецептура) Тогда 
				ПЛ_НеИзменятьДокумент = Истина;
				Объект.ДополнительныеСвойства.Вставить("ПЛ_НеИзменятьДокумент", Истина);
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Это уже обработанный документ по открытой цене. Он не будет изменён. %1'"), Объект.Ссылка);
				ЗаписьЖурналаРегистрации("ЗагрузкаИзДанныхПродаж", УровеньЖурналаРегистрации.Информация, Объект.Метаданные(), Объект.Ссылка, ТекстСообщения);
				Прервать;
			КонецЕсли;	
		КонецЦикла; 
	КонецЕсли;
	Если НЕ ПЛ_НеИзменятьДокумент Тогда	
	//>> Портал-Юг, Баринов, 2019.09.13
	
	Если Объект <> Неопределено И ЗначениеЗаполнено(Объект.Номер) И Объект.Проведен Тогда
		Попытка
			Объект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Исключение
			ТекстСообщения = ОписаниеОшибки();
			ЗаписьЖурналаРегистрации("ЗагрузкаИзДанныхПродаж", УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
		КонецПопытки;
	КонецЕсли;
	
	// Заполнение шапки документа
	ЗаполнитьШапкуДокументаПриготовления(Объект);
	
	// Заполнение ТЧ Товары
	Объект.Товары.Очистить();
	Объект.Модификаторы.Очистить();
	Объект.Оплата.Очистить();
	Объект.ПодарочныеСертификаты.Очистить();
	Объект.НачислениеБонусныхБаллов.Очистить();
	Объект.ОплатаБонуснымиБаллами.Очистить();
	
	//>>Швецов. 15.01.2025 Розничные продажи алкоголя. Заполнить серии в ТЧ
	Объект.ТоварыСерии.Очистить();
	//>>Швецов. 15.01.2025 Розничные продажи алкоголя. Заполнить серии в ТЧ

	
	Для Каждого ТекСтрока Из ДанныеОбъекта.Товары Цикл
		Если Не ЗначениеЗаполнено(ТекСтрока.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		Если ТекСтрока.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга И 
			(ДанныеОбъекта.ВидОперации = Перечисления.питХозяйственныеОперации.ВыпускПродукцииСоСписанием ИЛИ
			 ДанныеОбъекта.ВидОперации = Перечисления.питХозяйственныеОперации.ВыпускПродукцииСПеремещением) Тогда
			Продолжить;
		КонецЕсли;
		
		//>>Швецов. 15.01.2025 Розничные продажи алкоголя. Заполнить серии в ТЧ
		АлкогольнаяПродукция = ТекСтрока.Номенклатура.АлкогольнаяПродукция И НЕ ТекСтрока.Номенклатура.АлкогольнаяПродукцияВоВскрытойТаре И НЕ ТекСтрока.Номенклатура.ВидАлкогольнойПродукции.ВидЛицензии = Перечисления.ВидыЛицензийАлкогольнойПродукции.Пиво;
		
		АлкогольнаяВоВскрытойТаре = ТекСтрока.Номенклатура.АлкогольнаяПродукцияВоВскрытойТаре;
		
		Если АлкогольнаяПродукция Тогда

			НоваяСтрока = Объект.Товары.Добавить();
			ЗаполнитьСтрокуТоваровПриготовления(НоваяСтрока, ТекСтрока, Объект, 4, ТекСтрока.Количество, ТекСтрока.Серия);
			
		Иначе //все остальное	
			
			НоваяСтрока = Объект.Товары.Добавить();
			ЗаполнитьСтрокуТоваровПриготовления(НоваяСтрока, ТекСтрока, Объект);
			
		КонецЕсли;
		//<<Швецов. 15.01.2025 Розничные продажи алкоголя. Заполнить серии в ТЧ
		
	КонецЦикла; 
	
	//>>Швецов. 02.04.2025 Розничные продажи алкоголя. Заполнить серии в ТЧ
	Для Каждого ТекСтрока Из ДанныеОбъекта.Серии Цикл

		НоваяСтрокаСерия = Объект.ТоварыСерии.Добавить();
		НоваяСтрокаСерия.Номенклатура = ТекСтрока.Номенклатура;
		НоваяСтрокаСерия.Количество = ТекСтрока.Количество;
		НоваяСтрокаСерия.Серия = ТекСтрока.Серия;
		
	КонецЦикла;
	//<<Швецов. 02.04.2025 Розничные продажи алкоголя. Заполнить серии в ТЧ

	Для Каждого ТекСтрока Из ДанныеОбъекта.Модификаторы Цикл
		
		НоваяСтрока = Объект.Модификаторы.Добавить();
		ЗаполнитьСтрокуМодификаторов(НоваяСтрока, ТекСтрока, Объект, ДопПараметры);
		
		//ЗаписатьПогрешность(НоваяСтрока, ТекСтрока, "Модификаторы");
	КонецЦикла;
		
	//
	// Оплаты загружаются только для розничной реализации.
	// Приготовление со списанием - оплаты не загружаются.
	// Приготовление с перемещением, Приготовление блюд - оплаты загружаются в отдельный Акт о реализации.
	
	Если (Объект.ХозяйственнаяОперация = Перечисления.питХозяйственныеОперации.ВыпускПродукцииСРозничнойРеализацией 
			ИЛИ Объект.ХозяйственнаяОперация = Перечисления.питХозяйственныеОперации.ВыпускПродукцииСРеализацией) Тогда
		
		Для Каждого ТекСтрока Из ДанныеОбъекта.Оплаты Цикл
			ВидОплаты 	= ТекСтрока.ВидОплаты; // Получен по таблице предопределенных элементов
			ТипОплаты = ВидОплаты.ТипОплаты;
			// Банковский кредит или платежная карта - поиск только по виду оплаты
			Если ТипОплаты = Перечисления.питТипыОплат.Наличные  Тогда
				Продолжить;
			КонецЕсли;
			Если ТекСтрока.ВидОперации = Перечисления.питВидыОперацийПоЗагрузкеДанныхПродаж.Списание Тогда
				Продолжить;
			КонецЕсли;
			ТекстОшибкиОплаты = "";
			Если ТипОплаты = Перечисления.питТипыОплат.ПодарочныйСертификатСторонний Или ТипОплаты = Перечисления.питТипыОплат.ПодарочныйСертификатСобственный
				Или ТипОплаты = Перечисления.питТипыОплат.питТалоныИКупоны Тогда
				НоваяСтрока = Объект.ПодарочныеСертификаты.Добавить();
				ЗаполнитьСтрокуОплатыСертификата(НоваяСтрока, ТекСтрока, Объект, Отказ, ТекстОшибкиОплаты);
			ИначеЕсли ТипОплаты = Перечисления.питТипыОплат.питБонусы Тогда
				НоваяСтрока = Объект.ОплатаБонуснымиБаллами.Добавить();
				ЗаполнитьСтрокуОплатыБонуснымиБаллами(НоваяСтрока, ТекСтрока, Объект, Отказ, ТекстОшибкиОплаты);
			Иначе
				НоваяСтрока = Объект.Оплата.Добавить();
				ЗаполнитьСтрокуОплаты(НоваяСтрока, ТекСтрока, Объект, Отказ, ТекстОшибкиОплаты);
			КонецЕсли;
			
			Если Отказ Тогда
				
				ЗаписьЖурналаРегистрации("ЗагрузкаИзДанныхПродаж", УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибкиОплаты);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибкиОплаты);
				Для каждого ТекОснованиеЧек Из ДанныеОбъекта.МассивОснований Цикл
					СписокИсключающихДокументов.Добавить(ТекОснованиеЧек);
				КонецЦикла;
				Прервать;
			КонецЕсли;
			
		КонецЦикла; 
		
		Для каждого ТекНачислениеБонусов Из ДанныеОбъекта.НачислениеБонусныхБаллов Цикл
			НовСтрокаБонусы = Объект.НачислениеБонусныхБаллов.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрокаБонусы, ТекНачислениеБонусов);
		КонецЦикла;
		
		// В БУДУЩЕМ ВОЗМОЖНО ЗАПОЛНЕНИЕ ОБОРОТОВ ДЛЯ НАКОПЛЕНИЯ СУММ
	КонецЕсли; 
	
	РаспределитьБонусыПоТоварам(Объект, Отказ);
	
	Если Отказ Тогда
		Объект = Неопределено;
		Возврат;
	КонецЕсли;
		
	// Прочие реквизиты
	Объект.СуммаДокумента = Объект.Товары.Итог("Сумма");

	//<< Портал-Юг, Баринов, 2019.09.13 [б/н не обновлять обработанные выпуски по открытой цене]
	КонецЕсли;
	//>> Портал-Юг, Баринов, 2019.09.13	
	
	НоваяСтрока = ТаблицаОбъектов.Добавить();
	НоваяСтрока.Объект = Объект;
	НоваяСтрока.Дата = НачалоДня(Объект.Дата);
	// Запишем объект в таблицу соответствий
	ЗаписатьОбъектВТаблицуСоответствий(Объект);
	
	//>>Швецов. 16.10.2024. Розничные продажи алкоголя
	//добавить документ движения в регистр проданных марок
	MRS_ЗагрузкаЕГАИСФронт.ОбновитьЗаписьВРегистреПроданныхМарок(ДанныеОбъекта.НомерЧека, Объект);
	//<<
	
КонецПроцедуры // СоздатьДокументПриготовлениеБлюд()

Процедура РаспределитьБонусыПоТоварам(Объект, Отказ = Ложь)
	
	// Если не было оплат бонусами, то ничего не делать.
	СуммаБонусов = Объект.ОплатаБонуснымиБаллами.Итог("СуммаБонусныхБаллов");
	Если СуммаБонусов <= 0 Тогда
		Возврат;
	КонецЕсли;
	Если НЕ Объект.Товары.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	// Проверка настройки, по которой выполняется алгоритм.
	СтрокаПараметров = ПараметрыКасс.Найти(СтруктураТекущихСостояний.КассаККМ, "КассаККМ");
	Если СтрокаПараметров = Неопределено Тогда
		УменьшатьСуммыТоваровНаСуммуБонусов = Ложь;
	Иначе
		УменьшатьСуммыТоваровНаСуммуБонусов = СтрокаПараметров.УменьшатьСуммыТоваровНаСуммуБонусов;
	КонецЕсли;
	Если НЕ УменьшатьСуммыТоваровНаСуммуБонусов Тогда
		Возврат;
	КонецЕсли;
	
	// Сумма товаров в документе.
	СуммаТоваров = Объект.Товары.Итог("Сумма");
	Если НЕ Объект.ЦенаВключаетНДС Тогда
		СуммаТоваров = СуммаТоваров + Объект.Товары.Итог("СуммаНДС");
	КонецЕсли;
	Если СуммаТоваров <= 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Полная оплата чека бонусами - просто обнулить все суммы.
	Если СуммаБонусов >= СуммаТоваров Тогда
		Для каждого ТекТовар Из Объект.Товары Цикл
			ТекТовар.Сумма = 0;
			ТекТовар.СуммаНДС = 0;
			ТекТовар.Цена = 0;
		КонецЦикла;
		Для каждого ТекТовар Из Объект.Модификаторы Цикл
			ТекТовар.Сумма = 0;
			ТекТовар.Цена = 0;
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	// Коэффициент, на который уменьшаем суммы.
	КоэффициентУменьшения = СуммаБонусов / СуммаТоваров;
	
	// Распределение бонусов по товарам
	ОсталосьРаспределитьБонусов = СуммаБонусов;
	Для каждого ТекТовар Из Объект.Товары Цикл
		
		БазоваяСумма = ТекТовар.Сумма + ?(Объект.ЦенаВключаетНДС, 0, ТекТовар.СуммаНДС);
		СуммаРаспределить = ?(КоэффициентУменьшения = 1, 0, Окр(БазоваяСумма * КоэффициентУменьшения, 2));
		НоваяОбщаяСумма = БазоваяСумма - СуммаРаспределить;
		
		НоваяСуммаНДС = ЦенообразованиеКлиентСервер.РассчитатьСуммуНДС(НоваяОбщаяСумма, ТекТовар.СтавкаНДС, Истина);
		НоваяСумма = ?(Объект.ЦенаВключаетНДС, НоваяОбщаяСумма, НоваяОбщаяСумма - НоваяСуммаНДС);
		ТекТовар.Сумма = НоваяСумма;
		ТекТовар.СуммаНДС = НоваяСуммаНДС;
		
		ОсталосьРаспределитьБонусов = ОсталосьРаспределитьБонусов - СуммаРаспределить;
		
		ТекТовар.Цена = ТекТовар.Сумма / ?(ТекТовар.КоличествоУпаковок = 0, 1, ТекТовар.КоличествоУпаковок);
		
	КонецЦикла;
	
	// Правило последней копейки
	Для каждого ТекТовар Из Объект.Товары Цикл
		Если ОсталосьРаспределитьБонусов = 0 Тогда
			Прервать;
		КонецЕсли;
		
		БазоваяСумма = ТекТовар.Сумма + ?(Объект.ЦенаВключаетНДС, 0, ТекТовар.СуммаНДС);
		СуммаРаспределить = Мин(БазоваяСумма, ОсталосьРаспределитьБонусов);
		НоваяОбщаяСумма = БазоваяСумма - СуммаРаспределить;
		
		НоваяСуммаНДС = ЦенообразованиеКлиентСервер.РассчитатьСуммуНДС(НоваяОбщаяСумма, ТекТовар.СтавкаНДС, Истина);
		НоваяСумма = ?(Объект.ЦенаВключаетНДС, НоваяОбщаяСумма, НоваяОбщаяСумма - НоваяСуммаНДС);
		ТекТовар.Сумма = НоваяСумма;
		ТекТовар.СуммаНДС = НоваяСуммаНДС;
		
		ОсталосьРаспределитьБонусов = ОсталосьРаспределитьБонусов - СуммаРаспределить;
		
		ТекТовар.Цена = ТекТовар.Сумма / ?(ТекТовар.КоличествоУпаковок = 0, 1, ТекТовар.КоличествоУпаковок);
	КонецЦикла;
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.питВыпускБлюд") Тогда
		// Дополнительно уменьшаем сумму модификаторов
		Для каждого ТекМодификатор Из Объект.Модификаторы Цикл
			ТекМодификатор.Сумма = ТекМодификатор.Сумма - ?(КоэффициентУменьшения = 1, 0, Окр(ТекМодификатор.Сумма * КоэффициентУменьшения, 2));
			ТекМодификатор.Цена = ТекМодификатор.Сумма / ?(ТекМодификатор.Количество = 0, 1, ТекМодификатор.Количество);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Создает документ "Возврат от покупателя" при обмене с фронт-офисом
//
// Параметры:
//	Отказ			  - Булево. Флаг отказа от создания документа при ошибке
//
// Возвращаемое значение:
//	Нет	
//
Процедура СоздатьДокументВозвратОтПокупателя(Отказ = Ложь)
	
	// Получим существующий		
	Объект = ПолучитьСуществующийДокументПриемник(); 
	// Заполнение шапки документа
	ЗаполнитьШапкуДокументаВозвратОтПокупателя(Объект);
	
	// ТЧ "Товары"
	Объект.Товары.Очистить();
	ТекКодСтроки = 1;
	Для Каждого ТекСтрока Из ДанныеОбъекта.Товары Цикл
		Если Не ЗначениеЗаполнено(ТекСтрока.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = Объект.Товары.Добавить();
		НоваяСтрока.КодСтроки = ТекКодСтроки;
		ЗаполнитьСтрокуТоваровВозвратОтПокупателя(НоваяСтрока, ТекСтрока, Объект);
		ТекКодСтроки = ТекКодСтроки + 1;
	КонецЦикла;
	
	// Прочие реквизиты
	Объект.СуммаДокумента 	= Объект.Товары.Итог("Сумма");
	
	//<<Портал-Юг, Финик 03.06.2020 [#inv99]
		
	Если ЗначениеЗаполнено(Объект.Товары) И НЕ ЗначениеЗаполнено(Объект.Договор) Тогда
		Объект.Договор = Объект.Товары[0].ПЛ_Договор;
	КонецЕсли;
	//>>Портал-Юг, Финик 03.06.2020 [#inv99]
	
	НоваяСтрока = ТаблицаОбъектов.Добавить();
	НоваяСтрока.Объект = Объект;
	НоваяСтрока.Дата = НачалоДня(Объект.Дата);
	// Запишем объект в таблицу соответствий
	ЗаписатьОбъектВТаблицуСоответствий(Объект);

КонецПроцедуры // СоздатьДокументВозвратОтПокупателя()

// Создает документ "Списание товаров" при обмене с фронт-офисом
//
// Параметры:
//	Отказ			  - Булево. Флаг отказа от создания документа при ошибке
//
// Возвращаемое значение:
//	Нет	
//
Процедура СоздатьДокументСписаниеТоваров(Отказ = Ложь) 
	
	ИмяДокументаВнутреннееПотребление = питОбратнаяСовместимостьПовтИсп.ИмяДокументаВнутреннееПотребление();
	
	// Получим существующий	
	Объект = ПолучитьСуществующийДокументПриемник(); 
	// Заполнение шапки документа
	ЗаполнитьШапкуДокументаСписаниеТоваров(Объект);
	
	// Товары
	Объект.Товары.Очистить();
	Объект.Серии.Очистить();
	Для Каждого ТекСтрока Из ДанныеОбъекта.Товары Цикл
		Если Не ЗначениеЗаполнено(ТекСтрока.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Объект.Товары.Добавить();
		ЗаполнитьСтрокуТоваровСписание(НоваяСтрока, ТекСтрока, Объект);
		
	КонецЦикла;
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы[ИмяДокументаВнутреннееПотребление]));
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	питПроизводство.ЗаполнитьСерииВТЧСерииПоТЧТовары(Объект, ПараметрыУказанияСерий);
	питПроизводство.ЗаполнитьСерииВТЧТоварыПоТЧСерииПоСебестоимости(Объект, ПараметрыУказанияСерий, Ложь);
	
	НоваяСтрока = ТаблицаОбъектов.Добавить();
	НоваяСтрока.Объект = Объект;
	НоваяСтрока.Дата = НачалоДня(Объект.Дата);
	// Запишем объект в таблицу соответствий
	ЗаписатьОбъектВТаблицуСоответствий(Объект);
	
КонецПроцедуры // СоздатьДокументСписаниеТоваров()


// Заполняет реквизиты шапки документа "Реализация товаров услуг"
//
// Параметры:
//	Объект			- ДокументОбъект. Документ для заполнения
//
// Возвращаемое значение:
//	Нет	
//
Процедура ЗаполнитьШапкуРеализацияТоваровУслуг(Объект)
	Если Объект = Неопределено Тогда
		МенеджерОбъекта = Документы.РеализацияТоваровУслуг;
		Объект = МенеджерОбъекта.СоздатьДокумент();
	КонецЕсли;
	
	// Заполнить реквизиты значениями по умолчанию.
	Если ОбщегоНазначения.ПодсистемаСуществует("РегламентированныйУчетПодсистемы") Тогда
		МодульЗаполнениеДокументов = ОбщегоНазначения.ОбщийМодуль("ЗаполнениеДокументов");
		МодульЗаполнениеДокументов.Заполнить(Объект, ДанныеОбъекта);
	КонецЕсли;
	// ВидОперации, Организация, Склад, ПодразделелениеОрганизации - уже заполнились
	
	Если ДанныеОбъекта.Свойство("Соглашение") И ТипЗнч(ДанныеОбъекта.Соглашение) = Тип("СправочникСсылка.СоглашенияСКлиентами") Тогда 
		Объект.Соглашение = ДанныеОбъекта.Соглашение;
	КонецЕсли;
	
	Объект.Статус = Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено;

	
	// Дата документа
	Объект.Дата = ДанныеОбъекта.Дата;
	Если НЕ ЗначениеЗаполнено(Объект.Дата) Тогда
		Объект.Дата = ТекущаяДата();
	КонецЕсли; 
	
	// Пометка удаления
	ДанныеОбъекта.Свойство("ПометкаУдаления", Объект.ПометкаУдаления);
	Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;
	Объект.Организация     = ДанныеОбъекта.Организация;
	Объект.Валюта          = ДанныеОбъекта.ВалютаУчета;
	Объект.Склад           = ДанныеОбъекта.Склад;
	Объект.СпособДоставки  = Перечисления.СпособыДоставки.Самовывоз;
	Объект.Подразделение   = ДанныеОбъекта.Подразделение;
	Объект.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг;
	Если Не ЗначениеЗаполнено(Объект.Валюта) Тогда
		Объект.Валюта      = Константы.ВалютаРегламентированногоУчета.Получить();
	КонецЕсли;
	
	Объект.Контрагент 	= ДанныеОбъекта.Контрагент;
	Объект.Договор = НайтиСоздатьДоговор(Объект.Контрагент, Объект.Дата);
	Объект.Партнер = ДанныеОбъекта.Партнер;
	
	Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
	ДЛя Каждого СтрокаТовара Из ДанныеОбъекта.ТОвары Цикл
		Если НЕ питПроизводствоПовтИсп.ПолучитьИмяОсновнойКонфигурации() = "ERPWE" Тогда
			НДС0 = УчетНДСЛокализация.СтавкаНДСПоПеречислению(Перечисления.СтавкиНДС.НДС0);
			НДСБез = УчетНДСЛокализация.СтавкаНДСПоПеречислению(Перечисления.СтавкиНДС.БезНДС);
		Иначе
			НДС0 = питОбщегоНазначения.СтавкаНДСПоЧислу(0);
			НДСБез = питОбщегоНазначения.СтавкаНДСПоЧислу();
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТовара.СтавкаНДС) И СтрокаТовара.СтавкаНДС <> НДСБез И СтрокаТовара.СтавкаНДС <> НДС0 Тогда
			Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Если НЕ ЗначениеЗаполнено(Объект.Номер) Тогда
		Объект.УстановитьНовыйНомер();
	КонецЕсли;
	Объект.Комментарий = "Создан в результате загрузки из документов чеки общепита: " + ДанныеОбъекта.Комментарий;
		
КонецПроцедуры // ЗаполнитьШапкуРеализацияТоваровУслуг()

Процедура ЗаполнитьШапкуДокументаПодключениеКегаКОборудованиюРозливаИСМП(Объект)
	
	МенеджерОбъекта = Документы.ПодключениеКегаКОборудованиюРозливаИСМП;
	Если Объект = Неопределено Тогда
		Объект = МенеджерОбъекта.СоздатьДокумент();
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьШапкуДокументаАктСписанияЕГАИС(Объект)
	
	МенеджерОбъекта = Документы.АктСписанияЕГАИС;
	Если Объект = Неопределено Тогда
		Объект = МенеджерОбъекта.СоздатьДокумент();
	КонецЕсли;
	
КонецПроцедуры

// Заполняет реквизиты шапки документа "Поступление безналичных денежных средств"
//
// Параметры:
//	Объект			- ДокументОбъект. Документ для заполнения
//
// Возвращаемое значение:
//	Нет	
//
Процедура ЗаполнитьШапкуПоступлениеНаРасчетныйСчет(ВидДокумента, Объект)
	Если Объект = Неопределено Тогда
		МенеджерОбъекта = Документы.ОперацияПоПлатежнойКарте;
		Объект = МенеджерОбъекта.СоздатьДокумент();
	КонецЕсли;
	
	// Заполнить реквизиты значениями по умолчанию.
	Если ОбщегоНазначения.ПодсистемаСуществует("РегламентированныйУчетПодсистемы") Тогда
		МодульЗаполнениеДокументов = ОбщегоНазначения.ОбщийМодуль("ЗаполнениеДокументов");
		МодульЗаполнениеДокументов.Заполнить(Объект, ДанныеОбъекта);
	КонецЕсли;
	// ВидОперации, Организация, Склад, ПодразделелениеОрганизации - уже заполнились
	
	// Дата документа
	Объект.Дата = ДанныеОбъекта.Дата;
	Если НЕ ЗначениеЗаполнено(Объект.Дата) Тогда
		Объект.Дата = ТекущаяДата();
	КонецЕсли; 
	
	// Пометка удаления
	ДанныеОбъекта.Свойство("ПометкаУдаления", Объект.ПометкаУдаления);
	Если ВидДокумента = "ПоступлениеНаРасчетныйСчет" Тогда
		Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента;
	Иначе
		Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту;
	КонецЕсли;
	//Объект.ТипПлатежногоДокумента = Перечисления.ТипыПлатежныхДокументов.ПлатежноеПоручение;
	Объект.Валюта = ДанныеОбъекта.ВалютаУчета;
	Если Не ЗначениеЗаполнено(Объект.Валюта) Тогда
		Объект.Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
	КонецЕсли;
	
	Объект.Контрагент 	= ДанныеОбъекта.Контрагент;
	Объект.Договор = ДанныеОбъекта.Договор;;
	Объект.Партнер 	= ДанныеОбъекта.Партнер;
	Объект.СуммаДокумента = ДанныеОбъекта.СуммаОплаты;
	
	Объект.Ответственный = ДанныеОбъекта.Ответственный;
	
	Если НЕ ЗначениеЗаполнено(Объект.Номер) Тогда
		Объект.УстановитьНовыйНомер();
	КонецЕсли;
	
	Объект.ДоговорЭквайринга		= ДанныеОбъекта.ДоговорЭквайринга;
	Объект.ЭквайринговыйТерминал	= ДанныеОбъекта.ЭквайринговыйТерминал;
	
	Объект.Комментарий = "Создан в результате загрузки из документов чеки общепита: " + ДанныеОбъекта.Комментарий;
		
КонецПроцедуры // ЗаполнитьШапкуПоступлениеНаРасчетныйСчет()

// Заполняет реквизиты шапки документа "Приходный кассовый ордер"
//
// Параметры:
//	Объект			- ДокументОбъект. Документ для заполнения
//
// Возвращаемое значение:
//	Нет	
//
Процедура ЗаполнитьШапкуПриходныйКассовыйОрдер(ВидДокумента, Объект)
	Если Объект = Неопределено Тогда
		Если ВидДокумента = "ПриходныйКассовыйОрдер" Тогда
			МенеджерОбъекта = Документы.ПриходныйКассовыйОрдер;
		Иначе
			МенеджерОбъекта = Документы.РасходныйКассовыйОрдер;
		КонецЕсли;
		Объект = МенеджерОбъекта.СоздатьДокумент();
	КонецЕсли;
	
	// Заполнить реквизиты значениями по умолчанию.
	Если ОбщегоНазначения.ПодсистемаСуществует("РегламентированныйУчетПодсистемы") Тогда
		МодульЗаполнениеДокументов = ОбщегоНазначения.ОбщийМодуль("ЗаполнениеДокументов");
		МодульЗаполнениеДокументов.Заполнить(Объект, ДанныеОбъекта);
	КонецЕсли;
	// ВидОперации, Организация, Склад, ПодразделелениеОрганизации - уже заполнились
	
	// Дата документа
	Объект.Дата = ДанныеОбъекта.Дата;
	Если НЕ ЗначениеЗаполнено(Объект.Дата) Тогда
		Объект.Дата = ТекущаяДата();
	КонецЕсли; 
	
	// Пометка удаления
	ДанныеОбъекта.Свойство("ПометкаУдаления", Объект.ПометкаУдаления);
	Если ВидДокумента = "ПриходныйКассовыйОрдер" Тогда
		Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента;
	Иначе
		Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту;
		Объект.ОплатаПоЗаявкам = Ложь;
	КонецЕсли;
	Объект.Валюта          = ДанныеОбъекта.ВалютаУчета;
	Если Не ЗначениеЗаполнено(Объект.Валюта) Тогда
		Объект.Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
	КонецЕсли;
	
	Объект.Контрагент 	= ДанныеОбъекта.Контрагент;
	Объект.Договор = ДанныеОбъекта.Договор;
	Объект.СуммаДокумента = ДанныеОбъекта.СуммаОплаты;
	
	Объект.Кассир = ДанныеОбъекта.Ответственный;
	
	Если НЕ ЗначениеЗаполнено(Объект.Номер) Тогда
		Объект.УстановитьНовыйНомер();
	КонецЕсли;
	
	////////////////////////////////
	//Касса
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	|	Кассы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Кассы КАК Кассы
	|ГДЕ
	|	Кассы.Владелец = &Организация
	|	И Кассы.Подразделение = &Подразделение
	|	И НЕ Кассы.ПометкаУдаления");
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Подразделение", Объект.Подразделение);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Объект.Касса = Выборка.Ссылка;
	Иначе
		Объект.Касса = Справочники.Кассы.ПустаяСсылка();
	КонецЕсли;
	
	//ПринятоОт
	//Партнер
	Объект.Партнер 	= ДанныеОбъекта.Партнер;
	Если ВидДокумента = "ПриходныйКассовыйОрдер" Тогда
		Объект.ПринятоОт	= Строка(Объект.Партнер);
	КонецЕсли;
	
	Объект.Комментарий = ДанныеОбъекта.Комментарий;
	
КонецПроцедуры // ЗаполнитьШапкуПриходныйКассовыйОрде()

Функция НайтиСоздатьДоговор(Контрагент, ДатаДокумента)
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Возврат Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	             |	ДоговорыКонтрагентов.Ссылка КАК Ссылка
	             |ИЗ
	             |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	             |ГДЕ
	             |	ДоговорыКонтрагентов.Контрагент = &Контрагент
	             |	И ДоговорыКонтрагентов.ТипДоговора = &ТипДоговора
	             |	И ДоговорыКонтрагентов.ДатаНачалаДействия <= &ДатаДокумента
	             |	И (ДоговорыКонтрагентов.ДатаОкончанияДействия = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	             |			ИЛИ ДоговорыКонтрагентов.ДатаОкончанияДействия > &ДатаДокумента)";
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("ДатаДокумента", ДатаДокумента);
	Запрос.УстановитьПараметр("ТипДоговора", Перечисления.ТипыДоговоров.СПокупателем);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		ОбъектДоговор = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
		ОбъектДоговор.Наименование = "С покупателем / заказчиком от "+ДатаДокумента;
		ОбъектДоговор.ТипДоговора = Перечисления.ТипыДоговоров.СПокупателем;
		ОбъектДоговор.ДатаНачалаДействия = ДатаДокумента;
		ОбъектДоговор.Записать();
		Возврат ОбъектДоговор.Ссылка;
	КонецЕсли;
КонецФункции

// Заполняет реквизиты шапки документа "Выпуск продукции"
//
// Параметры:
//	Объект			- ДокументОбъект. Документ для заполнения
//
// Возвращаемое значение:
//	Нет	
//
Процедура ЗаполнитьШапкуДокументаПриготовления(Объект)
	Если Объект = Неопределено Тогда
		МенеджерОбъекта = Документы.питВыпускБлюд;
		Объект = МенеджерОбъекта.СоздатьДокумент();
	КонецЕсли;
	
	// Заполнить реквизиты значениями по умолчанию.
	Если ОбщегоНазначения.ПодсистемаСуществует("РегламентированныйУчетПодсистемы") Тогда
		МодульЗаполнениеДокументов = ОбщегоНазначения.ОбщийМодуль("ЗаполнениеДокументов");
		МодульЗаполнениеДокументов.Заполнить(Объект, ДанныеОбъекта);
	КонецЕсли;
	
	Если ДанныеОбъекта.Свойство("Соглашение") И ТипЗнч(ДанныеОбъекта.Соглашение) = Тип("СправочникСсылка.СоглашенияСКлиентами") Тогда 
		Объект.Соглашение = ДанныеОбъекта.Соглашение;
	КонецЕсли;
		
	// ПО видам операции
	Если ДанныеОбъекта.ВидОперации = Перечисления.питХозяйственныеОперации.ВыпускПродукцииСоСписанием Тогда
		Объект.СтатьяРасходов			= ДанныеОбъекта.СтатьяСписанияТМЦ;
		Объект.АналитикаРасходов		= ДанныеОбъекта.АналитикаСписанияТМЦ;
		Объект.питСписыватьНаРасходы	= ЗначениеЗаполнено(ДанныеОбъекта.СтатьяСписанияТМЦ);
		
		Если НЕ ЗначениеЗаполнено(Объект.АналитикаРасходов) И ТипЗнч(Объект.АналитикаРасходов) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
			Объект.АналитикаРасходов = ДанныеОбъекта.Подразделение;
		КонецЕсли;
		
	КонецЕсли; 
		
	// Дата документа
	Объект.Дата = ДанныеОбъекта.Дата;
	Если НЕ ЗначениеЗаполнено(Объект.Дата) Тогда
		Объект.Дата = ТекущаяДата();
	КонецЕсли; 
	
	Объект.Организация	= ДанныеОбъекта.Организация;
	Объект.Подразделение	= ДанныеОбъекта.Подразделение;
	
	Объект.ХозяйственнаяОперация	= ДанныеОбъекта.ВидОперации;
	//<<Портал-Юг, Давиденко 2019.03.27 [4.2.9 Особенности заполнения выпуска блюд по чекам]
	Объект.ПЛ_ХозяйственнаяОперация				= ДанныеОбъекта.ВидОперации;
	//>>Портал-Юг, Давиденко 2019.03.27
	Объект.Склад	= ДанныеОбъекта.СкладПриготовления;
	
	Если ДанныеОбъекта.ВидОперации = Перечисления.питХозяйственныеОперации.ВыпускПродукцииСПеремещением 
		Или ДанныеОбъекта.ВидОперации = Перечисления.питХозяйственныеОперации.ВыпускПродукцииСРозничнойРеализацией
		Или ДанныеОбъекта.ВидОперации = Перечисления.питХозяйственныеОперации.ВыпускПродукцииСРеализацией Тогда
		Объект.СкладПолучатель = ДанныеОбъекта.СкладРеализации;
	КонецЕсли; 
	ДанныеОбъекта.Свойство("ПометкаУдаления", Объект.ПометкаУдаления);
	
	Объект.Валюта	= ДанныеОбъекта.ВалютаУчета;
	Если Не ЗначениеЗаполнено(Объект.Валюта) Тогда
		Объект.Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
	КонецЕсли;
	Объект.КассаККМ	= ДанныеОбъекта.КассаККМ;
	
	Если НЕ ЗначениеЗаполнено(Объект.СтатьяЗатратПроизводство) Тогда
		Объект.СтатьяЗатратПроизводство = Константы.питСтатьяЗатратПроизводство.Получить();
	КонецЕсли;
	Объект.СтатьяКалькуляции = ДанныеОбъекта.КассаККМ.питКассовыйУзел.СтатьяКалькуляции;
	
	//Если ЗначениеЗаполнено(Объект.Склад) И (НЕ Объект.Склад.питПроизводственный) Тогда 
	//	
	//	Объект.Склад = Справочники.Склады.ПустаяСсылка();
	//	
	//КонецЕсли;
	
	// Цена и курс
	Объект.ТипЦен        = ДанныеОбъекта.ТипЦен;
	Объект.Ответственный         = ДанныеОбъекта.Ответственный;
	//Попытка
	//	Объект.КурсКонвертации = ЗаполнениеДокументов.КурсДокумента(Объект, ДанныеОбъекта.ВалютаУчета);
	//Исключение
	//	Объект.КурсКонвертации            = 1;
	//КонецПопытки;
	
	Если НЕ ЗначениеЗаполнено(Объект.Номер) Тогда
		Объект.УстановитьНовыйНомер();
	КонецЕсли;
	
	// Производственные реквизиты
	Объект.РежимИспользованияАналогов 				= Перечисления.питРежимыИспользованияАналогов.Разрешить;
	Объект.РежимРасчетаСписанияВПроизводство 		= питОбщегоНазначенияСервер.ПолучитьЗначениеПоУмолчанию("РежимРасчетаСписанияВПроизводство");
	Объект.ВидПроизводства 							= питОбщегоНазначенияСервер.ПолучитьЗначениеПоУмолчанию("питРежимПриготовленияПолуфабрикатов");
	Объект.РежимПриготовленияМодификаторов			= питОбщегоНазначенияСервер.ПолучитьЗначениеПоУмолчанию("питВидыПроизводстваМодификаторов");
	Объект.НеИспользоватьСезонныеПроценты 			= питОбщегоНазначенияСервер.ПолучитьЗначениеПоУмолчанию("питНеИспользоватьСезонныеПроценты");
	Объект.питСпособРасчетаЦеныРеализацииПродукции		= Перечисления.питСпособРасчетаЦеныРеализацииПродукции.БезИзменения;
	Объект.питОтложитьОплату = ДанныеОбъекта.ОтложитьОплату;
	//Объект.НДСвСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.НеИзменять;
	Объект.УчитыватьОстаткиБлюдНаСкладе 	= ДанныеОбъекта.УчитыватьОстаткиБлюдНаСкладе;
	Объект.РазрешитьНедовложения 			= ДанныеОбъекта.РазрешитьНедовложения;
	
	Если ЗначениеЗаполнено(Объект.Склад)
		И (Объект.ХозяйственнаяОперация = Перечисления.питХозяйственныеОперации.ВыпускПродукцииСРозничнойРеализацией 
			ИЛИ Объект.ХозяйственнаяОперация = Перечисления.питХозяйственныеОперации.ВыпускПродукцииСРеализацией)
		И ЗначениеЗаполнено(Объект.Склад.РозничныйВидЦены) Тогда
		// Для розницы берем тип цен из реквизита склада.
		Объект.ТипЦен = Объект.Склад.РозничныйВидЦены;
	КонецЕсли;
	Объект.СуммаВключаетНДС = СтруктураТекущихСостояний.СуммаВключаетНДС;
	Объект.ЦенаВключаетНДС = СтруктураТекущихСостояний.СуммаВключаетНДС;
	Объект.Комментарий = ДанныеОбъекта.Комментарий;
	
	
КонецПроцедуры // ЗаполнитьШапкуДокументаПриготовления()

// Заполняет реквизиты шапки документа "Закрытие смены"
//
// Параметры:
//	Объект			- ДокументОбъект. Документ для заполнения
//
// Возвращаемое значение:
//	Нет	
//
Процедура ЗаполнитьШапкуДокументаОтчетОРозничныхПродажах(Объект)
	Если Объект = Неопределено Тогда
		МенеджерОбъекта = Документы.ОтчетОРозничныхПродажах;
		Объект = МенеджерОбъекта.СоздатьДокумент();
	КонецЕсли;
	
	// Заполнить реквизиты значениями по умолчанию.
	Если ОбщегоНазначения.ПодсистемаСуществует("РегламентированныйУчетПодсистемы") Тогда
		МодульЗаполнениеДокументов = ОбщегоНазначения.ОбщийМодуль("ЗаполнениеДокументов");
		МодульЗаполнениеДокументов.Заполнить(Объект, ДанныеОбъекта);
	КонецЕсли;
	
	// Дата документа
	Объект.Дата = ДанныеОбъекта.Дата;
	Если НЕ ЗначениеЗаполнено(Объект.Дата) Тогда
		Объект.Дата = ТекущаяДата();
	КонецЕсли; 
	
	Объект.Организация          	= ДанныеОбъекта.Организация;
	Объект.Подразделение    = ДанныеОбъекта.Подразделение;
	
	//Объект.ВидОперации				= ДанныеОбъекта.ВидОперации;
	Объект.Склад			= ДанныеОбъекта.СкладРеализации;
	// Пометка удаления
	ДанныеОбъекта.Свойство("ПометкаУдаления", Объект.ПометкаУдаления);
	
	Объект.Валюта          = ДанныеОбъекта.ВалютаУчета;
	Если Не ЗначениеЗаполнено(Объект.Валюта) Тогда
		Объект.Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
	КонецЕсли;
	Объект.КассаККМ          = ДанныеОбъекта.КассаККМ;
	//Объект.питОтложитьОплату			= ДанныеОбъекта.ОтложитьОплату;
	
	Объект.ВидЦены        = ДанныеОбъекта.ТипЦен;
	
	//Объект.КурсДокумента = 1;
	Объект.Ответственный = ДанныеОбъекта.Ответственный;
	
	//Попытка
	//	Объект.КурсДокумента = ЗаполнениеДокументов.КурсДокумента(Объект, Объект.Валюта);
	//Исключение
	//	Объект.КурсДокумента            = 1;
	//КонецПопытки;
	
	Если НЕ ЗначениеЗаполнено(Объект.Номер) Тогда
		Объект.УстановитьНовыйНомер();
	КонецЕсли;
	Объект.ЦенаВключаетНДС = СтруктураТекущихСостояний.СуммаВключаетНДС;
	Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
	ДЛя Каждого СтрокаТовара Из ДанныеОбъекта.ТОвары Цикл
		Если НЕ питПроизводствоПовтИсп.ПолучитьИмяОсновнойКонфигурации() = "ERPWE" Тогда
			НДС0 = УчетНДСЛокализация.СтавкаНДСПоПеречислению(Перечисления.СтавкиНДС.НДС0);
			НДСБез = УчетНДСЛокализация.СтавкаНДСПоПеречислению(Перечисления.СтавкиНДС.БезНДС);
		Иначе
			НДС0 = питОбщегоНазначения.СтавкаНДСПоЧислу(0);
			НДСБез = питОбщегоНазначения.СтавкаНДСПоЧислу();
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТовара.СтавкаНДС) И СтрокаТовара.СтавкаНДС <> НДСБез И СтрокаТовара.СтавкаНДС <> НДС0 Тогда
			Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Объект.Комментарий = ДанныеОбъекта.Комментарий;
		
КонецПроцедуры // ЗаполнитьШапкуДокументаЗакрытиеСмены()

// Заполняет реквизиты шапки документа "Возврат от покупателя"
//
// Параметры:
//	Объект			- ДокументОбъект. Документ для заполнения
//
// Возвращаемое значение:
//	Нет	
//
Процедура ЗаполнитьШапкуДокументаВозвратОтПокупателя(Объект)
	Если Объект = Неопределено Тогда
		МенеджерОбъекта = Документы.ВозвратТоваровОтКлиента;
		Объект = МенеджерОбъекта.СоздатьДокумент();
	КонецЕсли;
	МетаданныеОбъекта = Объект.Метаданные();
	
	// Заполнить реквизиты значениями по умолчанию.
	Если ОбщегоНазначения.ПодсистемаСуществует("РегламентированныйУчетПодсистемы") Тогда
		МодульЗаполнениеДокументов = ОбщегоНазначения.ОбщийМодуль("ЗаполнениеДокументов");
		МодульЗаполнениеДокументов.Заполнить(Объект, ДанныеОбъекта);
	КонецЕсли;
	
	// Дата документа
	Объект.Дата = ДанныеОбъекта.Дата;
	Если НЕ ЗначениеЗаполнено(Объект.Дата) Тогда
		Объект.Дата = ТекущаяДата();
	КонецЕсли; 
	
	Объект.Организация				= ДанныеОбъекта.Организация;
	Объект.Подразделение			= ДанныеОбъекта.Подразделение;
	Объект.ЦенаВключаетНДС			= Истина;
	Объект.ХозяйственнаяОперация	= ДанныеОбъекта.ВидОперации;
	Объект.Склад					= ДанныеОбъекта.СкладРеализации;
	Объект.Партнер					= Справочники.Партнеры.РозничныйПокупатель;
	Объект.Контрагент				= Справочники.Контрагенты.РозничныйПокупатель;;
	Объект.Соглашение				= Справочники.СоглашенияСКлиентами.ПустаяСсылка();
	Объект.Валюта					= ДанныеОбъекта.ВалютаУчета;
	Объект.СпособКомпенсации		= Перечисления.СпособыКомпенсацииВозвратовТоваров.ВернутьДенежныеСредства;
	Объект.НалогообложениеНДС		= Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
	Если МетаданныеОбъекта.Реквизиты.Найти("ПорядокОплаты") <> Неопределено Тогда
		Объект.ПорядокОплаты		= Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВРубляхОплатаВРублях;
	Иначе
		ТекстСообщения = "При заполнении документа ""ВозвратТоваровОтКлиента"" не найден реквизит ""ПорядокОплаты""";
		ЗаписьЖурналаРегистрации("ЗагрузкаИзДанныхПродаж", УровеньЖурналаРегистрации.Предупреждение, , , ТекстСообщения);
	КонецЕсли;
	Объект.ВариантПриемкиТоваров	= Перечисления.ВариантыПриемкиТоваров.РазделенаПоЗаказамИНакладным;
	Объект.Менеджер					= ДанныеОбъекта.Ответственный;
	Если Не ЗначениеЗаполнено(Объект.Валюта) Тогда
		Объект.Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
	КонецЕсли;
	ДанныеОбъекта.Свойство("ПометкаУдаления", Объект.ПометкаУдаления);
	
	Если НЕ ЗначениеЗаполнено(Объект.Номер) Тогда
		Объект.УстановитьНовыйНомер();
	КонецЕсли;
	Объект.Комментарий = ДанныеОбъекта.Комментарий;
	
КонецПроцедуры // ЗаполнитьШапкуДокументаВозвратОтПокупателя()

// Заполняет реквизиты шапки документа "Списание товаров"
//
// Параметры:
//	Объект			- ДокументОбъект. Документ для заполнения
//
// Возвращаемое значение:
//	Нет	
//
Процедура ЗаполнитьШапкуДокументаСписаниеТоваров(Объект)
	
	ИмяДокументаВнутреннееПотребление = питОбратнаяСовместимостьПовтИсп.ИмяДокументаВнутреннееПотребление();
	
	Если Объект = Неопределено Тогда
		МенеджерОбъекта = Документы[ИмяДокументаВнутреннееПотребление];
		Объект = МенеджерОбъекта.СоздатьДокумент();
	КонецЕсли;
	
	// Дата документа
	Объект.Дата = ДанныеОбъекта.Дата;
	Если НЕ ЗначениеЗаполнено(Объект.Дата) Тогда
		Объект.Дата = ТекущаяДата();
	КонецЕсли; 
	
	Объект.Организация				= ДанныеОбъекта.Организация;
	Объект.Подразделение			= ДанныеОбъекта.Подразделение;
	Объект.Склад					= ДанныеОбъекта.СкладРеализации;
	Объект.ХозяйственнаяОперация	= ДанныеОбъекта.ВидОперации;
	Объект.Комментарий				= ДанныеОбъекта.Комментарий;
	Объект.Ответственный			= ДанныеОбъекта.Ответственный;
	
	ДанныеОбъекта.Свойство("ПометкаУдаления", Объект.ПометкаУдаления);
	
	Если НЕ ЗначениеЗаполнено(Объект.Номер) Тогда
		Объект.УстановитьНовыйНомер();
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьШапкуДокументаСписаниеТоваров()

// Заполняет строку табличной части "Товары" документа "Выпуск продукции"
//
// Параметры:
// 	НоваяСтрока   	- СтрокаТабличнойЧасти. Строка табличной части документа
//	ТекСтрока		- СтрокаТаблицыЗначений. Строка таблицы товаров
//	Объект			- ДокументОбъект. Документ для заполнения
//
// Возвращаемое значение:
//	Нет	
//
Процедура ЗаполнитьСтрокуТоваровПриготовления(НоваяСтрока, ТекСтрока, Объект, СтатусУказанияСерий = Неопределено, Количество = Неопределено, Серия = Неопределено)
	
	НоваяСтрока.Номенклатура      = ТекСтрока.Номенклатура;
	НоваяСтрока.Характеристика      = ТекСтрока.Характеристика;
	
	//>>Швецов. 11.12.2024. розничные продажи алкоголя
	//НоваяСтрока.Серия      = ТекСтрока.Серия;
	//НоваяСтрока.СтатусУказанияСерий      = ТекСтрока.СтатусУказанияСерий;
	
	НоваяСтрока.Серия = ?(Серия = Неопределено, ТекСтрока.Серия, Серия);
	НоваяСтрока.СтатусУказанияСерий = ?(СтатусУказанияСерий = Неопределено, ТекСтрока.СтатусУказанияСерий, СтатусУказанияСерий);
	//<<Швецов. 11.12.2024. розничные продажи алкоголя
	
	НоваяСтрока.Упаковка = НоваяСтрока.Номенклатура.ЕдиницаИзмерения;
	НоваяСтрока.ИдентификаторСтроки = ТекСтрока.ИдентификаторСтроки;
	
	// Контроль рецептуры для блюд
	Если НоваяСтрока.Номенклатура.питВидНоменклатуры = Перечисления.питВидыНоменклатуры.Блюдо Тогда

		//<<Портал-Юг, Давиденко 2019.03.27 [4.2.9 Особенности заполнения выпуска блюд по чекам]
		// для открытой цены рецептура должна заполняться вручную
		//<< Портал-Юг, Баринов, 2019.08.15 [9.09 Обособление продаж по открытой цене]
		//Если Не ТекСтрока.ПЛ_ОтдельныйВыпускБезРецептур Тогда
		Если НЕ ЗначениеЗаполнено(Объект.ПЛ_Номенклатура) Тогда
		//>> Портал-Юг, Баринов, 2019.08.15
		//>>Портал-Юг, Давиденко 2019.03.27		
		НоваяСтрока.Рецептура = ВернутьОсновнуюРецептуру(НоваяСтрока, Объект);

		//<<Портал-Юг, Давиденко 2019.03.27 [4.2.9 Особенности заполнения выпуска блюд по чекам]
		КонецЕсли;
		//>>Портал-Юг, Давиденко 2019.03.27			
	КонецЕсли;
	
	//>>Швецов. 11.12.2024. розничные продажи алкоголя
	//НоваяСтрока.Количество 	= ТекСтрока.Количество;
	НоваяСтрока.Количество 	= ?(Количество = Неопределено,ТекСтрока.Количество, Количество);
	//<<Швецов. 11.12.2024. розничные продажи алкоголя
	текКоэффициент = питОбщегоНазначения.ПолучитьКоэффициентУпаковки(НоваяСтрока.Номенклатура,НоваяСтрока.Упаковка, УпаковкиКэшированныеЗначения);
	НоваяСтрока.КоличествоУпаковок = НоваяСтрока.Количество * текКоэффициент;
	
	//<<Портал-Юг, Давиденко 2019.03.27 [4.2.9 Особенности заполнения выпуска блюд по чекам]
	НоваяСтрока.ПЛ_Передано = НоваяСтрока.КоличествоУпаковок; 
	НоваяСтрока.ПЛ_Договор = ТекСтрока.ПЛ_Договор;
	//>>Портал-Юг, Давиденко 2019.03.27
	
	ОсвобожденОтНДС = Ложь;
	Если ОсвобожденОтНДС Тогда
		Если НЕ питПроизводствоПовтИсп.ПолучитьИмяОсновнойКонфигурации() = "ERPWE" Тогда
			НоваяСтрока.СтавкаНДС = УчетНДСЛокализация.СтавкаНДСПоПеречислению(Перечисления.СтавкиНДС.БезНДС);
		Иначе
			НоваяСтрока.СтавкаНДС = питОбщегоНазначения.СтавкаНДСПоЧислу();
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(ТекСтрока.СтавкаНДС) Тогда
			НоваяСтрока.СтавкаНДС = ТекСтрока.СтавкаНДС;
			
			//>>Швецов. 11.12.2024. розничные продажи алкоголя
			//пересчет по акоголю
			Если Количество = Неопределено Тогда
				
				НоваяСтрока.СуммаНДС = ТекСтрока.СуммаНДС;
				
			Иначе
				
				НоваяСтрока.СуммаНДС = ТекСтрока.СуммаНДС / ТекСтрока.Количество * Количество;
					
			КонецЕсли;
			//<<Швецов. 11.12.2024. розничные продажи алкоголя
		Иначе
			НоваяСтрока.СтавкаНДС = НоваяСтрока.Номенклатура.СтавкаНДС;
		КонецЕсли; 
	КонецЕсли;
	//>>Швецов. 11.12.2024. розничные продажи алкоголя
	//пересчет по акоголю
	Если Количество = Неопределено Тогда
		НоваяСтрока.Сумма      	= ТекСтрока.Сумма;
		НоваяСтрока.СуммаРучнойСкидки	= ТекСтрока.СуммаРучнойСкидки;
	Иначе
		
		НоваяСтрока.Сумма      	= ТекСтрока.Сумма / ТекСтрока.Количество * Количество;
		НоваяСтрока.СуммаРучнойСкидки	= ТекСтрока.СуммаРучнойСкидки / ТекСтрока.Количество * Количество;
		
	КонецЕсли;	
	//<<Швецов. 11.12.2024. розничные продажи алкоголя
	
	Если ТекСтрока.Сумма + ТекСтрока.СуммаРучнойСкидки = 0 Тогда
		НоваяСтрока.ПроцентРучнойСкидки = 0;
	Иначе
		НоваяСтрока.ПроцентРучнойСкидки	= ТекСтрока.СуммаРучнойСкидки / (ТекСтрока.Сумма + ТекСтрока.СуммаРучнойСкидки) * 100;
	КонецЕсли;
	
	Если НоваяСтрока.Количество = 0 Тогда
		НоваяСтрока.Цена = 0;
	Иначе
		НоваяСтрока.Цена = (НоваяСтрока.Сумма + НоваяСтрока.СуммаРучнойСкидки) / НоваяСтрока.Количество;
	КонецЕсли;
	
	НоваяСтрока.СуммаНДС = ЦенообразованиеКлиентСервер.РассчитатьСуммуНДС(НоваяСтрока.Сумма, НоваяСтрока.СтавкаНДС, Объект.СуммаВключаетНДС);
	
	//? Документы.питВыпускПродукции.ЗаполнитьСчетаУчетаВСтрокеТабЧасти(Объект, НоваяСтрока, "Товары"); 
	
КонецПроцедуры // ЗаполнитьСтрокуТоваровПриготовления()

// Заполняет строку табличной части "Товары" документа "Отчет о розничных продажах"
//
// Параметры:
// 	НоваяСтрока   	- СтрокаТабличнойЧасти. Строка табличной части документа
//	ТекСтрока		- СтрокаТаблицыЗначений. Строка таблицы товаров
//	Объект			- ДокументОбъект. Документ для заполнения
//
// Возвращаемое значение:
//	Нет	
//
Процедура ЗаполнитьСтрокуТоваров(НоваяСтрока, ТекСтрока, Объект)
	
	НоваяСтрока.Номенклатура       	= ТекСтрока.Номенклатура;
	НоваяСтрока.Характеристика     	= ТекСтрока.Характеристика;
	НоваяСтрока.Серия     	= ТекСтрока.Серия;
	НоваяСтрока.СтатусУказанияСерий     	= ТекСтрока.СтатусУказанияСерий;
	НоваяСтрока.Количество  		= ТекСтрока.Количество;
	
	//НоваяСтрока.Упаковка = НоваяСтрока.Номенклатура.ЕдиницаИзмерения;
	текКоэффициент = питОбщегоНазначения.ПолучитьКоэффициентУпаковки(НоваяСтрока.Номенклатура,НоваяСтрока.Номенклатура.ЕдиницаИзмерения, УпаковкиКэшированныеЗначения); 
	Если текКоэффициент = 0 Тогда
		текКоэффициент = 1;
	КонецЕсли;
	НоваяСтрока.КоличествоУпаковок = НоваяСтрока.Количество * текКоэффициент;
	
	НоваяСтрока.Сумма				= ТекСтрока.Сумма;
	НоваяСтрока.СуммаРучнойСкидки	= ТекСтрока.СуммаРучнойСкидки;
	НоваяСтрока.ПроцентРучнойСкидки	= ТекСтрока.ПроцентРучнойСкидки;
	
	Если НоваяСтрока.Количество = 0 Тогда
		НоваяСтрока.Цена = 0;
	Иначе
		НоваяСтрока.Цена = (НоваяСтрока.Сумма + НоваяСтрока.СуммаРучнойСкидки) / НоваяСтрока.Количество;
	КонецЕсли; 
	
	ОсвобожденОтНДС = Ложь;
	Если ОсвобожденОтНДС Тогда
		Если НЕ питПроизводствоПовтИсп.ПолучитьИмяОсновнойКонфигурации() = "ERPWE" Тогда
			НоваяСтрока.СтавкаНДС = УчетНДСЛокализация.СтавкаНДСПоПеречислению(Перечисления.СтавкиНДС.БезНДС);
		Иначе
			НоваяСтрока.СтавкаНДС = питОбщегоНазначения.СтавкаНДСПоЧислу();
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(ТекСтрока.СтавкаНДС) Тогда
			НоваяСтрока.СтавкаНДС = ТекСтрока.СтавкаНДС;
			НоваяСтрока.СуммаНДС = ТекСтрока.СуммаНДС;
		Иначе
			НоваяСтрока.СтавкаНДС = НоваяСтрока.Номенклатура.СтавкаНДС;
		КонецЕсли;
	КонецЕсли;
	НоваяСтрока.СуммаНДС = ЦенообразованиеКлиентСервер.РассчитатьСуммуНДС(НоваяСтрока.Сумма, НоваяСтрока.СтавкаНДС, Объект.ЦенаВключаетНДС);
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.ОтчетОРозничныхПродажах") Тогда //в Релиазации товаров и услуг нет реквизита
		НоваяСтрока.Партнер = Справочники.Партнеры.РозничныйПокупатель;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСтрокуТоваров()

// Заполняет строку табличной части "Товары" документа "Закрытие смены"
//
// Параметры:
// 	НоваяСтрока   	- СтрокаТабличнойЧасти. Строка табличной части документа
//	ТекСтрока		- СтрокаТаблицыЗначений. Строка таблицы товаров
//	Объект			- ДокументОбъект. Документ для заполнения
//
// Возвращаемое значение:
//	Нет	
//
Процедура ЗаполнитьСтрокуТоваровСписание(НоваяСтрока, ТекСтрока, Объект)
	
	НоваяСтрока.Номенклатура       	= ТекСтрока.Номенклатура;
	НоваяСтрока.Характеристика     	= ТекСтрока.Характеристика;
	НоваяСтрока.Серия              	= ТекСтрока.Серия;
	НоваяСтрока.СтатусУказанияСерий	= ТекСтрока.СтатусУказанияСерий;
	НоваяСтрока.Количество			= ТекСтрока.Количество;
	НоваяСтрока.Упаковка			= ТекСтрока.ЕдиницаИзмерения;
	текКоэффициент = питОбщегоНазначения.ПолучитьКоэффициентУпаковки(НоваяСтрока.Номенклатура,НоваяСтрока.Упаковка, УпаковкиКэшированныеЗначения); 
	НоваяСтрока.КоличествоУпаковок	= НоваяСтрока.Количество * текКоэффициент;
	НоваяСтрока.АналитикаРасходов	= ДанныеОбъекта.АналитикаСписанияТМЦ;
	НоваяСтрока.СтатьяРасходов		= ДанныеОбъекта.СтатьяСписанияТМЦ;
	
КонецПроцедуры // ЗаполнитьСтрокуТоваровСписание()

// Заполняет строку табличной части "Модификаторы" документа продаж
//
// Параметры:
// 	НоваяСтрока   	- СтрокаТабличнойЧасти. Строка табличной части документа
//	ТекСтрока		- СтрокаТаблицыЗначений. Строка таблицы модификаторов
//	Объект			- ДокументОбъект. Документ для заполнения
//	ДопПараметры  	- Структура. Структура дополнительных параметров обмена
//
// Возвращаемое значение:
//	Нет	
//
Процедура ЗаполнитьСтрокуМодификаторов(НоваяСтрока, ТекСтрока, Объект, ДопПараметры)
	
	НоваяСтрока.Модификатор						= ТекСтрока.Модификатор;
	НоваяСтрока.Номенклатура					= ТекСтрока.Номенклатура;
	НоваяСтрока.Характеристика					= ТекСтрока.Характеристика;
	НоваяСтрока.Серия							= ТекСтрока.Серия;
	НоваяСтрока.СтатусУказанияСерий				= ТекСтрока.СтатусУказанияСерий;
	НоваяСтрока.Количество  					= ТекСтрока.Количество;
	НоваяСтрока.КоличествоУпаковокНоменклатуры	= ТекСтрока.КоличествоУпаковокНоменклатуры;
	
	Коэф = питОбщегоНазначения.ПолучитьКоэффициентУпаковки(ТекСтрока.Номенклатура, ТекСтрока.ЕдиницаИзмеренияНоменклатуры, УпаковкиКэшированныеЗначения);
	НоваяСтрока.КоличествоНоменклатуры	= НоваяСтрока.КоличествоУпаковокНоменклатуры * Коэф;
	
	Если НоваяСтрока.КоличествоНоменклатуры = 0 Тогда
		НоваяСтрока.КоличествоНоменклатуры  = НоваяСтрока.Количество * НоваяСтрока.Модификатор.КоличествоНоменклатуры;
	КонецЕсли;
	
	Если НЕ питОбщегоНазначенияКлиентСервер.питЗначениеЗаполнено(НоваяСтрока.Номенклатура) Тогда
		НоваяСтрока.Номенклатура = НоваяСтрока.Модификатор.ДопНоменклатура;
		НоваяСтрока.Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
		НоваяСтрока.Серия = Справочники.СерииНоменклатуры.ПустаяСсылка();
		НоваяСтрока.СтатусУказанияСерий = 0;
	КонецЕсли; 
	НоваяСтрока.УпаковкаНоменклатуры			 = ТекСтрока.ЕдиницаИзмеренияНоменклатуры;
	НоваяСтрока.Цена                             = ТекСтрока.Цена;
	НоваяСтрока.Сумма                            = ТекСтрока.Сумма;
	//НоваяСтрока.СуммаСкидки                      = ТекСтрока.СуммаСкидки;
	
	НоваяСтрока.ИдентификаторСтроки              = ТекСтрока.ИдентификаторСтроки;
	
	Если (Объект.ХозяйственнаяОперация = Перечисления.питХозяйственныеОперации.ВыпускПродукцииСРозничнойРеализацией 
			ИЛИ Объект.ХозяйственнаяОперация = Перечисления.питХозяйственныеОперации.ВыпускПродукцииСРеализацией)
		И НоваяСтрока.Номенклатура.питВидНоменклатуры = Перечисления.питВидыНоменклатуры.Блюдо Тогда
		
		ВернутьОсновнуюРецептуру(НоваяСтрока,Объект);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСтрокуМодификаторов()

// Заполняет строку табличной части "Товары" документа "Возврат от покупателя"
//
// Параметры:
// 	НоваяСтрока   	- СтрокаТабличнойЧасти. Строка табличной части документа
//	ТекСтрока		- СтрокаТаблицыЗначений. Строка таблицы товаров
//	Объект			- ДокументОбъект. Документ для заполнения
//
// Возвращаемое значение:
//	Нет	
//
Процедура ЗаполнитьСтрокуТоваровВозвратОтПокупателя(НоваяСтрока, ТекСтрока, Объект)
	
	//<<Портал Юг, Финик, 22.04.2020, INV#99 Подставляем сумму из чека возврата

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	питУчетДанныхПродаж.ДокументРегистратор КАК ДокументРегистратор,
		|	питДанныеПродажФронтаТовары.Номенклатура КАК Номенклатура,
		|	питДанныеПродажФронтаТовары.Сумма КАК Сумма
		|ИЗ
		|	РегистрСведений.питУчетДанныхПродаж КАК питУчетДанныхПродаж
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.питДанныеПродажФронта.Товары КАК питДанныеПродажФронтаТовары
		|		ПО питУчетДанныхПродаж.ДокументРегистратор.Ссылка = питДанныеПродажФронтаТовары.Ссылка
		|ГДЕ
		|	питУчетДанныхПродаж.ДокументПриемник = &ДокументПриемник";
	
	Запрос.УстановитьПараметр("ДокументПриемник", Объект.ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ТекСтрока.Номенклатура = ВыборкаДетальныеЗаписи.Номенклатура тогда
			СуммаПоЧеку = ВыборкаДетальныеЗаписи.Сумма;
		КонецЕсли;
	КонецЦикла;
	
	//>>Портал Юг, Финик, 22.04.2020, INV#99

	
	НоваяСтрока.Номенклатура		= ТекСтрока.Номенклатура;
	НоваяСтрока.Характеристика		= ТекСтрока.Характеристика;
	НоваяСтрока.Серия				= ТекСтрока.Серия;
	НоваяСтрока.СтатусУказанияСерий	= ТекСтрока.СтатусУказанияСерий;
	НоваяСтрока.Количество			= ТекСтрока.Количество;
	НоваяСтрока.Упаковка			= ТекСтрока.ЕдиницаИзмерения;
	текКоэффициент = питОбщегоНазначения.ПолучитьКоэффициентУпаковки(НоваяСтрока.Номенклатура,НоваяСтрока.Упаковка, УпаковкиКэшированныеЗначения); 
	НоваяСтрока.КоличествоУпаковок = НоваяСтрока.Количество * текКоэффициент;
	//<<Портал-Юг, Финик 03.06.2020 [#inv99] 
	НоваяСтрока.ПЛ_Договор = ТекСтрока.ПЛ_Договор;
	//>>Портал-Юг, Финик 03.06.2020 [#inv99]

	НоваяСтрока.Сумма				= ТекСтрока.Сумма; 
	
	//<<Портал-Юг, Финик 03.06.2020 [#inv99] Берём сумму из чека возврата, если продажи не было
	Если ТекСтрока.Сумма = 0 И НЕ ЗначениеЗаполнено(ТекСтрока.ПЛ_Договор) Тогда
		НоваяСтрока.Сумма = СуммаПоЧеку;
	Иначе
		НоваяСтрока.Сумма = ТекСтрока.Сумма;
	КонецЕсли;
	//>>Портал-Юг, Финик 03.06.2020 [#inv99]

	
	Если НоваяСтрока.Количество = 0 Тогда
		НоваяСтрока.Цена = 0;
	Иначе
		НоваяСтрока.Цена = НоваяСтрока.Сумма  / НоваяСтрока.Количество;
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ТекСтрока.СтавкаНДС) Тогда
		НоваяСтрока.СтавкаНДС		= ТекСтрока.СтавкаНДС;
		НоваяСтрока.СуммаНДС		= ТекСтрока.СуммаНДС;
	Иначе
		НоваяСтрока.СтавкаНДС		= НоваяСтрока.Номенклатура.СтавкаНДС;
		НоваяСтрока.СуммаНДС		= ЦенообразованиеКлиентСервер.РассчитатьСуммуНДС(НоваяСтрока.Сумма, НоваяСтрока.СтавкаНДС, Объект.ЦенаВключаетНДС);
	КонецЕсли;
	НоваяСтрока.СуммаСНДС = НоваяСтрока.Сумма + ?(Объект.ЦенаВключаетНДС, 0, НоваяСтрока.СуммаНДС);
	НоваяСтрока.СпособОпределенияСебестоимости = Перечисления.СпособыОпределенияСебестоимости.ИзТекущегоДокумента;
	
КонецПроцедуры // ЗаполнитьСтрокуТоваровВозвратОтПокупателя()

// Заполняет строку табличной части "Оплаты" документа продаж
//
// Параметры:
// 	НоваяСтрока   	- СтрокаТабличнойЧасти. Строка табличной части документа
//	ТекСтрока		- СтрокаТаблицыЗначений. Строка таблицы оплат
//	Объект			- ДокументОбъект. Документ для заполнения
//
// Возвращаемое значение:
//	Нет	
//
Процедура ЗаполнитьСтрокуОплаты(НоваяСтрока, ТекСтрока, Объект, Отказ = Ложь, ТекстОшибкиОплаты = "")
	
	Попытка
		НоваяСтрока.Сумма = ТекСтрока.Сумма - ТекСтрока.СуммаВозврат;
	Исключение
		НоваяСтрока.СуммаОплаты = ТекСтрока.Сумма - ТекСтрока.СуммаВозврат;
	КонецПопытки;
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.ОтчетОРозничныхПродажах")
		ИЛИ (ТипЗнч(Объект) = Тип("ДокументОбъект.питВыпускБлюд") И Объект.ХозяйственнаяОперация = Перечисления.питХозяйственныеОперации.ВыпускПродукцииСРозничнойРеализацией) Тогда
	
		НайденныеТерминалы = ТаблицаЭквайринговыхТерминалов.НайтиСтроки(Новый Структура("КассаККМ, ВидОплаты", Объект.КассаККМ, ТекСтрока.ВидОплаты));
		Если НайденныеТерминалы.Количество() Тогда
			НоваяСтрока.ЭквайринговыйТерминал = НайденныеТерминалы[0].ЭквайринговыйТерминал;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(НоваяСтрока.ЭквайринговыйТерминал) Тогда
			ТекстОшибкиОплаты = ТекстОшибкиОплаты + "Целевые документы не были загружены по чекам:
			|";
			Для каждого ТекОснованиеЧек Из ДанныеОбъекта.МассивОснований Цикл
				ТекстОшибкиОплаты = ТекстОшибкиОплаты + ТекОснованиеЧек + Символы.ПС;
			КонецЦикла;
			ТекстОшибкиОплаты = ТекстОшибкиОплаты + "По причине: 
			| Не найдено значение эквайрингового терминала для вида оплаты <"+ТекСтрока.ВидОплаты+">. 
			| Настройки эквайринговых терминалов задаются в кассовом узле!";
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.РеализацияТоваровУслуг")
		ИЛИ (ТипЗнч(Объект) = Тип("ДокументОбъект.питВыпускБлюд") И Объект.ХозяйственнаяОперация = Перечисления.питХозяйственныеОперации.ВыпускПродукцииСРеализацией) Тогда
		
		НайденныеТерминалы = ТаблицаКонтрагентов.НайтиСтроки(Новый Структура("КассаККМ, ВидОплаты", Объект.КассаККМ, ТекСтрока.ВидОплаты));
		Если НЕ НайденныеТерминалы.Количество() Тогда
			ТекстОшибкиОплаты = ТекстОшибкиОплаты + "Целевые документы не были загружены по чекам:
			|";
			Для каждого ТекОснованиеЧек Из ДанныеОбъекта.МассивОснований Цикл
				ТекстОшибкиОплаты = ТекстОшибкиОплаты + ТекОснованиеЧек + Символы.ПС;
			КонецЦикла;
			ТекстОшибкиОплаты = ТекстОшибкиОплаты + "По причине: 
			| Не указаны параметры заполнения контрагентов для вида оплаты <"+ТекСтрока.ВидОплаты+">. 
			| Настройки контрагентов задаются в кассовом узле!";
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ДанныеКарты = ТекСтрока.Карточка.ДанныеКарты;
	Если ПустаяСтрока(ДанныеКарты) Тогда
		ДанныеКарты = "Загружено из фронта";
	КонецЕсли;
	
	НоваяСтрока.НомерПлатежнойКарты = ДанныеКарты;
	
КонецПроцедуры // ЗаполнитьСтрокуОплаты()

// Заполняет строку табличной части "Оплаты" документа продаж
//
// Параметры:
// 	НоваяСтрока   	- СтрокаТабличнойЧасти. Строка табличной части документа
//	ТекСтрока		- СтрокаТаблицыЗначений. Строка таблицы оплат
//	Объект			- ДокументОбъект. Документ для заполнения
//
// Возвращаемое значение:
//	Нет	
//
Процедура ЗаполнитьСтрокуОплатыСертификата(НоваяСтрока, ТекСтрока, Объект, Отказ = Ложь, ТекстОшибкиОплаты = "")
	
	// Заполнение сертификата по кассовому узлу
	НайденныеСертификаты = ТаблицаПодарочныхСертификатов.НайтиСтроки(Новый Структура("КассаККМ, ВидОплаты", Объект.КассаККМ, ТекСтрока.ВидОплаты));
	Если НайденныеСертификаты.Количество() Тогда
		НоваяСтрока.ПодарочныйСертификат = НайденныеСертификаты[0].ПодарочныйСертификат;
	КонецЕсли;
	
	НоваяСтрока.Сумма = ТекСтрока.Сумма - ТекСтрока.СуммаВозврат;
	НоваяСтрока.СуммаВВалютеСертификата = НоваяСтрока.Сумма;
	
	Если НЕ ЗначениеЗаполнено(НоваяСтрока.ПодарочныйСертификат) Тогда
		
		// Если не заполнили по КУ, то создаем новый сертификат.
		ДанныеКарты = ТекСтрока.Карточка.ДанныеКарты;
		Если Не ЗначениеЗаполнено(ДанныеКарты) Тогда
			ДанныеКарты = питОбщегоНазначения.СформироватьШтрихКодТовара();
		КонецЕсли;
		
		СертификатНайден = Ложь;
		СтруктураСертификатов = ПодарочныеСертификатыВызовСервера.НайтиПодарочныеСертификатыПоШтрихкоду(ДанныеКарты);
		Для Каждого текСертификат Из СтруктураСертификатов.ЗарегистрированныеПодарочныеСертификаты Цикл
			Если текСертификат.Остаток >= НоваяСтрока.Сумма Тогда
				НоваяСтрока.ПодарочныйСертификат =  текСертификат.Ссылка;
				СертификатНайден = Истина;
			КонецЕсли;	
		КонецЦикла;
		
		Если Не СертификатНайден Тогда
			КратностьПлатежа = ТекСтрока.Карточка.КратностьПлатежа;
			Если Не ЗначениеЗаполнено(КратностьПлатежа) Тогда
				КратностьПлатежа = НоваяСтрока.Сумма;
			КонецЕсли;
			
			ВидСертификата = ПолучитьВидСертификатаПоНоминалу(КратностьПлатежа);
			Если Не ЗначениеЗаполнено(ВидСертификата) Тогда
				ВидСертификата = Справочники.ВидыПодарочныхСертификатов.СоздатьЭлемент();
				ВидСертификата.Наименование = "На сумму " + КратностьПлатежа;
				ВидСертификата.Валюта = Объект.Валюта;
				ВидСертификата.Номинал = КратностьПлатежа;
				ВидСертификата.ТипКарты = Перечисления.ТипыКарт.Штриховая;
				ВидСертификата.ПериодДействия = Перечисления.Периодичность.Год;
				ВидСертификата.КоличествоПериодовДействия = 1;
				ВидСертификата.СтатьяДоходов = ПланыВидовХарактеристик.СтатьиДоходов.ВыручкаОтПродаж;
				
				НоваяСтрокаШаблона = ВидСертификата.ШаблоныКодовПодарочныхСертификатов.Добавить();
				НоваяСтрокаШаблона.ДлинаШтрихкода = СтрДлина(ДанныеКарты);
				Для Ном = 1 По СтрДлина(ДанныеКарты) Цикл
					НоваяСтрокаШаблона.НачалоДиапазонаШтрихкода = НоваяСтрокаШаблона.НачалоДиапазонаШтрихкода + "1";
					НоваяСтрокаШаблона.КонецДиапазонаШтрихкода = НоваяСтрокаШаблона.КонецДиапазонаШтрихкода + "9";
				КонецЦикла;
				ВидСертификата.Записать();
				ВидСертификата = ВидСертификата.Ссылка;
			КонецЕсли;
			
			ПодарочныйСертификат = ПодарочныеСертификатыВызовСервера.ЗарегистрироватьПодарочныйСертификатУпрощенно(ВидСертификата, Перечисления.ТипыКодовКарт.Штрихкод, Неопределено, ДанныеКарты);
			
			НоваяСтрока.ПодарочныйСертификат = ПодарочныйСертификат;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСтрокуОплаты()

Процедура ЗаполнитьСтрокуОплатыБонуснымиБаллами(НоваяСтрока, ТекСтрока, Объект, Отказ = Ложь, ТекстОшибкиОплаты = "")
	
	НайденныеБП = ТаблицаБонусныхПрограмм.НайтиСтроки(Новый Структура("КассаККМ, ВидОплаты", Объект.КассаККМ, ТекСтрока.ВидОплаты));
	Если НайденныеБП.Количество() Тогда
		НоваяСтрока.БонуснаяПрограммаЛояльности = НайденныеБП[0].БонуснаяПрограмма;
	КонецЕсли;
	
	НоваяСтрока.СуммаБонусныхБаллов = ТекСтрока.Сумма - ТекСтрока.СуммаВозврат;
	НоваяСтрока.ДатаОплаты = ТекСтрока.ДатаОплаты;
	
	Если НЕ ЗначениеЗаполнено(НоваяСтрока.БонуснаяПрограммаЛояльности) Тогда
		ТекстОшибкиОплаты = ТекстОшибкиОплаты + "Целевые документы не были загружены по чекам:
		|";
		Для каждого ТекОснованиеЧек Из ДанныеОбъекта.МассивОснований Цикл
			ТекстОшибкиОплаты = ТекстОшибкиОплаты + ТекОснованиеЧек + Символы.ПС;
		КонецЦикла;
		ТекстОшибкиОплаты = ТекстОшибкиОплаты + "По причине: 
		| Не найдено значение бонусной программы лояльности для вида оплаты <"+ТекСтрока.ВидОплаты+">. 
		| Настройки бонусных программ задаются в кассовом узле!";
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСтрокуОплаты()

Функция ПолучитьВидСертификатаПоНоминалу(Номинал)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номинал", Номинал);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВидыПодарочныхСертификатов.Ссылка
	               |ИЗ
	               |	Справочник.ВидыПодарочныхСертификатов КАК ВидыПодарочныхСертификатов
	               |ГДЕ
	               |	ВидыПодарочныхСертификатов.Номинал = &Номинал
	               |	И НЕ ВидыПодарочныхСертификатов.ПометкаУдаления";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Пытается найти НайтиВидыОплатОрганизаций  по переданным параметрам. Если не нашла, возвращает пустую ссылку.
Функция НайтиВидыОплатОрганизацийПоПараметрам(ТипОплаты, Организация = Неопределено, Контрагент = Неопределено,ДоговорКонтрагента = Неопределено)
	Запрос = Новый Запрос;
	ТекстЗапроса = "ВЫБРАТЬ
	|	ВидыОплатОрганизаций.Ссылка
	|ИЗ
	|	Справочник.питВидыОплатОрганизаций КАК ВидыОплатОрганизаций
	|ГДЕ
	|	ВидыОплатОрганизаций.ТипОплаты = &ТипОплаты ";
	Запрос.УстановитьПараметр("ТипОплаты", ТипОплаты);
	Если Организация <> Неопределено Тогда
		ТекстЗапроса = ТекстЗапроса+ " И ВидыОплатОрганизаций.Организация = &Организация ";
		Запрос.УстановитьПараметр("Организация", Организация);
	КонецЕсли;
	Если Контрагент <> Неопределено Тогда
		ТекстЗапроса = ТекстЗапроса+ " И ВидыОплатОрганизаций.Контрагент = &Контрагент ";
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
	КонецЕсли;
	Если Контрагент <> Неопределено Тогда
		ТекстЗапроса = ТекстЗапроса+ " И ВидыОплатОрганизаций.ДоговорКонтрагента = &ДоговорКонтрагента ";
		Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса+ "
	|	И НЕ ВидыОплатОрганизаций.ПометкаУдаления
	|	И НЕ ВидыОплатОрганизаций.ЭтоГруппа ";
	
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ССылка;
	Иначе
		Возврат Справочники.питВидыОплатОрганизаций.ПустаяСсылка();
	КонецЕсли;
	
	
КонецФункции


Функция ВернутьОсновнуюРецептуру(ТекСтрока, Объект)
	СтрокиРецептур = КэшРецептур.НайтиСтроки(Новый Структура("Номенклатура, Характеристика, Подразделение", ТекСтрока.Номенклатура, ТекСтрока.Характеристика, Объект.Подразделение));
	Если СтрокиРецептур.Количество() = 0 Тогда
		// Актуальная рецептура
			
		ТекРецептура = питПроизводство.ВернутьОсновнуюРецептуру(ТекСтрока.Номенклатура, ТекСтрока.Характеристика,  Перечисления.питХозяйственныеОперации.РецептураПриготовление, Объект.Дата, ДопПараметры.СпособПодбораОсновнойРецептуры, , Объект.Организация,,,Объект.Подразделение);
			
		НоваяСтрокаРецептур = КэшРецептур.Добавить();
		НоваяСтрокаРецептур.Номенклатура = ТекСтрока.Номенклатура;
		НоваяСтрокаРецептур.Характеристика = ТекСтрока.Характеристика;
		НоваяСтрокаРецептур.Рецептура = ТекРецептура;
		НоваяСтрокаРецептур.Подразделение = Объект.Подразделение;
	Иначе
		ТекРецептура = СтрокиРецептур[0].Рецептура;
	КонецЕсли;
	
	Возврат ТекРецептура;
КонецФункции

Процедура ОбновитьВремяКомментарийДокумента(Объект)
	
	
	Если СтруктураТекущихСостояний.ДатаЦелевыхДокументов = 0 Тогда
		Объект.Дата = Мин(ДанныеОбъекта.Дата, Объект.Дата);
	ИначеЕсли СтруктураТекущихСостояний.ДатаЦелевыхДокументов = 1 Или СтруктураТекущихСостояний.ДатаЦелевыхДокументов = 3 Тогда 
		Объект.Дата = Макс(ДанныеОбъекта.Дата, Объект.Дата);
	ИначеЕсли СтруктураТекущихСостояний.ДатаЦелевыхДокументов = 2 Тогда 
		Объект.Дата = ДанныеОбъекта.Дата;
	КонецЕсли;
	
	Объект.Комментарий = Объект.Комментарий + ?(Объект.Комментарий = "","Создан в результате загрузки из документов чеки общепита: ",", ") + ДанныеОбъекта.Комментарий
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Основная процедура запуска перегрузки данных.
Функция ВыполнитьЗагрузкуДанных() Экспорт
	
	ИмяДокументаВнутреннееПотребление = питОбратнаяСовместимостьПовтИсп.ИмяДокументаВнутреннееПотребление();
	
	// Инициализация переменных
	// Массив объектов для проведения
	МассивТиповДокументОбъект = Новый Массив(11); 
	МассивТиповДокументОбъект[0] = Тип("ДокументОбъект.питВыпускБлюд");
	МассивТиповДокументОбъект[1] = Тип("ДокументОбъект.СписаниеНедостачТоваров");
	МассивТиповДокументОбъект[2] = Тип("ДокументОбъект.ВозвратТоваровОтКлиента");
	МассивТиповДокументОбъект[3] = Тип("ДокументОбъект.ОтчетОРозничныхПродажах");
	МассивТиповДокументОбъект[4] = Тип("ДокументОбъект.ПриходныйКассовыйОрдер");
	МассивТиповДокументОбъект[5] = Тип("ДокументОбъект.РасходныйКассовыйОрдер");
	МассивТиповДокументОбъект[6] = Тип("ДокументОбъект.ОперацияПоПлатежнойКарте");
	МассивТиповДокументОбъект[7] = Тип("ДокументОбъект.РеализацияТоваровУслуг");
	МассивТиповДокументОбъект[8] = Тип("ДокументОбъект.ПодключениеКегаКОборудованиюРозливаИСМП");
	МассивТиповДокументОбъект[9] = Тип(СтрШаблон("ДокументОбъект.%1", ИмяДокументаВнутреннееПотребление));
	МассивТиповДокументОбъект[10] = Тип("ДокументОбъект.АктСписанияЕГАИС");
	ОписаниеТиповДокументОбъект = Новый ОписаниеТипов(МассивТиповДокументОбъект);
	
	ТаблицаОбъектов = Новый ТаблицаЗначений;
	ТаблицаОбъектов.Колонки.Добавить("Объект", ОписаниеТиповДокументОбъект);
	ТаблицаОбъектов.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	
	// массив удаленных объектов
	МассивУдаленныхДокументов = Новый Массив;
	// массив сохраненных документов
	МассивСохраненныхДокументов = Новый Массив;
	МассивНеОбработанныхДокументов = Новый Массив;
	
	СтруктураОбработанныхДокументов = Новый Структура;
	
	// Строка сообщения о причинах отмены обработки документа
	СтрокаПричинОтмены = "";
	// дополнительные параметры
	ДопПараметры = Новый Структура;
	
	// проверим корректность данных
	Результат = ПроверитьКорректность();
	Если НЕ Результат Тогда
		СтруктураОбработанныхДокументов.Вставить("МассивУдаленныхДокументов",МассивУдаленныхДокументов);
		СтруктураОбработанныхДокументов.Вставить("МассивСохраненныхДокументов",МассивСохраненныхДокументов);
		СтруктураОбработанныхДокументов.Вставить("МассивНеОбработанныхДокументов",МассивНеОбработанныхДокументов);
		Возврат СтруктураОбработанныхДокументов;
	КонецЕсли;
		
	// получим список документов и касс для обработки
	ТаблицаДокументов = ПолучитьДокументыДляОбработки();
	СтрокиТаблицы = ТаблицаДокументов.НайтиСтроки(Новый Структура("Использовать",Истина));
	
	ТаблицаДокументов = ТаблицаДокументов.Скопировать(СтрокиТаблицы, "Документ, КассаККМ");
	ТаблицаДокументов.Свернуть("Документ, КассаККМ");
	
	// Установка документов для обработки.
	СписокОбрабатываемыхДокументов = УстановитьСписокОбрабатываемыхДокументов(СписокОбрабатываемыхДокументов, ТаблицаДокументов);
	
	СписокКасс = Новый СписокЗначений;
	
	// Если ТЧ "Параметры касс" пустая, то загрузим их
	Если ПараметрыКасс.Количество() = 0 Тогда
		// Кассы для загрузки параметров
		ТаблицаДокументов.Свернуть("КассаККМ");
		СписокКасс.ЗагрузитьЗначения(ТаблицаДокументов.ВыгрузитьКолонку("КассаККМ"));
		ЗагрузитьПараметрыКассККМ(СписокКасс);
	КонецЕсли;
	
	// Параметры оплат - таблица соответствий эквайрингового терминала по виду оплат 
	//  и таблица соответствий подарочного сертификата по виду оплат
	ЗагрузитьПараметрыОплат();
	
	// Получим исходную таблицу продаж
	ТаблицаОплат = ПолучитьТаблицуОплат(СписокОбрабатываемыхДокументов);
	Если ТаблицаОплат = Неопределено Тогда 
		СтруктураОбработанныхДокументов.Вставить("МассивУдаленныхДокументов",МассивУдаленныхДокументов);
		СтруктураОбработанныхДокументов.Вставить("МассивСохраненныхДокументов",МассивСохраненныхДокументов);
		СтруктураОбработанныхДокументов.Вставить("МассивНеОбработанныхДокументов",МассивНеОбработанныхДокументов);
		Возврат СтруктураОбработанныхДокументов;
	КонецЕсли;
	
	ТаблицаПродаж = ПолучитьОсновнуюТаблицуНоменклатуры(СписокОбрабатываемыхДокументов);
	ТаблицаПродажМодификаторы = ПолучитьТаблицуМодификаторов(СписокОбрабатываемыхДокументов);
	// Проверим данные на правильность заполнения
	ПроверитьНеобработанныеДокументы(СтрокаПричинОтмены);
	
	// Таблица для связи целевых документов с документами данных продаж
	ТаблицаСоответствияРегистратораИДокумента = ПолучитьТаблицуСоответствияРегистратораИЦелевогоДокумента();
	
	ВидыДокументовИСкладов = Новый ТаблицаЗначений;
	ВидыДокументовИСкладов.Колонки.Добавить("ВидыДокументов", Новый ОписаниеТипов("Строка"));
	// Виды складов: 0 - склад приготовления, 1 - склад реализации, 2 - оба склада
	ВидыДокументовИСкладов.Колонки.Добавить("ВидыСкладов", Новый ОписаниеТипов("Число"));
	Если питФормироватьДокументыПроизводства22 Тогда
		// Склад приготовления
		НоваяСтрока = ВидыДокументовИСкладов.Добавить();
		НоваяСтрока.ВидыДокументов = "ТаблицаПродаж.ВидДокумента = ""ВыпускСоСписанием""";	
		НоваяСтрока.ВидыСкладов = 0;
		// Склад приготовления и склад реализации
		НоваяСтрока = ВидыДокументовИСкладов.Добавить();
		НоваяСтрока.ВидыДокументов = "ТаблицаПродаж.ВидДокумента = ""ВыпускСРозничнойРеализацией""";
		НоваяСтрока.ВидыСкладов = 2;
		// Склад приготовления и склад реализации
		НоваяСтрока = ВидыДокументовИСкладов.Добавить();
		НоваяСтрока.ВидыДокументов = "ТаблицаПродаж.ВидДокумента = ""ВыпускСРеализацией""";
		НоваяСтрока.ВидыСкладов = 2;
	Иначе
		// Склад приготовления
		НоваяСтрока = ВидыДокументовИСкладов.Добавить();
		НоваяСтрока.ВидыДокументов = "ТаблицаПродаж.ВидДокумента = ""ВыпускСРозничнойРеализацией"" ИЛИ ТаблицаПродаж.ВидДокумента = ""ВыпускСоСписанием""";	
		НоваяСтрока.ВидыСкладов = 0;
		// Склад приготовления и склад реализации
		НоваяСтрока = ВидыДокументовИСкладов.Добавить();
		НоваяСтрока.ВидыДокументов = "ТаблицаПродаж.ВидДокумента = ""ВыпускСПеремещением""";	
		НоваяСтрока.ВидыСкладов = 2;
	КонецЕсли;
	// Склад реализации (кроме возврата)
	НоваяСтрока = ВидыДокументовИСкладов.Добавить();
	НоваяСтрока.ВидыДокументов = "ТаблицаПродаж.ВидДокумента = ""АктОРеализации"" ИЛИ ТаблицаПродаж.ВидДокумента = ""СписаниеТоваров""";	
	НоваяСтрока.ВидыСкладов = 1;
	
	// Склад реализации (Возврат)
	НоваяСтрока = ВидыДокументовИСкладов.Добавить();
	НоваяСтрока.ВидыДокументов = "ТаблицаПродаж.ВидДокумента = ""ВозвратОтПокупателя""";	
	НоваяСтрока.ВидыСкладов = 1;
	
	// Денежные документы предоплата
	НоваяСтрока = ВидыДокументовИСкладов.Добавить();
	НоваяСтрока.ВидыДокументов = "ТаблицаПродаж.ВидДокумента = ""ПриходныйКассовыйОрдер"" ИЛИ ТаблицаПродаж.ВидДокумента = ""ПоступлениеНаРасчетныйСчет""";	
	НоваяСтрока.ВидыСкладов = 1;
	// Денежные документы предоплата (возврат)
	НоваяСтрока = ВидыДокументовИСкладов.Добавить();
	НоваяСтрока.ВидыДокументов = "ТаблицаПродаж.ВидДокумента = ""ПриходныйКассовыйОрдерВозврат"" ИЛИ ТаблицаПродаж.ВидДокумента = ""ПоступлениеНаРасчетныйСчетВозврат""";	
	НоваяСтрока.ВидыСкладов = 1;
	
	// Склад реализации (кроме возврата)
	НоваяСтрока = ВидыДокументовИСкладов.Добавить();
	НоваяСтрока.ВидыДокументов = "ТаблицаПродаж.ВидДокумента = ""РеализацияТоваровУслуг""";	
	НоваяСтрока.ВидыСкладов = 1;
	
	// Склад реализации
	НоваяСтрока = ВидыДокументовИСкладов.Добавить();
	НоваяСтрока.ВидыДокументов = "ТаблицаПродаж.ВидДокумента = ""УчетАлкоголяПиво""";	
	НоваяСтрока.ВидыСкладов = 1;
	
	// Склад реализации
	НоваяСтрока = ВидыДокументовИСкладов.Добавить();
	НоваяСтрока.ВидыДокументов = "ТаблицаПродаж.ВидДокумента = ""УчетАлкоголяКрепкийАлкогольРег1""";	
	НоваяСтрока.ВидыСкладов = 1;
	
	// Склад реализации
	НоваяСтрока = ВидыДокументовИСкладов.Добавить();
	НоваяСтрока.ВидыДокументов = "ТаблицаПродаж.ВидДокумента = ""УчетАлкоголяКрепкийАлкогольРег2""";	
	НоваяСтрока.ВидыСкладов = 1;
	
	СтруктураТекущихСостояний.Организация = Справочники.Организации.ПустаяСсылка();
	СтруктураТекущихСостояний.Подразделение = Справочники.СтруктураПредприятия.ПустаяСсылка();
	СтруктураТекущихСостояний.СкладПриготовления = Справочники.Склады.ПустаяСсылка();
	СтруктураТекущихСостояний.СкладРеализации = Справочники.Склады.ПустаяСсылка();
	СтруктураТекущихСостояний.ВидДокумента = Неопределено;
	СтруктураТекущихСостояний.КассаККМ = Справочники.КассыККМ.ПустаяСсылка();
	СтруктураТекущихСостояний.НомерСмены = Неопределено;
	//+группировка по дате смены
	СтруктураТекущихСостояний.ДатаСмены = Дата("00010101");
	СтруктураТекущихСостояний.СтатьяСписанияТМЦ = ПланыВидовХарактеристик.СтатьиРасходов.ПустаяСсылка();
	СтруктураТекущихСостояний.АналитикаСписанияТМЦ = Неопределено;
	СтруктураТекущихСостояний.ВедущийТипОплаты = Справочники.питВидыОплатОрганизаций.ПустаяСсылка();
	СтруктураТекущихСостояний.СуммаВключаетНДС = Истина;
	СтруктураТекущихСостояний.АналитикаКодАкциза = Справочники.ШтрихкодыУпаковокТоваров.ПустаяСсылка();
	
	Для Каждого СтрокаВидовДокументов Из ВидыДокументовИСкладов Цикл
		РезультатЗапросаТоваров = ПолучитьРезультатЗапросаТоваров(СтрокаВидовДокументов.ВидыДокументов,СтрокаВидовДокументов.ВидыСкладов);
		// Обойдем таблицу целевых документов и создадим / обновим документы производства
		ОбходРезультатаЗапросаПоТоварам(РезультатЗапросаТоваров);
	КонецЦикла;
	
	// Запишем созданные объекты
	
	ТаблицаОбъектов.Сортировать("Дата");
	МассивОбработанныхДокументов = Новый Массив;
	МассивДокументовКПроведению = Новый Массив;
	текДата = Неопределено;
	Для Каждого СтрокаОбъект Из ТаблицаОбъектов Цикл
		Если текДата <> СтрокаОбъект.Дата Тогда
			Если текДата <> Неопределено Тогда
				Обработки.питЗагрузкаИзДанныхПродажФронта.ЗарегистрироватьИзменениеЦелевыхДокументов(ТаблицаСоответствияРегистратораИДокумента, МассивОбработанныхДокументов, МассивУдаленныхДокументов);
				Если ТранзакцияАктивна() Тогда
					питОбщегоНазначенияСервер.ЗафиксироватьТранзакциюОбязательно();
				КонецЕсли;
				МассивОбработанныхДокументов.Очистить();
			КонецЕсли;
			
			текДата = СтрокаОбъект.Дата;
		КонецЕсли;
		Если НЕ ТранзакцияАктивна() Тогда
			НачатьТранзакцию();
		КонецЕсли;
		
		ЗаписатьДокумент(СтрокаОбъект.Объект, МассивДокументовКПроведению);
		Если Не СтрокаОбъект.Объект.Ссылка.Пустая() Тогда
			ВыполнитьПослеЗаписиЦелевогоДокумента(СтрокаОбъект.Объект, ДопПараметры);
			МассивОбработанныхДокументов.Добавить(СтрокаОбъект.Объект.Ссылка);
		КонецЕсли;
		
	КонецЦикла;
	Если текДата <> Неопределено Тогда
		Обработки.питЗагрузкаИзДанныхПродажФронта.ЗарегистрироватьИзменениеЦелевыхДокументов(ТаблицаСоответствияРегистратораИДокумента, МассивОбработанныхДокументов, МассивУдаленныхДокументов);
		Если ТранзакцияАктивна() Тогда
			питОбщегоНазначенияСервер.ЗафиксироватьТранзакциюОбязательно();
		КонецЕсли;
		МассивОбработанныхДокументов.Очистить();
	КонецЕсли;
	
	Для Каждого ДокументКПроведению Из МассивДокументовКПроведению Цикл
		Попытка
			ДокументКПроведению.ДополнительныеСвойства.Вставить("ОтключитьДополнительныеПроверки", Истина);
			ДокументКПроведению.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ТекстСообщения = ОписаниеОшибки();
			ЗаписьЖурналаРегистрации("ЗагрузкаИзДанныхПродаж", УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
	//<<Загребалов И., Апрель-Софт, 24.02.2022.SD68139
	Для Каждого Строка ИЗ ТаблицаСоответствияРегистратораИДокумента Цикл
		Если МассивДокументовКПроведению.Количество() = 0 Тогда
			Прервать;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Строка.ЦелевойДокументСсылка) И Строка.ВидДокумента = "ВозвратОтПокупателя"Тогда
			
			Для Каждого Выпуск Из МассивДокументовКПроведению Цикл
				Если Выпуск.Организация = Строка.Организация И Строка.СкладРеализации = Выпуск.Склад  И Строка.Подразделение = Выпуск.Подразделение Тогда
					Строка.ЦелевойДокументСсылка = Выпуск.Ссылка;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	Если текДата <> Неопределено Тогда
		Обработки.питЗагрузкаИзДанныхПродажФронта.ЗарегистрироватьИзменениеЦелевыхДокументов(ТаблицаСоответствияРегистратораИДокумента, МассивОбработанныхДокументов, МассивУдаленныхДокументов);
		Если ТранзакцияАктивна() Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		МассивОбработанныхДокументов.Очистить();
	КонецЕсли;
	//>>
	
	// Удалим документы, которые потеряли связь с регистратором
	УдалитьНеактуальныеЦелевыеДокументы();
	// Проверим корректность регистра сведений и очистим его от лишних записей
	ОбновитьРегистрУчетаДанныхПродаж();
	// Очистим массив объектов для записи
	ТаблицаОбъектов.Очистить();
		
	Если ЗначениеЗаполнено(СтрокаПричинОтмены) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Некоторые данные документов продаж фронта не были перегружены. Проверьте правильность заполнения следующих данных:" + Символы.ПС;
		Сообщение.Сообщить();
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтрокаПричинОтмены;
		Сообщение.Сообщить();
	КонецЕсли;
	СтруктураОбработанныхДокументов.Вставить("МассивУдаленныхДокументов",МассивУдаленныхДокументов);
	СтруктураОбработанныхДокументов.Вставить("МассивСохраненныхДокументов",МассивСохраненныхДокументов);
	СтруктураОбработанныхДокументов.Вставить("МассивНеОбработанныхДокументов",МассивНеОбработанныхДокументов);
	СтруктураОбработанныхДокументов.Вставить("СписокИсключающихДокументов", СписокИсключающихДокументов);
	
	Возврат СтруктураОбработанныхДокументов;
КонецФункции

// Функция возвращает список обрабатываемых документов
//
// Параметры:
//  НачальныйСписокДокументов	 - СписокЗначений, Неопределено - Начальнеый список, который будем фильтровать.
//  НайденнаяТаблицаДокументов	 - ТаблицаЗначений - Таблица всех возможных документов.
// 
// Возвращаемое значение:
//  СписокЗначений - Отфильтрованный список, если список не был передан, то выгрузится все из таблицы документов.
//
Функция УстановитьСписокОбрабатываемыхДокументов(Знач НачальныйСписокДокументов, Знач НайденнаяТаблицаДокументов)
	
	Результат = Новый СписокЗначений;
	
	Если ТипЗнч(НачальныйСписокДокументов) <> Тип("СписокЗначений") Тогда
		Результат.ЗагрузитьЗначения(НайденнаяТаблицаДокументов.ВыгрузитьКолонку("Документ"));
		Возврат Результат;
	КонецЕсли;
	
	// Список обрабатываемых документов передали извне, отфильтруем их
	Для каждого НайденныйОбрабатываемый Из НачальныйСписокДокументов Цикл
		НайденныеДокументы = НайденнаяТаблицаДокументов.НайтиСтроки(Новый Структура("Документ", НайденныйОбрабатываемый.Значение));
		Если НайденныеДокументы.Количество() Тогда
			// Документ есть в таблице, добавляем в результат.
			Результат.Добавить(НайденныйОбрабатываемый.Значение, НайденныйОбрабатываемый.Представление);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Параметры оплат - таблица соответствий эквайрингового терминала по виду оплат 
//  и таблица соответствий подарочного сертификата по виду оплат
Процедура ЗагрузитьПараметрыОплат()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(питУдаленныеКассыЭквайринговыеТерминалы.ЭквайринговыйТерминал, ЗНАЧЕНИЕ(Справочник.ЭквайринговыеТерминалы.ПустаяСсылка)) КАК ЭквайринговыйТерминал,
	|	ЕСТЬNULL(питУдаленныеКассыЭквайринговыеТерминалы.ВидОплаты, ЗНАЧЕНИЕ(Справочник.питВидыОплатОрганизаций.ПустаяСсылка)) КАК ВидОплаты,
	|	КассыККМ.Ссылка КАК КассаККМ
	|ИЗ
	|	Справочник.КассыККМ КАК КассыККМ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланОбмена.питУдаленныеКассы.ЭквайринговыеТерминалы КАК питУдаленныеКассыЭквайринговыеТерминалы
	|		ПО КассыККМ.питКассовыйУзел = питУдаленныеКассыЭквайринговыеТерминалы.Ссылка
	|ГДЕ
	|	КассыККМ.Ссылка В(&КассыККМ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(питУдаленныеКассыКонтрагенты.Контрагент, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК Контрагент,
	|	ЕСТЬNULL(питУдаленныеКассыКонтрагенты.ВидОплаты, ЗНАЧЕНИЕ(Справочник.питВидыОплатОрганизаций.ПустаяСсылка)) КАК ВидОплаты,
	|	ЕСТЬNULL(питУдаленныеКассыКонтрагенты.Договор, ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)) КАК Договор,
	|	ЕСТЬNULL(питУдаленныеКассыКонтрагенты.Клиент, ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)) КАК Клиент,
	|	ЕСТЬNULL(питУдаленныеКассыКонтрагенты.Соглашение, ЗНАЧЕНИЕ(Справочник.СоглашенияСКлиентами.ПустаяСсылка)) КАК Соглашение,
	|	КассыККМ.Ссылка КАК КассаККМ
	|ИЗ
	|	Справочник.КассыККМ КАК КассыККМ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланОбмена.питУдаленныеКассы.Контрагенты КАК питУдаленныеКассыКонтрагенты
	|		ПО КассыККМ.питКассовыйУзел = питУдаленныеКассыКонтрагенты.Ссылка
	|ГДЕ
	|	КассыККМ.Ссылка В(&КассыККМ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(питУдаленныеКассыПодарочныеСертификаты.ВидОплаты, ЗНАЧЕНИЕ(Справочник.питВидыОплатОрганизаций.ПустаяСсылка)) КАК ВидОплаты,
	|	КассыККМ.Ссылка КАК КассаККМ,
	|	ЕСТЬNULL(питУдаленныеКассыПодарочныеСертификаты.ПодарочныйСертификат, ЗНАЧЕНИЕ(Справочник.ПодарочныеСертификаты.ПустаяСсылка)) КАК ПодарочныйСертификат
	|ИЗ
	|	Справочник.КассыККМ КАК КассыККМ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланОбмена.питУдаленныеКассы.ПодарочныеСертификаты КАК питУдаленныеКассыПодарочныеСертификаты
	|		ПО КассыККМ.питКассовыйУзел = питУдаленныеКассыПодарочныеСертификаты.Ссылка
	|ГДЕ
	|	КассыККМ.Ссылка В(&КассыККМ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(питУдаленныеКассыБонусныеПрограммы.ВидОплаты, ЗНАЧЕНИЕ(Справочник.питВидыОплатОрганизаций.ПустаяСсылка)) КАК ВидОплаты,
	|	КассыККМ.Ссылка КАК КассаККМ,
	|	ЕСТЬNULL(питУдаленныеКассыБонусныеПрограммы.БонуснаяПрограмма, ЗНАЧЕНИЕ(Справочник.БонусныеПрограммыЛояльности.ПустаяСсылка)) КАК БонуснаяПрограмма
	|ИЗ
	|	Справочник.КассыККМ КАК КассыККМ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланОбмена.питУдаленныеКассы.БонусныеПрограммы КАК питУдаленныеКассыБонусныеПрограммы
	|		ПО КассыККМ.питКассовыйУзел = питУдаленныеКассыБонусныеПрограммы.Ссылка
	|ГДЕ
	|	КассыККМ.Ссылка В(&КассыККМ)";
	МассивКасс = Новый Массив;
	СтрокиКасс = ПараметрыКасс.НайтиСтроки(Новый Структура("Использовать", Истина));
	Для каждого СтрокаКасс Из СтрокиКасс Цикл
		МассивКасс.Добавить(СтрокаКасс.КассаККМ);
	КонецЦикла;
	Запрос.УстановитьПараметр("КассыККМ", МассивКасс);
	РезультатЗапросаОплаты = Запрос.ВыполнитьПакет();
	ТаблицаЭквайринговыхТерминалов	= РезультатЗапросаОплаты[0].Выгрузить();
	ТаблицаКонтрагентов	= РезультатЗапросаОплаты[1].Выгрузить();
	ТаблицаПодарочныхСертификатов	= РезультатЗапросаОплаты[2].Выгрузить();
	ТаблицаБонусныхПрограмм			= РезультатЗапросаОплаты[3].Выгрузить();
	
КонецПроцедуры

//<< Портал-Юг, Баринов, 2019.09.14 [9.33 Уменьшение продаж на возвраты по открытой цене при формировании выпусков блюд]
Функция РаспределитьВозвратыПоПродажам(тчТовары)
	
	СуммаВычета = 0;
	
	УчитыватьВозвратыПриЗагрузкеПродаж = Ложь;

	СтрокаПараметров = ПараметрыКасс.Найти(СтруктураТекущихСостояний.КассаККМ,"КассаККМ");
	Если СтрокаПараметров <> Неопределено Тогда
		УчитыватьВозвратыПриЗагрузкеПродаж = СтрокаПараметров.УчитыватьВозвратыПриЗагрузкеПродаж;
	КонецЕсли;
	Если НЕ УчитыватьВозвратыПриЗагрузкеПродаж Тогда
		Возврат 0;
	КонецЕсли;
	
	Если СтруктураТекущихСостояний.ВидДокумента = "ВыпускСРозничнойРеализацией" Тогда 
		Если питФормироватьДокументыПроизводства22 Тогда
			СтруктураПоиска = Новый Структура("Организация,Подразделение,СкладРеализации",СтруктураТекущихСостояний.Организация,СтруктураТекущихСостояний.Подразделение,СтруктураТекущихСостояний.СкладРеализации);
		Иначе
			СтруктураПоиска = Новый Структура("Организация,Подразделение,СкладРеализации",СтруктураТекущихСостояний.Организация,СтруктураТекущихСостояний.Подразделение,СтруктураТекущихСостояний.СкладПриготовления);
		КонецЕсли;
	ИначеЕсли СтруктураТекущихСостояний.ВидДокумента = "АктОРеализации" Тогда
		СтруктураПоиска = Новый Структура("Организация,Подразделение,СкладРеализации",СтруктураТекущихСостояний.Организация,СтруктураТекущихСостояний.Подразделение,СтруктураТекущихСостояний.СкладРеализации);
	Иначе
		Возврат 0;
	КонецЕсли;
	
	СтруктураПоиска.Вставить("ВидДокумента", "ВозвратОтПокупателя");
	СтруктураПоиска.Вставить("ПЛ_НоменклатураОткрытаяЦена", СтруктураТекущихСостояний.ПЛ_НоменклатураОткрытаяЦена);
	
	Если ГруппироватьПоНомеруСмены Тогда
		СтруктураПоиска.Вставить("КассаККМ", СтруктураТекущихСостояний.КассаККМ);
		СтруктураПоиска.Вставить("НомерСмены", СтруктураТекущихСостояний.НомерСмены);
	КонецЕсли;
	
	СтрокиВозвратов = ТаблицаПродаж.НайтиСтроки(СтруктураПоиска);
	
	СтруктураПоискаТоваров = Новый Структура("Номенклатура, Характеристика, СтавкаНДС, ПЛ_Договор");
	
	Если НЕ ЗначениеЗаполнено(СтруктураТекущихСостояний.ПЛ_НоменклатураОткрытаяЦена) Тогда 
		СуммаВычета = СуммаВычета + ПЛ_ВычестьВозвратыИзТоваров(СтрокиВозвратов, СтруктураПоискаТоваров, тчТовары);
		Если СтрокиВозвратов.Количество() Тогда 
			// Если остались ещё возвраты, поищем без учёта договора
			СтруктураПоискаТоваров.Удалить("ПЛ_Договор");
			СуммаВычета = СуммаВычета + ПЛ_ВычестьВозвратыИзТоваров(СтрокиВозвратов, СтруктураПоискаТоваров, тчТовары);
		КонецЕсли;	
	Иначе	
		// Это открытые продажи. Характеристики там учитывать не нужно
		// Но нужно подобрать строки по сумме, количество всегда 1, поэтому по сумме, а не цене.
		СтруктураПоискаТоваров.Удалить("Характеристика");
		СтруктураПоискаТоваров.Вставить("Сумма");
		СтруктураПоискаТоваров.Вставить("СуммаСкидки");
		
		СуммаВычета = СуммаВычета + ПЛ_ВычестьВозвратыИзТоваров(СтрокиВозвратов, СтруктураПоискаТоваров, тчТовары);
		
		Если СтрокиВозвратов.Количество() Тогда 
			// По сумме без скидки
			СтруктураПоискаТоваров.Удалить("СуммаСкидки");
		    СуммаВычета = СуммаВычета + ПЛ_ВычестьВозвратыИзТоваров(СтрокиВозвратов, СтруктураПоискаТоваров, тчТовары);
		КонецЕсли;	
		
		//>>Швецов. ERP-5307. 22.07.25 Некорректно вычитает если возврат будет со скидками и на большую сумму продаж
		//Если СтрокиВозвратов.Количество() Тогда 
		//	// Без учёта сумм, но по договору
		//	СтруктураПоискаТоваров.Удалить("Сумма");
		//	СтруктураПоискаТоваров.Удалить("СуммаСкидки");
		//    СуммаВычета = СуммаВычета + ПЛ_ВычестьВозвратыИзТоваров(СтрокиВозвратов, СтруктураПоискаТоваров, тчТовары, Истина);
		//КонецЕсли;		
		
		Если СтрокиВозвратов.Количество() Тогда 
			// Без договора, но по суммам
			СтруктураПоискаТоваров.Удалить("ПЛ_Договор");
			СтруктураПоискаТоваров.Вставить("Сумма");
			СтруктураПоискаТоваров.Вставить("СуммаСкидки");
		    СуммаВычета = СуммаВычета + ПЛ_ВычестьВозвратыИзТоваров(СтрокиВозвратов, СтруктураПоискаТоваров, тчТовары);
		КонецЕсли;
		
		Если СтрокиВозвратов.Количество() Тогда 
			// По сумме без скидки
			СтруктураПоискаТоваров.Удалить("СуммаСкидки");
		    СуммаВычета = СуммаВычета + ПЛ_ВычестьВозвратыИзТоваров(СтрокиВозвратов, СтруктураПоискаТоваров, тчТовары);
		КонецЕсли;	
		
		//>>Швецов. ERP-5307. 22.07.25 Некорректно вычитает если возврат будет со скидками и на большую сумму продаж
		//Если СтрокиВозвратов.Количество() Тогда 
		//	// всё, что осталось
		//	СтруктураПоискаТоваров.Удалить("Сумма");
		//	СтруктураПоискаТоваров.Удалить("СуммаСкидки");
		//    СуммаВычета = СуммаВычета + ПЛ_ВычестьВозвратыИзТоваров(СтрокиВозвратов, СтруктураПоискаТоваров, тчТовары, Истина);
		//КонецЕсли;
		//<<Швецов
	КонецЕсли;	
	
	Возврат СуммаВычета;
	
КонецФункции //>> Портал-Юг, Баринов, 2019.09.14

//<< Портал-Юг, Баринов, 2019.09.14 [9.33 Уменьшение продаж на возвраты по открытой цене при формировании выпусков блюд]
Функция ПЛ_ВычестьВозвратыИзТоваров(СтрокиВозвратов, СтруктураПоискаТоваров, тчТовары, ОткрытаяЦенаБезУчетаСумм = Ложь)
	
	СуммаВычета = 0;
	
	ИндексСтрокиВозвратов = СтрокиВозвратов.Количество();
	
	Пока ИндексСтрокиВозвратов > 0 Цикл
		ИндексСтрокиВозвратов = ИндексСтрокиВозвратов - 1;
		СтрокаВозврата = СтрокиВозвратов[ИндексСтрокиВозвратов];		
		Если СтрокаВозврата.Количество = 0 Тогда
			СтрокиВозвратов.Удалить(ИндексСтрокиВозвратов);
			Продолжить;	
		КонецЕсли;	
		
		ЗаполнитьЗначенияСвойств(СтруктураПоискаТоваров, СтрокаВозврата);
		
		Если СтруктураПоискаТоваров.Свойство("Сумма") И НЕ СтруктураПоискаТоваров.Свойство("СуммаСкидки") Тогда
			// По сумме без скидки. Как если бы возврат был без скидки, на полную сумму.
			СтруктураПоискаТоваров.Сумма = СтрокаВозврата.Сумма + СтрокаВозврата.СуммаСкидки;
		КонецЕсли;
		
		Если СтруктураПоискаТоваров.Свойство("СуммаСкидки") Тогда 
			// В возвратах поле "СуммаСкидки", в товарах "СуммаРучнойСкидки"
			СтруктураПоискаТоваров.Вставить("СуммаРучнойСкидки", СтруктураПоискаТоваров.СуммаСкидки);
			СтруктураПоискаТоваров.Удалить("СуммаСкидки");
		КонецЕсли;		
	
		СтрокиТоваров = тчТовары.НайтиСтроки(СтруктураПоискаТоваров);
		
		Если СтруктураПоискаТоваров.Свойство("СуммаРучнойСкидки") Тогда 
			// В возвратах поле "СуммаСкидки", в товарах "СуммаРучнойСкидки"
			СтруктураПоискаТоваров.Вставить("СуммаСкидки");
			СтруктураПоискаТоваров.Удалить("СуммаРучнойСкидки");
		КонецЕсли;
		
		Для каждого СтрокаТоваров Из СтрокиТоваров Цикл
			Если НЕ ОткрытаяЦенаБезУчетаСумм Тогда
				Если СтрокаВозврата.Количество <= СтрокаТоваров.Количество Тогда
					КоличествоКВычету = СтрокаВозврата.Количество;
					СуммаКВычету = СтрокаВозврата.Сумма;
					СуммаСкидкиКВычету = СтрокаВозврата.СуммаСкидки;
				Иначе
					КоличествоКВычету = СтрокаТоваров.Количество;
					СуммаКВычету = СтрокаТоваров.Сумма;
					СуммаСкидкиКВычету = СтрокаТоваров.СуммаРучнойСкидки;
				КонецЕсли;
				СтрокаТоваров.Количество = СтрокаТоваров.Количество - КоличествоКВычету;
				СтрокаВозврата.Количество = СтрокаВозврата.Количество - КоличествоКВычету;
			Иначе
				// Тут главное не количество, а сумма
				Если СтрокаВозврата.Сумма < СтрокаТоваров.Сумма Тогда
					СтрокаВозврата.Количество = 0;
					СуммаКВычету = СтрокаВозврата.Сумма;
					СуммаСкидкиКВычету = СтрокаВозврата.СуммаСкидки;
				ИначеЕсли СтрокаВозврата.Сумма = СтрокаТоваров.Сумма Тогда
					СтрокаВозврата.Количество = 0;
					СтрокаТоваров.Количество = 0;
					СуммаКВычету = СтрокаВозврата.Сумма;
					СуммаСкидкиКВычету = СтрокаВозврата.СуммаСкидки;
				Иначе
					СтрокаТоваров.Количество = 0;
					СуммаКВычету = СтрокаТоваров.Сумма;
					СуммаСкидкиКВычету = СтрокаТоваров.СуммаРучнойСкидки;
				КонецЕсли;
			КонецЕсли; 
			
			СтрокаТоваров.Сумма = СтрокаТоваров.Сумма - СуммаКВычету;
			СтрокаВозврата.Сумма = СтрокаВозврата.Сумма - СуммаКВычету;
			СуммаВычета = СуммаВычета + СуммаКВычету;
			
			СтрокаВозврата.СуммаСкидки = СтрокаВозврата.СуммаСкидки - СуммаСкидкиКВычету;
			СтрокаТоваров.СуммаРучнойСкидки = СтрокаТоваров.СуммаРучнойСкидки - СуммаСкидкиКВычету;
		
			Если СтрокаТоваров.Сумма + СтрокаТоваров.СуммаРучнойСкидки = 0 Тогда
				СтрокаТоваров.ПроцентРучнойСкидки = 0;
			Иначе
				СтрокаТоваров.ПроцентРучнойСкидки	= (СтрокаТоваров.СуммаРучнойСкидки / (СтрокаТоваров.Сумма + СтрокаТоваров.СуммаРучнойСкидки)) * 100;
			КонецЕсли;		
					
			Если СтрокаВозврата.Количество = 0 Тогда
				СтрокиВозвратов.Удалить(ИндексСтрокиВозвратов);
				Прервать;
			КонецЕсли; 
		КонецЦикла; 
	КонецЦикла;
	
	Возврат СуммаВычета;
	
КонецФункции //>> Портал-Юг, Баринов, 2019.09.14

СтруктураТекущихСостояний = Новый Структура;
СтруктураТекущихСостояний.Вставить("Организация");
СтруктураТекущихСостояний.Вставить("Подразделение");
СтруктураТекущихСостояний.Вставить("ВидДокумента");
СтруктураТекущихСостояний.Вставить("КассаККМ");
СтруктураТекущихСостояний.Вставить("НомерСмены");
//+группировка по дате смены
СтруктураТекущихСостояний.Вставить("ДатаСмены");
СтруктураТекущихСостояний.Вставить("СкладПриготовления");
СтруктураТекущихСостояний.Вставить("СкладРеализации");
СтруктураТекущихСостояний.Вставить("СтатьяСписанияТМЦ");
СтруктураТекущихСостояний.Вставить("АналитикаСписанияТМЦ");
СтруктураТекущихСостояний.Вставить("ВедущийТипОплаты");
СтруктураТекущихСостояний.Вставить("СуммаВключаетНДС");
//<<Портал-Юг, Давиденко 2019.03.27 [4.2.9 Особенности заполнения выпуска блюд по чекам]
СтруктураТекущихСостояний.Вставить("ПЛ_НоменклатураОткрытаяЦена");
//>>Портал-Юг, Давиденко 2019.03.27
СтруктураТекущихСостояний.Вставить("КонтрагентДляЗачетаАванса");
СтруктураТекущихСостояний.Вставить("ДоговорКонтрагентаДляЗачетаАванса");
СтруктураТекущихСостояний.Вставить("СоглашениеДляЗачетаАванса");
СтруктураТекущихСостояний.Вставить("КлиентДляЗачетаАванса");
СтруктураТекущихСостояний.Вставить("АналитикаКодАкциза");

СписокИсключающихДокументов = Новый СписокЗначений;

КэшРецептур = Новый ТаблицаЗначений;
КэшРецептур.Колонки.Добавить("Номенклатура");
КэшРецептур.Колонки.Добавить("Характеристика");
КэшРецептур.Колонки.Добавить("Рецептура");
КэшРецептур.Колонки.Добавить("Подразделение");

ТаблицаЭквайринговыхТерминалов = Новый ТаблицаЗначений;
ТаблицаЭквайринговыхТерминалов.Колонки.Добавить("КассаККМ");
ТаблицаЭквайринговыхТерминалов.Колонки.Добавить("ВидОплаты");
ТаблицаЭквайринговыхТерминалов.Колонки.Добавить("ЭквайринговыйТерминал");

ТаблицаКонтрагентов = Новый ТаблицаЗначений;
ТаблицаКонтрагентов.Колонки.Добавить("Контрагент");
ТаблицаКонтрагентов.Колонки.Добавить("ВидОплаты");
ТаблицаКонтрагентов.Колонки.Добавить("Договор");
ТаблицаКонтрагентов.Колонки.Добавить("Клиент");
ТаблицаКонтрагентов.Колонки.Добавить("Соглашение");

ТаблицаПодарочныхСертификатов = Новый ТаблицаЗначений;
ТаблицаПодарочныхСертификатов.Колонки.Добавить("КассаККМ");
ТаблицаПодарочныхСертификатов.Колонки.Добавить("ВидОплаты");
ТаблицаПодарочныхСертификатов.Колонки.Добавить("ПодарочныйСертификат");

ТаблицаБонусныхПрограмм = Новый ТаблицаЗначений;
ТаблицаБонусныхПрограмм.Колонки.Добавить("КассаККМ");
ТаблицаБонусныхПрограмм.Колонки.Добавить("ВидОплаты");
ТаблицаБонусныхПрограмм.Колонки.Добавить("БонуснаяПрограмма");

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

питФормироватьДокументыПроизводства22 = Константы.питФормироватьДокументыПроизводства22.Получить();

УпаковкиКэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();

#КонецЕсли
